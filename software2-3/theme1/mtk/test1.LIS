

   1               	        .data
   2               	        .align 2
   3               	environ:
   4 0000 0000 0000 	        .long 0
   5               	 	.align	2
   6               	
   7               	.extern main
   8               	.extern exit
   9               	.extern monitor_begin
  10               	.extern hardware_init_hook
  11               	.extern software_init_hook
  12               	.extern atexit
  13               	.extern __do_global_dtors
  14               	.extern __bss_start
  15               	.extern _end
  16               	
  17               	.global start
  18               	
  19               	.text
  20               	.even
  21               		/* See if user supplied their own stack (__stack != 0).  If not, then
  22               		 * default to using the value of %sp as set by the ROM monitor.
  23               		 */
  24 0000 207C 0000 		movel	#__stack, %a0
  24      0000 
  25 0006 B1FC 0000 		cmpl	#0, %a0
  25      0000 
  26 000c 6702      		jbeq    1f
  27 000e 2E48      		movel	%a0, %sp
  28               	1:
  29               		/* set up initial stack frame */
  30 0010 4E56 FFF8 		link	%a6, #-8
  31               	
  32               		/* zero out the bss section */
  33 0014 223C 0000 		movel	#__bss_start, %d1
  33      0000 
  34 001a 203C 0000 		movel	#_end, %d0
  34      0000 
  35 0020 B280      		cmpl	%d0, %d1
  36 0022 6712      		jbeq	3f
  37 0024 2041      		movl	%d1, %a0
  38 0026 9081      		subl	%d1, %d0
  39 0028 5380      		subql	#1, %d0
  40               	2:
  41 002a 4218      		clrb	(%a0)+
  42 002c 51C8 FFFC 		dbra	%d0, 2b
  43 0030 4240      		clrw	%d0
  44 0032 5380      		subql	#1, %d0
  45 0034 64F4      		jbcc	2b
  46               	3:
  47               		/* jmp monitor initialize after making up  bss */
  48 0036 4EF9 0000 		jmp	monitor_begin
  48      0000 
  49               	start:
  50               		/* monitor returns here.
  51               		 * re-setup stack for C programs.
  52               	         * See if user supplied their own stack (__stack != 0).  If not, then


  53               		 * default to using the value of %sp as set by the ROM monitor.
  54               		 */
  55 003c 207C 0000 		movel	#__stack, %a0
  55      0000 
  56 0042 B1FC 0000 		cmpl	#0, %a0
  56      0000 
  57 0048 6702      		jbeq    skip
  58 004a 2E48      		movel	%a0, %sp
  59               	skip:
  60               		/* set up initial stack frame */
  61 004c 4E56 FFF8 		link	%a6, #-8
  62               	
  63               		/*
  64               		 * initialize target specific stuff. Only execute these
  65               		 * functions it they exist.
  66               		 */
  67 0050 41F9 0000 		lea	hardware_init_hook, %a0
  67      0000 
  68 0056 B1FC 0000 		cmpl	#0, %a0
  68      0000 
  69 005c 6702      		jbeq	4f
  70 005e 4E90      		jsr     (%a0)
  71               	4:
  72 0060 41F9 0000 		lea	software_init_hook, %a0
  72      0000 
  73 0066 B1FC 0000 		cmpl	#0, %a0
  73      0000 
  74 006c 6702      		jbeq	5f
  75 006e 4E90      		jsr     (%a0)
  76               	5:
  77               	
  78               		/*
  79               		 * call the main routine from the application to get it going.
  80               		 * main (argc, argv, environ)
  81               		 * we pass argv as a pointer to NULL.
  82               		 */
  83               	
  84               		/* put __do_global_dtors in the atexit list so 
  85               		 * the destructors get run */
  86               	/* 
  87               		movel	#__do_global_dtors,(%sp)
  88               		jsr	atexit
  89               		movel	#__FINI_SECTION__,(%sp)
  90               		jsr	atexit
  91               		jsr	__INIT_SECTION__
  92               	*/
  93               		
  94               		** setup argv, argc and jump into main
  95 0070 4878 0000 	        pea     0
  96 0074 4879 0000 	        pea     environ
  96      0000 
  97 007a 486F 0004 	        pea     %sp@(4)
  98 007e 4878 0000 	        pea     0
  99 0082 4EB9 0000 		jsr	main
  99      0000 
 100 0088 2F00      		movel	%d0, %sp@-
 101               	


 102 008a 4EB9 0000 	        jsr     exit
 102      0000 
 103               	.even




   1               	***************************************************************
   2               	** スタック領域の確保
   3               	***************************************************************
   4               	.extern 	start
   5               	.global 	monitor_begin
   6               	.include	"equdefs.inc"
   1               	***********************************************
   2               	** 変数の定義
   3               	***********************************************
   4               	
   5               	***************************************************************
   6               	** 各種レジスタ定義
   7               	***************************************************************
   8               	***************
   9               	** レジスタ群の先頭
  10               	***************
  11               	.equ REGBASE, 	0xFFF000 	| DMAP を使用．
  12               	.equ IOBASE, 	0x00d00000
  13               		
  14               	***************
  15               	** 割り込み関係のレジスタ
  16               	***************
  17               	.equ IVR, REGBASE+0x300 	| 割り込みベクタレジスタ
  18               	.equ IMR, REGBASE+0x304 	| 割り込みマスクレジスタ
  19               	.equ ISR, REGBASE+0x30c 	| 割り込みステータスレジスタ
  20               	.equ IPR, REGBASE+0x310 	| 割り込みペンディングレジスタ
  21               		
  22               	***************
  23               	** タイマ関係のレジスタ
  24               	***************
  25               	.equ TCTL1, 	REGBASE+0x600 	| タイマ１コントロールレジスタ
  26               	.equ TPRER1, 	REGBASE+0x602 	| タイマ１プリスケーラレジスタ
  27               	.equ TCMP1, 	REGBASE+0x604 	| タイマ１コンペアレジスタ
  28               	.equ TCN1, 	REGBASE+0x608 	| タイマ１カウンタレジスタ
  29               	.equ TSTAT1, 	REGBASE+0x60a 	| タイマ１ステータスレジスタ
  30               		
  31               	***************
  32               	** UART1（送受信）関係のレジスタ
  33               	***************
  34               	.equ USTCNT1, 	REGBASE+0x900 	| UART1 ステータス/コントロールレジスタ
  35               	.equ UBAUD1, 	REGBASE+0x902 	| UART1 ボーコントロールレジスタ
  36               	.equ URX1, 	REGBASE+0x904 	| UART1 受信レジスタ
  37               	.equ UTX1, 	REGBASE+0x906 	| UART1 送信レジスタ
  38               		
  39               	***************
  40               	** LED
  41               	***************
  42               	.equ LED7, IOBASE+0x000002f
  43               	.equ LED6, IOBASE+0x000002d
  44               	.equ LED5, IOBASE+0x000002b
  45               	.equ LED4, IOBASE+0x0000029
  46               	.equ LED3, IOBASE+0x000003f
  47               	.equ LED2, IOBASE+0x000003d
  48               	.equ LED1, IOBASE+0x000003b
  49               	.equ LED0, IOBASE+0x0000039
  50               	
  51               	***************


  52               	** システムコール番号
  53               	***************
  54               	.equ SYSCALL_NUM_GETSTRING, 	1
  55               	.equ SYSCALL_NUM_PUTSTRING, 	2
  56               	.equ SYSCALL_NUM_RESET_TIMER, 	3
  57               	.equ SYSCALL_NUM_SET_TIMER, 	4
  58               	
  59               	****************************************************************
  60               	*** 初期値のあるデータ領域
  61               	****************************************************************
  62               	.section .data
  63               	
  64               	.even 				| \n: 次の行へ (ラインフィード)
  65 0000 0000      	TTC:	.dc.w 0
  66               	.even
  67               		
  68               	****************************************************************
  69               	*** 初期値の無いデータ領域
  70               	****************************************************************
  71               	.section .bss
  72 0000 0000 0000 	BUF: .ds.b 256 			| BUF[256]
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73               	
  74               	.even
  75 0100 0000 0000 	USR_STK: .ds.b 0x4000 		| ユーザスタック領域
  75      0000 0000 
  75      0000 0000 
  75      0000 0000 
  75      0000 0000 
  76               	.even
  77               	USR_STK_TOP: 			| ユーザスタック領域の最後尾
  78               		
  79               	*******************************
  80               	.section .bss
  81 4100 0000 0000 	Queue0:		.ds.b	274	/* 受信用キュー */
  81      0000 0000 
  81      0000 0000 
  81      0000 0000 
  81      0000 0000 
  82 4212 0000 0000 	Queue1:		.ds.b	274	/* 送信用キュー */
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  83               	
  84               	.section .text
  85               	.equ	BF_START, 	0		/* キューのデータ領域の先頭 */
  86               	.equ	BF_END, 	255		/* キューのデータ領域の最後尾 */
  87               	.equ	top, 		256		/* キューの先頭アドレスを保持へのオフセット */
  88               	.equ	out, 		260		/* 次にpopするデータアドレスを保持へのオフセット */
  89               	.equ	in, 		264		/* 次にinするデータアドレスを保持へのオフセット */
  90               	.equ	bottom, 	268		/* キューの最終アドレスを保持へのオフセット */
  91               	.equ	s, 		272		/* キュー内の要素数を保持する変数へのオフセット */
  92               	


  93               	
  94               	
   7               	
   8               	monitor_begin:
   9               	
  10               	.section .bss
  11               	.even
  12 4324 0000 0000 	SYS_STK: .ds.b 0x4000 	| システムスタック領域
  12      0000 0000 
  12      0000 0000 
  12      0000 0000 
  12      0000 0000 
  13               	
  14               	.even
  15               	SYS_STK_TOP: 		| システムスタック領域の最後尾
  16               	
  17               	.even
  18 8324 0000 0000 	task_p:	.ds.l 1
  19               	
  20               	***************************************************************
  21               	** 初期化
  22               	***************************************************************
  23               	.section .text
  24               	.even
  25               	
  26               	
  27               	boot:   ***************************************************
  28               		** スーパーバイザ & 各種設定を行っている最中の割込禁止
  29               		***************************************************
  30 0000 46FC 2700 		move.w 	#0x2700,%SR
  31 0004 4FF9 0000 		lea.l	SYS_STK_TOP, %SP | Set SSP
  31      0000 
  32               		
  33               		******************************
  34               		** 割り込みコントローラの初期化
  35               		*****************************
  36 000a 13FC 0040 		move.b 	#0x40, IVR | ユーザ割り込みベクタ番号を0x40+level に設定．
  36      00FF F300 
  37 0012 23FC 00FF 		move.l 	#0x00ff3ffb,IMR | 全割り込みマスク
  37      3FFB 00FF 
  37      F304 
  38               		
  39               		******************************************************************
  40               		** 送受信 (UART1) 関係の初期化 (割り込みレベルは 4 に固定されている)
  41               		*****************************************************************
  42 001c 33FC E10C 		move.w 	#0xe10c, USTCNT1 
  42      00FF F900 
  43 0024 33FC 0038 		move.w 	#0x0038, UBAUD1 | baud rate = 230400 bps
  43      00FF F902 
  44               		
  45               		*********************************************************
  46               		** タイマ関係の初期化 (割り込みレベルは 6 に固定されている)
  47               		*********************************************************
  48 002c 33FC 0004 		move.w 	#0x0004, TCTL1 
  48      00FF F600 
  49               	
  50 0034 21FC 0000 		move.l 	#uart1_interrupt, 0x110


  50      0000 0110 
  51 003c 21FC 0000 		move.l 	#timer_interrupt, 0x118
  51      0000 0118 
  52               	
  53               		***************
  54               		**キューの初期化
  55               		***************
  56 0044 4EBA 00D2 		jsr 	Init_Q
  57               		
  58 0048 21FC 0000 		move.l	#SYSTEM_CALL,0x080
  58      0000 0080 
  59 0050 23FC 000F 		move.l	#0x00f3ff9, IMR
  59      3FF9 00FF 
  59      F304 
  60               		
  61               		
  62 005a 46FC 0000 		move.w	#0x0000, %SR
  63 005e 4EF9 0000 		jmp	start
  63      0000 
  64               		
  65               	
  66               	
  67               	**************************
  68               	**送受信割り込みインターフェース
  69               	**************************
  70               		
  71               	uart1_interrupt:
  72 0064 48E7 F000 		movem.l %d0-%d3, -(%sp)      		/* レジスタの退避 */
  73 0068 3039 00FF 		move.w 	UTX1, %d0			/* UTXの15ビット目が1かどうか見る */
  73      F906 
  74 006e 0280 0000 		andi.l 	#0x8000, %d0
  74      8000 
  75 0074 6700 0008 		beq 	uart1_interrupt_receive		/* 1以外なら分岐 */
  76 0078 7200      		move.l 	#0, %d1				/* ch=0 */
  77 007a 4EBA 01A8 		jsr 	INTERPUT			/* 1なら送信割り込み */
  78               		
  79               	uart1_interrupt_receive:
  80 007e 3639 00FF 		move.w 	URX1, %d3			/* URXの13ビット目が1かどうか見る */
  80      F904 
  81 0084 1403      		move.b	%d3, %d2			/* D3の下位8bit(データ部分)をD2.Bにコピー */
  82 0086 0283 0000 		andi.l	#0x2000, %d3
  82      2000 
  83 008c 6700 0008 		beq	uart1_interrupt_end		/* 1以外なら分岐 */
  84 0090 7200      		move.l 	#0, %d1				/* ch=0 */
  85 0092 4EBA 0212 		jsr 	INTERGET			/* 1なら受信割り込み */
  86               		
  87               	uart1_interrupt_end:	
  88 0096 4CDF 000F 		movem.l (%sp)+, %d0-%d3			/* レジスタの回復 */
  89 009a 4E73      		rte					/* 呼び出し元に戻る */
  90               	
  91               		
  92               	
  93               	***************************************
  94               	** タイマ用ハード割り込みインターフェース
  95               	***************************************
  96               	timer_interrupt:
  97 009c 3039 00FF 	    move.w 	TSTAT1, %d0        	/*TSTATをd0レジスタに読み込み*/


  97      F60A 
  98 00a2 0240 0001 	    andi.w	#0x01, %d0
  99 00a6 0C40 0000 	    cmpi.w	#0, %d0			/*第0ビットを確認（1ならば割り込み発生）*/
 100 00aa 6700 000E 	    beq     	timer_interrupt_end	/*0ならば割り込み処理を終了*/
 101 00ae 33FC 0000 	    move.w  	#0, TSTAT1        	/*TSTATをリセット*/
 101      00FF F60A 
 102 00b6 4EBA 026C 	    jsr     	CALL_RP           	/*割り込み時に呼び出すルーチンを実行*/
 103               	timer_interrupt_end:
 104 00ba 4E73      	    rte                       		/*割り込み終了*/
 105               	    
 106               	    
 107               	****************************
 108               	** SYSTEM_CALL
 109               	** 入力
 110               	** d0:システムコール番号
 111               	** d1以降:システムコールの引数
 112               	** 出力
 113               	** d0:システムコール呼び出しの結果
 114               	****************************
 115               	
 116               	SYSTEM_CALL:
 117 00bc 0C80 0000 		cmp.l   #5, %d0
 117      0005 
 118 00c2 6600 0006 		bne 	SYSTEM_CALL1
 119 00c6 4EBA 026E 		jsr 	skipmt
 120               	
 121               	SYSTEM_CALL1:
 122 00ca 48E7 7000 		movem.l	%d1-%d3,-(%sp)		/*レジスタの退避*/
 123 00ce 0C80 0000 		cmp.l	#1,%d0
 123      0001 
 124 00d4 6600 000A 		bne	SYSTEM_CALL2		/*システムコール番号が１でないならば分岐*/
 125 00d8 4EBA 01E6 		jsr	GETSTRING		/*GETSTRINGを呼び出す*/
 126 00dc 6000 0034 		bra	SYSTEM_CALL_FINISH
 127               		
 128               	SYSTEM_CALL2:
 129 00e0 0C80 0000 		cmp.l	#2,%d0
 129      0002 
 130 00e6 6600 000A 		bne	SYSTEM_CALL3		/*システムコール番号が2でないならば分岐*/
 131 00ea 4EBA 0176 		jsr	PUTSTRING		/*PUTSTRINGを呼び出す*/
 132 00ee 6000 0022 		bra	SYSTEM_CALL_FINISH
 133               	
 134               	SYSTEM_CALL3:
 135 00f2 0C80 0000 		cmp.l	#3,%d0
 135      0003 
 136 00f8 6600 000A 		bne	SYSTEM_CALL4		/*システムコール番号が3でないならば分岐*/
 137 00fc 4EBA 01F6 		jsr	RESET_TIMER		/*RESET_TIMERを呼び出す*/
 138 0100 6000 0010 		bra	SYSTEM_CALL_FINISH
 139               	
 140               	SYSTEM_CALL4:
 141 0104 0C80 0000 		cmp.l	#4,%d0
 141      0004 
 142 010a 6600 0006 		bne	SYSTEM_CALL_FINISH	/*システムコール番号が4でないならば分岐*/
 143 010e 4EBA 01EE 		jsr	SET_TIMER		/*SET_TIMERを呼び出す*/
 144               	
 145               	SYSTEM_CALL_FINISH:
 146 0112 4CDF 000E 		movem.l	(%sp)+,%d1-%d3		/*レジスタの復帰*/
 147 0116 4E73      		rte


 148               	    
 149               	    
 150               	***************************
 151               	**キューの初期化処理
 152               	***************************
 153               	Init_Q:
 154 0118 4EBA 0008 		jsr 	Init_Q0			/* 受信用キューを初期化 */
 155 011c 4EBA 002A 		jsr 	Init_Q1			/* 送信用キューを初期化 */
 156 0120 4E75      		rts				/* 呼び出し元に復帰 */
 157               	
 158               	Init_Q0:
 159 0122 43F9 0000 		lea.l	Queue0, %a1		/* Queue0領域の先頭アドレス -> A1*/
 159      0000 
 160 0128 2449      		move.l	%a1, %a2		/* Queue0のバッファの最終アドレス -> A2*/
 161 012a D5FC 0000 		add.l	#BF_END, %a2		
 161      00FF 
 162 0130 2349 0100 		move.l	%a1, top(%a1)		/* topを初期化 */
 163 0134 2349 0104 		move.l	%a1, out(%a1)		/* outを初期化 */
 164 0138 2349 0108 		move.l	%a1, in(%a1)		/* inを初期化 */
 165 013c 234A 010C 		move.l	%a2, bottom(%a1)	/* bottomを初期化 */
 166 0140 137C 0000 		move.b	#0x00, s(%a1)		/* sを初期化 */
 166      0110 
 167 0146 4E75      		rts
 168               	
 169               	Init_Q1:	/* Q0と同様にQ1を初期化 */
 170 0148 43F9 0000 		lea.l	Queue1, %a1
 170      0000 
 171 014e 2449      		move.l	%a1, %a2
 172 0150 D5FC 0000 		add.l	#BF_END, %a2
 172      00FF 
 173 0156 2349 0100 		move.l	%a1, top(%a1)
 174 015a 2349 0104 		move.l	%a1, out(%a1)
 175 015e 2349 0108 		move.l	%a1, in(%a1)
 176 0162 234A 010C 		move.l	%a2, bottom(%a1)
 177 0166 137C 0000 		move.b	#0x00, s(%a1)
 177      0110 
 178 016c 4E75      		rts
 179               	
 180               	****************************
 181               	** SelectQueue
 182               	** 入力
 183               	** d0: 受信(0)or 送信(1)
 184               	** 出力
 185               	** a1: 選択したキューの先頭アドレス
 186               	****************************
 187               	SelectQueue:
 188 016e 227C 0000 		movea.l	#Queue0,%a1		/* d0が0なら#Queue0 -> a1 */
 188      0000 
 189 0174 0C40 0000 		cmp	#0, %d0				
 190 0178 6700 0008 		beq	End_SelectQueue
 191 017c 227C 0000 		movea.l	#Queue1,%a1		/* d0が1なら#Queue1 -> a1 */
 191      0000 
 192               	End_SelectQueue:
 193 0182 4E75      		rts				/* 呼び出し元に復帰 */	
 194               	
 195               	*************************
 196               	** INQ


 197               	** キューに要素を入れる
 198               	*************************	
 199               	INQ:
 200 0184 40E7      		move.w	 %SR, -(%sp)		/* 現走行レベルの退避 */
 201 0186 46FC 2700 		move.w	#0x2700, %SR		/* 割り込み禁止（=走行レベルを7に）*/
 202 018a 48E7 20F0 		movem.l	%a0-%a3/%d2, -(%sp)	/*レジスタの退避*/
 203 018e 4EBA FFDE 		jsr	SelectQueue		/*SelectQueueで編集するキューの先頭をa1へ*/
 204 0192 7000      		move.l	#0, %d0			/*D0はPUT_BUF内で失敗判定に使用*/
 205 0194 4EBA 0026 		jsr	PUT_BUF			/* PUT_BUFの呼び出し */
 206 0198 4CDF 0F04 		movem.l	(%sp)+, %a0-%a3/%d2	/*レジスタの回復*/
 207 019c 46DF      		move.w 	(%sp)+, %SR		/* 走行レベルの回復 */
 208 019e 4E75      		rts				/* 割り込み終了 */
 209               	
 210               	*************************
 211               	** OUTQ
 212               	** キューから要素を取り出す
 213               	** 入力
 214               	** d0: 受信(0)or 送信(1) for SelectQueue
 215               	*************************
 216               	OUTQ:
 217 01a0 40E7      		move.w 	%SR, -(%sp)		/* 現走行レベルの退避 */
 218 01a2 46FC 2700 		move.w	#0x2700, %SR		/* 割り込み禁止（=走行レベルを7に）*/
 219 01a6 48E7 20F0 		movem.l	%a0-%a3/%d2, -(%sp)	/*レジスタの退避*/
 220 01aa 4EBA FFC2 		jsr	SelectQueue		/*SelectQueueで編集するキューの先頭をa1へ*/
 221 01ae 7000      		move.l	#0, %d0			/* D0はGET_BUF内で失敗判定に使用*/
 222 01b0 4EBA 003E 		jsr	GET_BUF			/* GET_BUFの呼び出し */
 223 01b4 4CDF 0F04 		movem.l	(%sp)+, %a0-%a3/%d2	/*レジスタの回復*/
 224 01b8 46DF      		move.w 	(%sp)+, %SR		/* 走行レベルの回復 */
 225 01ba 4E75      		rts				/* 割り込み終了 */
 226               	
 227               	*************************
 228               	** PUT_BUF
 229               	** 入力
 230               	** a1: キューの先頭アドレス
 231               	** a2: 比較用アドレスレジスタ
 232               	** a3: キュー内データの格納先アドレス
 233               	** d1: キューに格納するデータ
 234               	*************************
 235               	PUT_BUF:
 236 01bc 3429 0110 		move	s(%a1), %d2		/* 要素数 -> d2 */
 237 01c0 0C42 0100 		cmp	 #0x100, %d2		/* キューが満杯なら何もせず復帰 */
 238 01c4 6700 0028 		beq	END_PUT_BUF
 239 01c8 2669 0108 		movea.l in(%a1), %a3		/* キューにデータを格納  */
 240 01cc 1681      		move.b	%d1, (%a3)
 241 01ce 2469 010C 		movea.l	bottom(%a1), %a2	/* 格納先がデータ領域の最後なら先頭へ */
 242 01d2 B5E9 0108 		cmpa.l	in(%a1), %a2
 243 01d6 6700 000A 		beq	STEP1_PUT_BUF
 244 01da 52A9 0108 		add.l	#1, in(%a1)		/* そうでないなら単に次へ進める */
 245 01de 6000 0008 		bra	STEP2_PUT_BUF
 246               	
 247               	STEP1_PUT_BUF:
 248 01e2 2369 0100 		move.l	top(%a1), in(%a1)
 248      0108 
 249               	
 250               	STEP2_PUT_BUF:
 251 01e8 5269 0110 		addq	#1, s(%a1)		/* 要素数 s = +1 */
 252 01ec 7001      		move.l	#1, %d0			/* 書き込み成功 */


 253               	
 254               	END_PUT_BUF:	
 255 01ee 4E75      		rts				/* 呼び出し元への復帰 */
 256               		
 257               	****************************
 258               	** GET_BUF
 259               	** a1: キューの先頭アドレス
 260               	** a2: 比較用アドレスレジスタ
 261               	** a3: キュー内データの読み出し元アドレス
 262               	***************************	
 263               	GET_BUF:
 264 01f0 3429 0110 		move	s(%a1), %d2		/* キューが空かどうか確認 */
 265 01f4 0C42 0000 		cmp	#0x0, %d2
 266 01f8 6700 0028 		beq	END_GET_BUF		/* キューが空なら何もせず復帰 */
 267 01fc 2669 0104 		movea.l out(%a1), %a3		/* キューから取り出したデータ -> d1 */
 268 0200 1213      		move.b	(%a3), %d1			
 269 0202 2469 010C 		movea.l	bottom(%a1), %a2	/* キュー領域の最後からデータを取り出したら次の取
 270 0206 B5E9 0104 		cmpa.l	out(%a1), %a2
 271 020a 6700 000A 		beq	STEP1_GET_BUF
 272 020e 52A9 0104 		add.l	#1, out(%a1)		/* そうでないなら単に次へ進める */
 273 0212 6000 0008 		bra	STEP2_GET_BUF
 274               	
 275               	STEP1_GET_BUF:
 276 0216 2369 0100 		move.l	top(%a1), out(%a1)
 276      0104 
 277               	
 278               	
 279               	STEP2_GET_BUF:
 280 021c 5369 0110 		subq	#1, s(%a1)		/* 要素数 s = -1 */
 281 0220 7001      		move.l	#1, %d0			/* 書き込み成功 */
 282               	
 283               	END_GET_BUF:	
 284 0222 4E75      		rts				/* 呼び出し元への復帰 */
 285               	
 286               	**********************
 287               	** INTERPUT
 288               	** 入力: ch ->　d1
 289               	**********************
 290               	INTERPUT:
 291 0224 48E7 00F0 		movem.l %a0-%a3, -(%sp)		/* レジスタの退避 */
 292 0228 40E7      		move.w 	%SR, -(%sp)
 293 022a 46FC 2700 		move.w 	#0x2700, %SR		/*走行レベル7に設定*/
 294               	
 295 022e 0C01 0000 		cmpi.b 	#0, %d1
 296 0232 6600 0026 		bne 	END_INTERPUT		/*ch!=0なら何もせず復帰*/
 297               	
 298 0236 7001      		moveq.l #1, %d0
 299 0238 4EBA FF66 		jsr 	OUTQ			/*OUTQ(1,%d1)を実行*/
 300               		
 301 023c 0C00 0000 		cmpi.b 	#0, %d0
 302 0240 6600 000E 		bne 	OUTQ_FAIL		/*OUTQが失敗なら送信割り込みをマスク*/
 303               	
 304 0244 33FC E108 		move.w 	#0xe108, USTCNT1	/*送信割り込みをマスク*/
 304      00FF F900 
 305 024c 6000 000C 		bra 	END_INTERPUT
 306               	
 307               	OUTQ_FAIL:


 308 0250 0641 0800 		add.w 	#0x800, %d1		/*ヘッダ付与*/
 309 0254 33C1 00FF 		move.w 	%d1, UTX1		/*UTX1に送信*/
 309      F906 
 310               	
 311               	END_INTERPUT:
 312 025a 46DF      		move.w 	(%sp)+, %SR		/* レジスタの回復 */
 313 025c 4CDF 0F00 		movem.l (%sp)+, %a0-%a3
 314 0260 4E75      		rts				/* 割り込み終了 */
 315               	
 316               	
 317               	******************
 318               	**PUTSTRING
 319               	** 入力:
 320               	**	ch ->　d1
 321               	**	p  ->　d2
 322               	**	size ->　d3
 323               	** 出力:
 324               	**	実際送信したデータ数->d0 
 325               	******************
 326               	
 327               	PUTSTRING:
 328 0262 48E7 7880 		movem.l %d1-%d4/%a0, -(%sp)		/* レジスタの退避 */
 329 0266 0C01 0000 		cmpi.b 	#0, %d1				/* chが0以外なら何もせず復帰 */
 330 026a 6600 0034 		bne 	END_PUTSTRING
 331 026e 7800      		move.l	#0, %d4				/* %d4を実際送信したデータ数のカウンタとして使用 */
 332 0270 2042      		move.l 	%d2, %a0			/* pをa0にコピー */
 333 0272 0C03 0000 		cmpi.b 	#0, %d3				/* size=0なら d0=0 にして復帰 */
 334 0276 6700 0026 		beq 	PUTSTRING_STEP3
 335               	
 336               	PUTSTRING_STEP1:
 337 027a B644      		cmp 	%d4, %d3			/* カウンタとsizeを比較 */
 338 027c 6700 0018 		beq 	PUTSTRING_STEP2			/* イコールなら分岐 */
 339 0280 7001      		move.l	 #1, %d0			/* 送信キューを指定 */
 340 0282 1218      		move.b 	(%a0)+, %d1			/* データをコピーしてa0をインクリメント */
 341 0284 4EBA FEFE 		jsr 	INQ				/* INQを呼び出す */
 342 0288 0C40 0000 		cmp 	#0, %d0
 343 028c 6700 0008 		beq 	PUTSTRING_STEP2
 344 0290 5244      		add 	#1, %d4
 345 0292 6000 FFE6 		bra 	PUTSTRING_STEP1			/* ループを回す */
 346               	
 347               	PUTSTRING_STEP2:
 348 0296 33FC E10C 		move.w 	#0xe10c, USTCNT1		/* USTCNT1を操作して送信割り込み許可*/
 348      00FF F900 
 349               	
 350               	PUTSTRING_STEP3:
 351 029e 2004      		move.l 	%d4, %d0			/* sz -> d0 */
 352               	
 353               	END_PUTSTRING:
 354 02a0 4CDF 011E 		movem.l (%sp)+, %d1-%d4/%a0		/* レジスタの回復 */
 355 02a4 4E75      		rts					/* 呼び出し元への復帰 */
 356               	    
 357               	*******************
 358               	** INTERGET
 359               	** 入力: ch->d1
 360               	**	 data->d2
 361               	******************
 362               	


 363               	INTERGET:
 364 02a6 48E7 E000 		movem.l	%d0-%d2, -(%sp)		/*レジスタの退避*/
 365 02aa 0C01 0000 		cmpi.b	#0, %d1
 366 02ae 6600 000A 		bne	END_INTERGET		/*ch=0なら何もせず復帰*/
 367 02b2 7000      		move.l	#0x0, %d0
 368 02b4 2202      		move.l	%d2, %d1
 369 02b6 4EBA FECC 		jsr	INQ			/*OUTQ(1,%d1)を実行*/
 370               	
 371               	END_INTERGET:
 372 02ba 4CDF 0007 		movem.l	(%sp)+, %d0-%d2		/*レジスタの回復*/
 373 02be 4E75      		rts
 374               	
 375               	
 376               	************
 377               	** GETSTRING
 378               	** 入力:ch -> d1
 379               	**	p  -> d2 /* データ書き込み先の先頭アドレス*/
 380               	**	size ->d3 /*取り出すデータサイズ*/
 381               	** 戻り値: sz ->d0	
 382               	*************
 383               	
 384               	GETSTRING:
 385 02c0 48E7 7880 		movem.l	%d1-%d4/%a0, -(%sp)		/*レジスタの退避*/
 386 02c4 0C01 0000 		cmpi.b	#0, %d1				/*chが0以外なら何もしない*/
 387 02c8 6600 0022 		bne	END_GETSTRING
 388 02cc 7800      		move.l	#0, %d4				/*%d4をszとして使用*/
 389 02ce 2042      		movea.l	%d2, %a0			/*%a0をiとして使用*/
 390               		
 391               	GETSTRING_LOOP:	
 392 02d0 B843      		cmp	%d3, %d4			/*sz = sizeならば分岐*/
 393 02d2 6700 0018 		beq	END_GETSTRING	
 394 02d6 7000      		move.l	#0, %d0				/*受信キューを指定*/
 395 02d8 4EBA FEC6 		jsr	OUTQ				/*OUTQにより受信キューからデータ読み込み*/
 396 02dc 0C00 0000 		cmpi.b	#0, %d0				/*OUTQが失敗ならば分岐*/
 397 02e0 6700 000A 		beq	END_GETSTRING
 398 02e4 10C1      		move.b	%d1, (%a0)+			/*i番地にdataをコピーし、i++*/
 399 02e6 5284      		addq.l	#1, %d4				/*sz++*/
 400 02e8 6000 FFE6 		bra	GETSTRING_LOOP
 401               	
 402               	END_GETSTRING:
 403 02ec 2004      		move.l	%d4, %d0			/*sz -> %d0*/
 404 02ee 4CDF 011E 		movem.l	(%sp)+, %d1-%d4/%a0		/*レジスタの回復*/
 405 02f2 4E75      		rts
 406               	
 407               	**********************
 408               	** RESET_TIMER
 409               	** TCTLを割り込み不可に設定
 410               	**********************
 411               		
 412               	RESET_TIMER:
 413 02f4 33FC 0004 		move.w	#0x0004, TCTL1			/* TCTLを割り込み不可*/
 413      00FF F600 
 414 02fc 4E75      		rts
 415               	
 416               	
 417               		
 418               	**********************


 419               	** SET_TIMER
 420               	** 入力
 421               	** タイマ割り込み発生周期t -> %d1	
 422               	** 割り込み時に起動するルーチンの先頭アドレス-> %d2
 423               	**********************
 424               		
 425               	SET_TIMER:
 426 02fe 48E7 6000 		movem.l	%d1-%d2, -(%sp)	/* レジスタ退避 */
 427 0302 23C2 0000 		move.l	%d2, task_p	/* 先頭アドレスをtask_pへ代入 */
 427      0000 
 428 0308 33F8 00CE 		move.w	206, TPRER1	/* TPRERを206に設定 */
 428      00FF F602 
 429 0310 33C1 00FF 		move.w	%d1, TCMP1	/* 割り込み発生周期をTCMPへ */
 429      F604 
 430 0316 33FC 0015 		move.w	#0x0015, TCTL1	/* TCTLを割り込み許可 */
 430      00FF F600 
 431 031e 4CDF 0006 		movem.l	(%sp)+, %d1-%d2	/* レジスタの回復 */
 432 0322 4E75      		rts
 433               	
 434               	
 435               	****************************
 436               	** CALL_RP
 437               	** タイマ割り込み時に処理すべきルーチンを呼び出す
 438               	****************************
 439               	
 440               	CALL_RP:
 441 0324 48E7 0080 		movem.l	%a0, -(%sp)
 442 0328 2079 0000 		movea.l	(task_p), %a0
 442      0000 
 443 032e 4E90      		jsr	(%a0)		/* task_pが指すアドレスへジャンプ */
 444 0330 4CDF 0100 		movem.l	(%sp)+, %a0
 445 0334 4E75      		rts
 446               	
 447               	skipmt:
 448 0336 4E75      		rts
 449               	
 450               	.end




   1               	.global inbyte
   2               	.include "equdefs.inc"
   1               	***********************************************
   2               	** 変数の定義
   3               	***********************************************
   4               	
   5               	***************************************************************
   6               	** 各種レジスタ定義
   7               	***************************************************************
   8               	***************
   9               	** レジスタ群の先頭
  10               	***************
  11               	.equ REGBASE, 	0xFFF000 	| DMAP を使用．
  12               	.equ IOBASE, 	0x00d00000
  13               		
  14               	***************
  15               	** 割り込み関係のレジスタ
  16               	***************
  17               	.equ IVR, REGBASE+0x300 	| 割り込みベクタレジスタ
  18               	.equ IMR, REGBASE+0x304 	| 割り込みマスクレジスタ
  19               	.equ ISR, REGBASE+0x30c 	| 割り込みステータスレジスタ
  20               	.equ IPR, REGBASE+0x310 	| 割り込みペンディングレジスタ
  21               		
  22               	***************
  23               	** タイマ関係のレジスタ
  24               	***************
  25               	.equ TCTL1, 	REGBASE+0x600 	| タイマ１コントロールレジスタ
  26               	.equ TPRER1, 	REGBASE+0x602 	| タイマ１プリスケーラレジスタ
  27               	.equ TCMP1, 	REGBASE+0x604 	| タイマ１コンペアレジスタ
  28               	.equ TCN1, 	REGBASE+0x608 	| タイマ１カウンタレジスタ
  29               	.equ TSTAT1, 	REGBASE+0x60a 	| タイマ１ステータスレジスタ
  30               		
  31               	***************
  32               	** UART1（送受信）関係のレジスタ
  33               	***************
  34               	.equ USTCNT1, 	REGBASE+0x900 	| UART1 ステータス/コントロールレジスタ
  35               	.equ UBAUD1, 	REGBASE+0x902 	| UART1 ボーコントロールレジスタ
  36               	.equ URX1, 	REGBASE+0x904 	| UART1 受信レジスタ
  37               	.equ UTX1, 	REGBASE+0x906 	| UART1 送信レジスタ
  38               		
  39               	***************
  40               	** LED
  41               	***************
  42               	.equ LED7, IOBASE+0x000002f
  43               	.equ LED6, IOBASE+0x000002d
  44               	.equ LED5, IOBASE+0x000002b
  45               	.equ LED4, IOBASE+0x0000029
  46               	.equ LED3, IOBASE+0x000003f
  47               	.equ LED2, IOBASE+0x000003d
  48               	.equ LED1, IOBASE+0x000003b
  49               	.equ LED0, IOBASE+0x0000039
  50               	
  51               	***************
  52               	** システムコール番号
  53               	***************
  54               	.equ SYSCALL_NUM_GETSTRING, 	1
  55               	.equ SYSCALL_NUM_PUTSTRING, 	2


  56               	.equ SYSCALL_NUM_RESET_TIMER, 	3
  57               	.equ SYSCALL_NUM_SET_TIMER, 	4
  58               	
  59               	****************************************************************
  60               	*** 初期値のあるデータ領域
  61               	****************************************************************
  62               	.section .data
  63               	
  64               	.even 				| \n: 次の行へ (ラインフィード)
  65 0000 0000      	TTC:	.dc.w 0
  66               	.even
  67               		
  68               	****************************************************************
  69               	*** 初期値の無いデータ領域
  70               	****************************************************************
  71               	.section .bss
  72 0000 0000 0000 	BUF: .ds.b 256 			| BUF[256]
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73               	
  74               	.even
  75 0100 0000 0000 	USR_STK: .ds.b 0x4000 		| ユーザスタック領域
  75      0000 0000 
  75      0000 0000 
  75      0000 0000 
  75      0000 0000 
  76               	.even
  77               	USR_STK_TOP: 			| ユーザスタック領域の最後尾
  78               		
  79               	*******************************
  80               	.section .bss
  81 4100 0000 0000 	Queue0:		.ds.b	274	/* 受信用キュー */
  81      0000 0000 
  81      0000 0000 
  81      0000 0000 
  81      0000 0000 
  82 4212 0000 0000 	Queue1:		.ds.b	274	/* 送信用キュー */
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  83               	
  84               	.section .text
  85               	.equ	BF_START, 	0		/* キューのデータ領域の先頭 */
  86               	.equ	BF_END, 	255		/* キューのデータ領域の最後尾 */
  87               	.equ	top, 		256		/* キューの先頭アドレスを保持へのオフセット */
  88               	.equ	out, 		260		/* 次にpopするデータアドレスを保持へのオフセット */
  89               	.equ	in, 		264		/* 次にinするデータアドレスを保持へのオフセット */
  90               	.equ	bottom, 	268		/* キューの最終アドレスを保持へのオフセット */
  91               	.equ	s, 		272		/* キュー内の要素数を保持する変数へのオフセット */
  92               	
  93               	
  94               	
   3               		
   4               	.text


   5               	.even
   6               	
   7               	inbyte:
   8 0000 48E7 7000 		movem.l %d1-%d3, -(%sp) 
   9               		
  10               	inbyte_loop:
  11               		
  12 0004 7001      		move.l  #SYSCALL_NUM_GETSTRING, %d0
  13 0006 7200      	   	move.l  #0, %d1
  14 0008 243C 0000 	   	move.l  #inchrw_buf, %d2                 
  14      0000 
  15 000e 7601      	    	move.l  #1, %d3                  
  16 0010 4E40      	    	trap    #0                        
  17               	
  18 0012 0C80 0000 	    	cmpi.l   #0, %d0                   
  18      0000 
  19 0018 6700 FFEA 	    	beq     inbyte_loop      
  20               	    	
  21 001c 1039 0000 	    	move.b  inchrw_buf, %d0
  21      0000 
  22 0022 13C0 00D0 		move.b	%d0, LED0
  22      0039 
  23               		
  24 0028 4CDF 000E 	    	movem.l (%sp)+, %d1-%d3
  25 002c 4E75      		rts
  26               	
  27               		
  28               	inkey:
  29 002e 48E7 7000 		movem.l %d1-%d3, -(%sp)
  30               		
  31               	inkey_loop:	
  32 0032 2200      		move.l  %d0, %d1
  33 0034 7001      		move.l  #SYSCALL_NUM_GETSTRING, %d0
  34 0036 243C 0000 	   	move.l  #inchrw_buf, %d2                 
  34      0000 
  35 003c 7601      	    	move.l  #1, %d3                  
  36 003e 4E40      	    	trap    #0                        
  37               	
  38 0040 0C80 0000 	    	cmpi.l   #0, %d0                   
  38      0000 
  39 0046 6700 000E 	    	beq     no_input
  40               	    	
  41 004a 1039 0000 	    	move.b  inchrw_buf, %d0
  41      0000 
  42 0050 0280 0000 		andi.l	#0xff, %d0	
  42      00FF 
  43               		
  44               	no_input:
  45 0056 70FF      		move.l  #-1, %d0  
  46               		
  47               	input_end:
  48 0058 4CDF 000E 		movem.l (%sp)+, %d1-%d3
  49 005c 4E75      		rts
  50               		
  51               	
  52               	.section .bss
  53               	.even


  54 4324 00        	inchrw_buf: .ds.b 1
  55 4325 00        		.even




   1               	.global outbyte
   2               	.include "equdefs.inc"
   1               	***************************************************************
   2               	** 各種レジスタ定義
   3               	***************************************************************
   4               		
   5               	***************
   6               	** レジスタ群の先頭
   7               	***************
   8               	.equ REGBASE, 	0xFFF000 	| DMAP を使用．
   9               	.equ IOBASE, 	0x00d00000
  10               		
  11               	***************
  12               	** 割り込み関係のレジスタ
  13               	***************
  14               	.equ IVR, REGBASE+0x300 	| 割り込みベクタレジスタ
  15               	.equ IMR, REGBASE+0x304 	| 割り込みマスクレジスタ
  16               	.equ ISR, REGBASE+0x30c 	| 割り込みステータスレジスタ
  17               	.equ IPR, REGBASE+0x310 	| 割り込みペンディングレジスタ
  18               		
  19               	***************
  20               	** タイマ関係のレジスタ
  21               	***************
  22               	.equ TCTL1, 	REGBASE+0x600 	| タイマ１コントロールレジスタ
  23               	.equ TPRER1, 	REGBASE+0x602 	| タイマ１プリスケーラレジスタ
  24               	.equ TCMP1, 	REGBASE+0x604 	| タイマ１コンペアレジスタ
  25               	.equ TCN1, 	REGBASE+0x608 	| タイマ１カウンタレジスタ
  26               	.equ TSTAT1, 	REGBASE+0x60a 	| タイマ１ステータスレジスタ
  27               		
  28               	***************
  29               	** UART1（送受信）関係のレジスタ
  30               	***************
  31               	.equ USTCNT1, 	REGBASE+0x900 	| UART1 ステータス/コントロールレジスタ
  32               	.equ UBAUD1, 	REGBASE+0x902 	| UART1 ボーコントロールレジスタ
  33               	.equ URX1, 	REGBASE+0x904 	| UART1 受信レジスタ
  34               	.equ UTX1, 	REGBASE+0x906 	| UART1 送信レジスタ
  35               		
  36               	***************
  37               	** LED
  38               	***************
  39               	.equ LED7, IOBASE+0x000002f
  40               	.equ LED6, IOBASE+0x000002d
  41               	.equ LED5, IOBASE+0x000002b
  42               	.equ LED4, IOBASE+0x0000029
  43               	.equ LED3, IOBASE+0x000003f
  44               	.equ LED2, IOBASE+0x000003d
  45               	.equ LED1, IOBASE+0x000003b
  46               	.equ LED0, IOBASE+0x0000039
  47               	
  48               	***************
  49               	** システムコール番号
  50               	***************
  51               	.equ SYSCALL_NUM_GETSTRING, 	1
  52               	.equ SYSCALL_NUM_PUTSTRING, 	2
  53               	.equ SYSCALL_NUM_RESET_TIMER, 	3
  54               	.equ SYSCALL_NUM_SET_TIMER, 	4
  55               	


  56               	***************************************************************
  57               	** スタック領域の確保
  58               	***************************************************************
  59               	.section .bss
  60               	.even
  61 0000 0000 0000 	SYS_STK: .ds.b 0x4000 	| システムスタック領域
  61      0000 0000 
  61      0000 0000 
  61      0000 0000 
  61      0000 0000 
  62               	
  63               	.even
  64               	SYS_STK_TOP: 		| システムスタック領域の最後尾
  65               	
  66               	.even
  67 4000 0000 0000 	task_p:	.ds.l 1
  68               	
  69               	
   3               	
   4               	.text
   5               	.even
   6               	
   7               	outbyte:
   8 0000 48E7 7000 		movem.l	%d1-%d3, -(%sp)
   9               		
  10               	outbyte_loop:
  11 0004 7002      		move.l  #SYSCALL_NUM_PUTSTRING, %d0
  12 0006 7200      	   	move.l  #0, %d1
  13 0008 240F      	   	move.l  %sp, %d2                 
  14 000a 0682 0000 	   	addi.l  #19, %d2
  14      0013 
  15 0010 7601      	    	move.l  #1, %d3                  
  16 0012 4E40      	    	trap    #0    
  17               	
  18 0014 0C80 0000 		cmpi.l   #0, %d0
  18      0000 
  19 001a 6700 FFE8 		beq	outbyte_loop
  20               	
  21 001e 4CDF 000E 		movem.l  (%sp)+, %d1-%d3
  22 0022 4E75      		rts
  23               		
  24               		
  25               	




   1               	#NO_APP
   2               		.file	"csys68k.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	read
   8               		.type	read, @function
   9               	read:
  10               	.LVL0:
  11               	.LFB0:
  12               		.file 1 "csys68k.c"
   1:csys68k.c     **** extern void outbyte(unsigned char c);
   2:csys68k.c     **** extern char inbyte();
   3:csys68k.c     **** 
   4:csys68k.c     **** int read(int fd, char *buf, int nbytes)
   5:csys68k.c     **** {
  13               		.loc 1 5 1 view -0
  14               		.cfi_startproc
  15               		.loc 1 5 1 is_stmt 0 view .LVU1
  16 0000 48E7 3838 		movem.l #14392,-(%sp)
  17               		.cfi_def_cfa_offset 28
  18               		.cfi_offset 2, -28
  19               		.cfi_offset 3, -24
  20               		.cfi_offset 4, -20
  21               		.cfi_offset 10, -16
  22               		.cfi_offset 11, -12
  23               		.cfi_offset 12, -8
  24 0004 286F 0020 		move.l 32(%sp),%a4
  25 0008 282F 0024 		move.l 36(%sp),%d4
   6:csys68k.c     ****   char c;
  26               		.loc 1 6 3 is_stmt 1 view .LVU2
   7:csys68k.c     ****   int  i;
  27               		.loc 1 7 3 view .LVU3
   8:csys68k.c     **** 
   9:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
  28               		.loc 1 9 3 view .LVU4
  29               	.LVL1:
  30               		.loc 1 9 17 view .LVU5
  31               		.loc 1 9 10 is_stmt 0 view .LVU6
  32 000c 7600      		moveq #0,%d3
  33               		.loc 1 9 17 view .LVU7
  34 000e 4A84      		tst.l %d4
  35 0010 6F36      		jle .L1
  36 0012 47F9 0000 		lea inbyte,%a3
  36      0000 
  37 0018 45F9 0000 		lea outbyte,%a2
  37      0000 
  38               	.LVL2:
  39               	.L8:
  10:csys68k.c     ****     c = inbyte();
  40               		.loc 1 10 5 is_stmt 1 view .LVU8
  41               		.loc 1 10 9 is_stmt 0 view .LVU9
  42 001e 4E93      		jsr (%a3)
  43               	.LVL3:
  44 0020 1400      		move.b %d0,%d2
  45               	.LVL4:


  11:csys68k.c     **** 
  12:csys68k.c     ****     if (c == '\r' || c == '\n'){ /* CR -> CRLF */
  46               		.loc 1 12 5 is_stmt 1 view .LVU10
  47               		.loc 1 12 8 is_stmt 0 view .LVU11
  48 0022 0C00 000D 		cmp.b #13,%d0
  49 0026 6728      		jeq .L3
  50               		.loc 1 12 19 discriminator 1 view .LVU12
  51 0028 0C00 000A 		cmp.b #10,%d0
  52 002c 6722      		jeq .L3
  13:csys68k.c     ****       outbyte('\r');
  14:csys68k.c     ****       outbyte('\n');
  15:csys68k.c     ****       *(buf + i) = '\n';
  16:csys68k.c     **** 
  17:csys68k.c     ****     /* } else if (c == '\x8'){ */     /* backspace \x8 */
  18:csys68k.c     ****     } else if (c == '\x7f'){      /* backspace \x8 -> \x7f (by terminal config.) */
  53               		.loc 1 18 12 is_stmt 1 view .LVU13
  54               		.loc 1 18 15 is_stmt 0 view .LVU14
  55 002e 0C00 007F 		cmp.b #127,%d0
  56 0032 673A      		jeq .L18
  19:csys68k.c     ****       if (i > 0){
  20:csys68k.c     **** 	outbyte('\x8'); /* bs  */
  21:csys68k.c     **** 	outbyte(' ');   /* spc */
  22:csys68k.c     **** 	outbyte('\x8'); /* bs  */
  23:csys68k.c     **** 	i--;
  24:csys68k.c     ****       }
  25:csys68k.c     ****       i--;
  26:csys68k.c     ****       continue;
  27:csys68k.c     **** 
  28:csys68k.c     ****     } else {
  29:csys68k.c     ****       outbyte(c);
  57               		.loc 1 29 7 is_stmt 1 view .LVU15
  58 0034 7000      		moveq #0,%d0
  59               	.LVL5:
  60               		.loc 1 29 7 is_stmt 0 view .LVU16
  61 0036 1002      		move.b %d2,%d0
  62 0038 2F00      		move.l %d0,-(%sp)
  63               		.cfi_def_cfa_offset 32
  64 003a 4E92      		jsr (%a2)
  65               	.LVL6:
  30:csys68k.c     ****       *(buf + i) = c;
  66               		.loc 1 30 7 is_stmt 1 view .LVU17
  67               		.loc 1 30 18 is_stmt 0 view .LVU18
  68 003c 1982 3800 		move.b %d2,(%a4,%d3.l)
  31:csys68k.c     ****     }
  32:csys68k.c     **** 
  33:csys68k.c     ****     if (*(buf + i) == '\n'){
  69               		.loc 1 33 5 is_stmt 1 view .LVU19
  34:csys68k.c     ****       return (i + 1);
  70               		.loc 1 34 17 is_stmt 0 view .LVU20
  71 0040 5283      		addq.l #1,%d3
  72               	.LVL7:
  73               		.loc 1 34 17 view .LVU21
  74 0042 588F      		addq.l #4,%sp
  75               		.cfi_def_cfa_offset 28
  76               	.LVL8:
   9:csys68k.c     ****     c = inbyte();
  77               		.loc 1 9 28 is_stmt 1 view .LVU22


   9:csys68k.c     ****     c = inbyte();
  78               		.loc 1 9 17 view .LVU23
  79 0044 B684      		cmp.l %d4,%d3
  80 0046 6DD6      		jlt .L8
  81               	.LVL9:
  82               	.L1:
  35:csys68k.c     ****     }
  36:csys68k.c     ****   }
  37:csys68k.c     ****   return (i);
  38:csys68k.c     **** }
  83               		.loc 1 38 1 is_stmt 0 view .LVU24
  84 0048 2003      		move.l %d3,%d0
  85 004a 4CDF 1C1C 		movem.l (%sp)+,#7196
  86 004e 4E75      		rts
  87               	.LVL10:
  88               	.L3:
  13:csys68k.c     ****       outbyte('\n');
  89               		.loc 1 13 7 is_stmt 1 view .LVU25
  90 0050 4878 000D 		pea 13.w
  91               		.cfi_def_cfa_offset 32
  92 0054 4E92      		jsr (%a2)
  93               	.LVL11:
  14:csys68k.c     ****       *(buf + i) = '\n';
  94               		.loc 1 14 7 view .LVU26
  95 0056 4878 000A 		pea 10.w
  96               		.cfi_def_cfa_offset 36
  97 005a 4E92      		jsr (%a2)
  98               	.LVL12:
  15:csys68k.c     **** 
  99               		.loc 1 15 7 view .LVU27
  15:csys68k.c     **** 
 100               		.loc 1 15 18 is_stmt 0 view .LVU28
 101 005c 19BC 000A 		move.b #10,(%a4,%d3.l)
 101      3800 
  33:csys68k.c     ****       return (i + 1);
 102               		.loc 1 33 5 is_stmt 1 view .LVU29
  34:csys68k.c     ****     }
 103               		.loc 1 34 7 view .LVU30
  34:csys68k.c     ****     }
 104               		.loc 1 34 17 is_stmt 0 view .LVU31
 105 0062 5283      		addq.l #1,%d3
 106               	.LVL13:
  34:csys68k.c     ****     }
 107               		.loc 1 34 17 view .LVU32
 108 0064 508F      		addq.l #8,%sp
 109               		.cfi_def_cfa_offset 28
 110               		.loc 1 38 1 view .LVU33
 111 0066 2003      		move.l %d3,%d0
 112 0068 4CDF 1C1C 		movem.l (%sp)+,#7196
 113               	.LVL14:
 114               		.loc 1 38 1 view .LVU34
 115 006c 4E75      		rts
 116               	.LVL15:
 117               	.L18:
  19:csys68k.c     **** 	outbyte('\x8'); /* bs  */
 118               		.loc 1 19 7 is_stmt 1 view .LVU35
  19:csys68k.c     **** 	outbyte('\x8'); /* bs  */


 119               		.loc 1 19 10 is_stmt 0 view .LVU36
 120 006e 4A83      		tst.l %d3
 121 0070 67AC      		jeq .L8
  23:csys68k.c     ****       }
 122               		.loc 1 23 3 view .LVU37
 123 0072 5383      		subq.l #1,%d3
 124               	.LVL16:
  20:csys68k.c     **** 	outbyte(' ');   /* spc */
 125               		.loc 1 20 2 is_stmt 1 view .LVU38
 126 0074 4878 0008 		pea 8.w
 127               		.cfi_def_cfa_offset 32
 128 0078 4E92      		jsr (%a2)
 129               	.LVL17:
  21:csys68k.c     **** 	outbyte('\x8'); /* bs  */
 130               		.loc 1 21 2 view .LVU39
 131 007a 4878 0020 		pea 32.w
 132               		.cfi_def_cfa_offset 36
 133 007e 4E92      		jsr (%a2)
 134               	.LVL18:
  22:csys68k.c     **** 	i--;
 135               		.loc 1 22 2 view .LVU40
 136 0080 4878 0008 		pea 8.w
 137               		.cfi_def_cfa_offset 40
 138 0084 4E92      		jsr (%a2)
 139               	.LVL19:
  23:csys68k.c     ****       }
 140               		.loc 1 23 2 view .LVU41
  25:csys68k.c     ****       continue;
 141               		.loc 1 25 7 view .LVU42
  26:csys68k.c     **** 
 142               		.loc 1 26 7 view .LVU43
 143 0086 4FEF 000C 		lea (12,%sp),%sp
 144               		.cfi_def_cfa_offset 28
 145               	.LVL20:
   9:csys68k.c     ****     c = inbyte();
 146               		.loc 1 9 28 view .LVU44
   9:csys68k.c     ****     c = inbyte();
 147               		.loc 1 9 17 view .LVU45
 148 008a B684      		cmp.l %d4,%d3
 149 008c 6D90      		jlt .L8
 150 008e 60B8      		jra .L1
 151               		.cfi_endproc
 152               	.LFE0:
 153               		.size	read, .-read
 154               		.align	2
 155               		.globl	write
 156               		.type	write, @function
 157               	write:
 158               	.LVL21:
 159               	.LFB1:
  39:csys68k.c     **** 
  40:csys68k.c     **** int write (int fd, char *buf, int nbytes)
  41:csys68k.c     **** {
 160               		.loc 1 41 1 view -0
 161               		.cfi_startproc
 162               		.loc 1 41 1 is_stmt 0 view .LVU47
 163 0090 48E7 3030 		movem.l #12336,-(%sp)


 164               		.cfi_def_cfa_offset 20
 165               		.cfi_offset 2, -20
 166               		.cfi_offset 3, -16
 167               		.cfi_offset 10, -12
 168               		.cfi_offset 11, -8
 169 0094 262F 001C 		move.l 28(%sp),%d3
  42:csys68k.c     ****   int i, j;
 170               		.loc 1 42 3 is_stmt 1 view .LVU48
  43:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
 171               		.loc 1 43 3 view .LVU49
 172               	.LVL22:
 173               		.loc 1 43 17 view .LVU50
 174 0098 6F26      		jle .L25
 175 009a 246F 0018 		move.l 24(%sp),%a2
 176 009e 240A      		move.l %a2,%d2
 177 00a0 D483      		add.l %d3,%d2
 178 00a2 47F9 0000 		lea outbyte,%a3
 178      0000 
 179               	.LVL23:
 180               	.L22:
  44:csys68k.c     ****     if (*(buf + i) == '\n') {
 181               		.loc 1 44 5 view .LVU51
 182               		.loc 1 44 9 is_stmt 0 view .LVU52
 183 00a8 101A      		move.b (%a2)+,%d0
 184               	.LVL24:
 185               		.loc 1 44 8 view .LVU53
 186 00aa 0C00 000A 		cmp.b #10,%d0
 187 00ae 6718      		jeq .L28
  45:csys68k.c     ****       outbyte ('\r');          /* LF -> CRLF */
  46:csys68k.c     ****     }
  47:csys68k.c     ****     outbyte (*(buf + i));
 188               		.loc 1 47 5 is_stmt 1 view .LVU54
 189 00b0 0280 0000 		and.l #255,%d0
 189      00FF 
 190 00b6 2F00      		move.l %d0,-(%sp)
 191               		.cfi_def_cfa_offset 24
 192 00b8 4E93      		jsr (%a3)
 193               	.LVL25:
  48:csys68k.c     ****     for (j = 0; j < 300; j++);
 194               		.loc 1 48 5 view .LVU55
 195               		.loc 1 48 19 view .LVU56
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 196               		.loc 1 43 28 view .LVU57
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 197               		.loc 1 43 17 view .LVU58
 198 00ba 588F      		addq.l #4,%sp
 199               		.cfi_def_cfa_offset 20
 200 00bc B48A      		cmp.l %a2,%d2
 201 00be 66E8      		jne .L22
 202               	.LVL26:
 203               	.L25:
  49:csys68k.c     ****   }
  50:csys68k.c     ****   return (nbytes);
  51:csys68k.c     **** }
 204               		.loc 1 51 1 is_stmt 0 view .LVU59
 205 00c0 2003      		move.l %d3,%d0
 206 00c2 4CDF 0C0C 		movem.l (%sp)+,#3084


 207 00c6 4E75      		rts
 208               	.LVL27:
 209               	.L28:
  45:csys68k.c     ****     }
 210               		.loc 1 45 7 is_stmt 1 view .LVU60
 211 00c8 4878 000D 		pea 13.w
 212               		.cfi_def_cfa_offset 24
 213 00cc 4E93      		jsr (%a3)
 214               	.LVL28:
  47:csys68k.c     ****     for (j = 0; j < 300; j++);
 215               		.loc 1 47 14 is_stmt 0 view .LVU61
 216 00ce 102A FFFF 		move.b -1(%a2),%d0
 217 00d2 588F      		addq.l #4,%sp
 218               		.cfi_def_cfa_offset 20
  47:csys68k.c     ****     for (j = 0; j < 300; j++);
 219               		.loc 1 47 5 is_stmt 1 view .LVU62
 220 00d4 0280 0000 		and.l #255,%d0
 220      00FF 
 221 00da 2F00      		move.l %d0,-(%sp)
 222               		.cfi_def_cfa_offset 24
 223 00dc 4E93      		jsr (%a3)
 224               	.LVL29:
  48:csys68k.c     ****   }
 225               		.loc 1 48 5 view .LVU63
  48:csys68k.c     ****   }
 226               		.loc 1 48 19 view .LVU64
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 227               		.loc 1 43 28 view .LVU65
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 228               		.loc 1 43 17 view .LVU66
 229 00de 588F      		addq.l #4,%sp
 230               		.cfi_def_cfa_offset 20
 231 00e0 B48A      		cmp.l %a2,%d2
 232 00e2 66C4      		jne .L22
 233 00e4 60DA      		jra .L25
 234               		.cfi_endproc
 235               	.LFE1:
 236               		.size	write, .-write
 237               	.Letext0:
 238               		.section	.debug_info,"",@progbits
 239               	.Ldebug_info0:
 240 0000 0000 017B 		.long	0x17b
 241 0004 0005      		.word	0x5
 242 0006 01        		.byte	0x1
 243 0007 04        		.byte	0x4
 244 0008 0000 0000 		.long	.Ldebug_abbrev0
 245 000c 06        		.uleb128 0x6
 246 000d 0000 0000 		.long	.LASF5
 247 0011 1D        		.byte	0x1d
 248 0012 0000 0000 		.long	.LASF6
 249 0016 0000 0000 		.long	.LASF7
 250 001a 0000 0000 		.long	.Ltext0
 251 001e 0000 00E6 		.long	.Letext0-.Ltext0
 252 0022 0000 0000 		.long	.Ldebug_line0
 253 0026 07        		.uleb128 0x7
 254 0027 0000 0000 		.long	.LASF0
 255 002b 01        		.byte	0x1


 256 002c 01        		.byte	0x1
 257 002d 0D        		.byte	0xd
 258 002e 0000 0038 		.long	0x38
 259 0032 08        		.uleb128 0x8
 260 0033 0000 0038 		.long	0x38
 261 0037 00        		.byte	0
 262 0038 04        		.uleb128 0x4
 263 0039 08        		.byte	0x8
 264 003a 0000 0000 		.long	.LASF2
 265 003e 09        		.uleb128 0x9
 266 003f 0000 0000 		.long	.LASF1
 267 0043 01        		.byte	0x1
 268 0044 02        		.byte	0x2
 269 0045 0D        		.byte	0xd
 270 0046 0000 0050 		.long	0x50
 271 004a 0000 0050 		.long	0x50
 272 004e 0A        		.uleb128 0xa
 273 004f 00        		.byte	0
 274 0050 04        		.uleb128 0x4
 275 0051 06        		.byte	0x6
 276 0052 0000 0000 		.long	.LASF3
 277 0056 0B        		.uleb128 0xb
 278 0057 0000 0000 		.long	.LASF8
 279 005b 01        		.byte	0x1
 280 005c 28        		.byte	0x28
 281 005d 05        		.byte	0x5
 282 005e 0000 00D0 		.long	0xd0
 283 0062 0000 0000 		.long	.LFB1
 284 0066 0000 0056 		.long	.LFE1-.LFB1
 285 006a 01        		.uleb128 0x1
 286 006b 9C        		.byte	0x9c
 287 006c 0000 00D0 		.long	0xd0
 288 0070 02        		.uleb128 0x2
 289 0071 6664 00   		.string	"fd"
 290 0074 28        		.byte	0x28
 291 0075 10        		.byte	0x10
 292 0076 0000 00D0 		.long	0xd0
 293 007a 02        		.uleb128 0x2
 294 007b 91        		.byte	0x91
 295 007c 00        		.sleb128 0
 296 007d 02        		.uleb128 0x2
 297 007e 6275 6600 		.string	"buf"
 298 0082 28        		.byte	0x28
 299 0083 1A        		.byte	0x1a
 300 0084 0000 00D7 		.long	0xd7
 301 0088 02        		.uleb128 0x2
 302 0089 91        		.byte	0x91
 303 008a 04        		.sleb128 4
 304 008b 05        		.uleb128 0x5
 305 008c 0000 0000 		.long	.LASF4
 306 0090 28        		.byte	0x28
 307 0091 23        		.byte	0x23
 308 0092 0000 00D0 		.long	0xd0
 309 0096 02        		.uleb128 0x2
 310 0097 91        		.byte	0x91
 311 0098 08        		.sleb128 8
 312 0099 03        		.uleb128 0x3


 313 009a 6900      		.string	"i"
 314 009c 2A        		.byte	0x2a
 315 009d 07        		.byte	0x7
 316 009e 0000 00D0 		.long	0xd0
 317 00a2 0000 0000 		.long	.LLST2
 318 00a6 0000 0000 		.long	.LVUS2
 319 00aa 0C        		.uleb128 0xc
 320 00ab 6A00      		.string	"j"
 321 00ad 01        		.byte	0x1
 322 00ae 2A        		.byte	0x2a
 323 00af 0A        		.byte	0xa
 324 00b0 0000 00D0 		.long	0xd0
 325 00b4 01        		.uleb128 0x1
 326 00b5 0000 0000 		.long	.LVL25
 327 00b9 0000 0026 		.long	0x26
 328 00bd 01        		.uleb128 0x1
 329 00be 0000 0000 		.long	.LVL28
 330 00c2 0000 0026 		.long	0x26
 331 00c6 01        		.uleb128 0x1
 332 00c7 0000 0000 		.long	.LVL29
 333 00cb 0000 0026 		.long	0x26
 334 00cf 00        		.byte	0
 335 00d0 0D        		.uleb128 0xd
 336 00d1 04        		.byte	0x4
 337 00d2 05        		.byte	0x5
 338 00d3 696E 7400 		.string	"int"
 339 00d7 0E        		.uleb128 0xe
 340 00d8 04        		.byte	0x4
 341 00d9 0000 0050 		.long	0x50
 342 00dd 0F        		.uleb128 0xf
 343 00de 0000 0000 		.long	.LASF9
 344 00e2 01        		.byte	0x1
 345 00e3 04        		.byte	0x4
 346 00e4 05        		.byte	0x5
 347 00e5 0000 00D0 		.long	0xd0
 348 00e9 0000 0000 		.long	.LFB0
 349 00ed 0000 0090 		.long	.LFE0-.LFB0
 350 00f1 01        		.uleb128 0x1
 351 00f2 9C        		.byte	0x9c
 352 00f3 02        		.uleb128 0x2
 353 00f4 6664 00   		.string	"fd"
 354 00f7 04        		.byte	0x4
 355 00f8 0E        		.byte	0xe
 356 00f9 0000 00D0 		.long	0xd0
 357 00fd 02        		.uleb128 0x2
 358 00fe 91        		.byte	0x91
 359 00ff 00        		.sleb128 0
 360 0100 02        		.uleb128 0x2
 361 0101 6275 6600 		.string	"buf"
 362 0105 04        		.byte	0x4
 363 0106 18        		.byte	0x18
 364 0107 0000 00D7 		.long	0xd7
 365 010b 02        		.uleb128 0x2
 366 010c 91        		.byte	0x91
 367 010d 04        		.sleb128 4
 368 010e 05        		.uleb128 0x5
 369 010f 0000 0000 		.long	.LASF4


 370 0113 04        		.byte	0x4
 371 0114 21        		.byte	0x21
 372 0115 0000 00D0 		.long	0xd0
 373 0119 02        		.uleb128 0x2
 374 011a 91        		.byte	0x91
 375 011b 08        		.sleb128 8
 376 011c 03        		.uleb128 0x3
 377 011d 6300      		.string	"c"
 378 011f 06        		.byte	0x6
 379 0120 08        		.byte	0x8
 380 0121 0000 0050 		.long	0x50
 381 0125 0000 0000 		.long	.LLST0
 382 0129 0000 0000 		.long	.LVUS0
 383 012d 03        		.uleb128 0x3
 384 012e 6900      		.string	"i"
 385 0130 07        		.byte	0x7
 386 0131 08        		.byte	0x8
 387 0132 0000 00D0 		.long	0xd0
 388 0136 0000 0000 		.long	.LLST1
 389 013a 0000 0000 		.long	.LVUS1
 390 013e 01        		.uleb128 0x1
 391 013f 0000 0000 		.long	.LVL3
 392 0143 0000 003E 		.long	0x3e
 393 0147 01        		.uleb128 0x1
 394 0148 0000 0000 		.long	.LVL6
 395 014c 0000 0026 		.long	0x26
 396 0150 01        		.uleb128 0x1
 397 0151 0000 0000 		.long	.LVL11
 398 0155 0000 0026 		.long	0x26
 399 0159 01        		.uleb128 0x1
 400 015a 0000 0000 		.long	.LVL12
 401 015e 0000 0026 		.long	0x26
 402 0162 01        		.uleb128 0x1
 403 0163 0000 0000 		.long	.LVL17
 404 0167 0000 0026 		.long	0x26
 405 016b 01        		.uleb128 0x1
 406 016c 0000 0000 		.long	.LVL18
 407 0170 0000 0026 		.long	0x26
 408 0174 01        		.uleb128 0x1
 409 0175 0000 0000 		.long	.LVL19
 410 0179 0000 0026 		.long	0x26
 411 017d 00        		.byte	0
 412 017e 00        		.byte	0
 413               		.section	.debug_abbrev,"",@progbits
 414               	.Ldebug_abbrev0:
 415 0000 01        		.uleb128 0x1
 416 0001 48        		.uleb128 0x48
 417 0002 00        		.byte	0
 418 0003 7D        		.uleb128 0x7d
 419 0004 01        		.uleb128 0x1
 420 0005 7F        		.uleb128 0x7f
 421 0006 13        		.uleb128 0x13
 422 0007 00        		.byte	0
 423 0008 00        		.byte	0
 424 0009 02        		.uleb128 0x2
 425 000a 05        		.uleb128 0x5
 426 000b 00        		.byte	0


 427 000c 03        		.uleb128 0x3
 428 000d 08        		.uleb128 0x8
 429 000e 3A        		.uleb128 0x3a
 430 000f 21        		.uleb128 0x21
 431 0010 01        		.sleb128 1
 432 0011 3B        		.uleb128 0x3b
 433 0012 0B        		.uleb128 0xb
 434 0013 39        		.uleb128 0x39
 435 0014 0B        		.uleb128 0xb
 436 0015 49        		.uleb128 0x49
 437 0016 13        		.uleb128 0x13
 438 0017 02        		.uleb128 0x2
 439 0018 18        		.uleb128 0x18
 440 0019 00        		.byte	0
 441 001a 00        		.byte	0
 442 001b 03        		.uleb128 0x3
 443 001c 34        		.uleb128 0x34
 444 001d 00        		.byte	0
 445 001e 03        		.uleb128 0x3
 446 001f 08        		.uleb128 0x8
 447 0020 3A        		.uleb128 0x3a
 448 0021 21        		.uleb128 0x21
 449 0022 01        		.sleb128 1
 450 0023 3B        		.uleb128 0x3b
 451 0024 0B        		.uleb128 0xb
 452 0025 39        		.uleb128 0x39
 453 0026 0B        		.uleb128 0xb
 454 0027 49        		.uleb128 0x49
 455 0028 13        		.uleb128 0x13
 456 0029 02        		.uleb128 0x2
 457 002a 17        		.uleb128 0x17
 458 002b B742      		.uleb128 0x2137
 459 002d 17        		.uleb128 0x17
 460 002e 00        		.byte	0
 461 002f 00        		.byte	0
 462 0030 04        		.uleb128 0x4
 463 0031 24        		.uleb128 0x24
 464 0032 00        		.byte	0
 465 0033 0B        		.uleb128 0xb
 466 0034 21        		.uleb128 0x21
 467 0035 01        		.sleb128 1
 468 0036 3E        		.uleb128 0x3e
 469 0037 0B        		.uleb128 0xb
 470 0038 03        		.uleb128 0x3
 471 0039 0E        		.uleb128 0xe
 472 003a 00        		.byte	0
 473 003b 00        		.byte	0
 474 003c 05        		.uleb128 0x5
 475 003d 05        		.uleb128 0x5
 476 003e 00        		.byte	0
 477 003f 03        		.uleb128 0x3
 478 0040 0E        		.uleb128 0xe
 479 0041 3A        		.uleb128 0x3a
 480 0042 21        		.uleb128 0x21
 481 0043 01        		.sleb128 1
 482 0044 3B        		.uleb128 0x3b
 483 0045 0B        		.uleb128 0xb


 484 0046 39        		.uleb128 0x39
 485 0047 0B        		.uleb128 0xb
 486 0048 49        		.uleb128 0x49
 487 0049 13        		.uleb128 0x13
 488 004a 02        		.uleb128 0x2
 489 004b 18        		.uleb128 0x18
 490 004c 00        		.byte	0
 491 004d 00        		.byte	0
 492 004e 06        		.uleb128 0x6
 493 004f 11        		.uleb128 0x11
 494 0050 01        		.byte	0x1
 495 0051 25        		.uleb128 0x25
 496 0052 0E        		.uleb128 0xe
 497 0053 13        		.uleb128 0x13
 498 0054 0B        		.uleb128 0xb
 499 0055 03        		.uleb128 0x3
 500 0056 0E        		.uleb128 0xe
 501 0057 1B        		.uleb128 0x1b
 502 0058 0E        		.uleb128 0xe
 503 0059 11        		.uleb128 0x11
 504 005a 01        		.uleb128 0x1
 505 005b 12        		.uleb128 0x12
 506 005c 06        		.uleb128 0x6
 507 005d 10        		.uleb128 0x10
 508 005e 17        		.uleb128 0x17
 509 005f 00        		.byte	0
 510 0060 00        		.byte	0
 511 0061 07        		.uleb128 0x7
 512 0062 2E        		.uleb128 0x2e
 513 0063 01        		.byte	0x1
 514 0064 3F        		.uleb128 0x3f
 515 0065 19        		.uleb128 0x19
 516 0066 03        		.uleb128 0x3
 517 0067 0E        		.uleb128 0xe
 518 0068 3A        		.uleb128 0x3a
 519 0069 0B        		.uleb128 0xb
 520 006a 3B        		.uleb128 0x3b
 521 006b 0B        		.uleb128 0xb
 522 006c 39        		.uleb128 0x39
 523 006d 0B        		.uleb128 0xb
 524 006e 27        		.uleb128 0x27
 525 006f 19        		.uleb128 0x19
 526 0070 3C        		.uleb128 0x3c
 527 0071 19        		.uleb128 0x19
 528 0072 01        		.uleb128 0x1
 529 0073 13        		.uleb128 0x13
 530 0074 00        		.byte	0
 531 0075 00        		.byte	0
 532 0076 08        		.uleb128 0x8
 533 0077 05        		.uleb128 0x5
 534 0078 00        		.byte	0
 535 0079 49        		.uleb128 0x49
 536 007a 13        		.uleb128 0x13
 537 007b 00        		.byte	0
 538 007c 00        		.byte	0
 539 007d 09        		.uleb128 0x9
 540 007e 2E        		.uleb128 0x2e


 541 007f 01        		.byte	0x1
 542 0080 3F        		.uleb128 0x3f
 543 0081 19        		.uleb128 0x19
 544 0082 03        		.uleb128 0x3
 545 0083 0E        		.uleb128 0xe
 546 0084 3A        		.uleb128 0x3a
 547 0085 0B        		.uleb128 0xb
 548 0086 3B        		.uleb128 0x3b
 549 0087 0B        		.uleb128 0xb
 550 0088 39        		.uleb128 0x39
 551 0089 0B        		.uleb128 0xb
 552 008a 49        		.uleb128 0x49
 553 008b 13        		.uleb128 0x13
 554 008c 3C        		.uleb128 0x3c
 555 008d 19        		.uleb128 0x19
 556 008e 01        		.uleb128 0x1
 557 008f 13        		.uleb128 0x13
 558 0090 00        		.byte	0
 559 0091 00        		.byte	0
 560 0092 0A        		.uleb128 0xa
 561 0093 18        		.uleb128 0x18
 562 0094 00        		.byte	0
 563 0095 00        		.byte	0
 564 0096 00        		.byte	0
 565 0097 0B        		.uleb128 0xb
 566 0098 2E        		.uleb128 0x2e
 567 0099 01        		.byte	0x1
 568 009a 3F        		.uleb128 0x3f
 569 009b 19        		.uleb128 0x19
 570 009c 03        		.uleb128 0x3
 571 009d 0E        		.uleb128 0xe
 572 009e 3A        		.uleb128 0x3a
 573 009f 0B        		.uleb128 0xb
 574 00a0 3B        		.uleb128 0x3b
 575 00a1 0B        		.uleb128 0xb
 576 00a2 39        		.uleb128 0x39
 577 00a3 0B        		.uleb128 0xb
 578 00a4 27        		.uleb128 0x27
 579 00a5 19        		.uleb128 0x19
 580 00a6 49        		.uleb128 0x49
 581 00a7 13        		.uleb128 0x13
 582 00a8 11        		.uleb128 0x11
 583 00a9 01        		.uleb128 0x1
 584 00aa 12        		.uleb128 0x12
 585 00ab 06        		.uleb128 0x6
 586 00ac 40        		.uleb128 0x40
 587 00ad 18        		.uleb128 0x18
 588 00ae 7A        		.uleb128 0x7a
 589 00af 19        		.uleb128 0x19
 590 00b0 01        		.uleb128 0x1
 591 00b1 13        		.uleb128 0x13
 592 00b2 00        		.byte	0
 593 00b3 00        		.byte	0
 594 00b4 0C        		.uleb128 0xc
 595 00b5 34        		.uleb128 0x34
 596 00b6 00        		.byte	0
 597 00b7 03        		.uleb128 0x3


 598 00b8 08        		.uleb128 0x8
 599 00b9 3A        		.uleb128 0x3a
 600 00ba 0B        		.uleb128 0xb
 601 00bb 3B        		.uleb128 0x3b
 602 00bc 0B        		.uleb128 0xb
 603 00bd 39        		.uleb128 0x39
 604 00be 0B        		.uleb128 0xb
 605 00bf 49        		.uleb128 0x49
 606 00c0 13        		.uleb128 0x13
 607 00c1 00        		.byte	0
 608 00c2 00        		.byte	0
 609 00c3 0D        		.uleb128 0xd
 610 00c4 24        		.uleb128 0x24
 611 00c5 00        		.byte	0
 612 00c6 0B        		.uleb128 0xb
 613 00c7 0B        		.uleb128 0xb
 614 00c8 3E        		.uleb128 0x3e
 615 00c9 0B        		.uleb128 0xb
 616 00ca 03        		.uleb128 0x3
 617 00cb 08        		.uleb128 0x8
 618 00cc 00        		.byte	0
 619 00cd 00        		.byte	0
 620 00ce 0E        		.uleb128 0xe
 621 00cf 0F        		.uleb128 0xf
 622 00d0 00        		.byte	0
 623 00d1 0B        		.uleb128 0xb
 624 00d2 0B        		.uleb128 0xb
 625 00d3 49        		.uleb128 0x49
 626 00d4 13        		.uleb128 0x13
 627 00d5 00        		.byte	0
 628 00d6 00        		.byte	0
 629 00d7 0F        		.uleb128 0xf
 630 00d8 2E        		.uleb128 0x2e
 631 00d9 01        		.byte	0x1
 632 00da 3F        		.uleb128 0x3f
 633 00db 19        		.uleb128 0x19
 634 00dc 03        		.uleb128 0x3
 635 00dd 0E        		.uleb128 0xe
 636 00de 3A        		.uleb128 0x3a
 637 00df 0B        		.uleb128 0xb
 638 00e0 3B        		.uleb128 0x3b
 639 00e1 0B        		.uleb128 0xb
 640 00e2 39        		.uleb128 0x39
 641 00e3 0B        		.uleb128 0xb
 642 00e4 27        		.uleb128 0x27
 643 00e5 19        		.uleb128 0x19
 644 00e6 49        		.uleb128 0x49
 645 00e7 13        		.uleb128 0x13
 646 00e8 11        		.uleb128 0x11
 647 00e9 01        		.uleb128 0x1
 648 00ea 12        		.uleb128 0x12
 649 00eb 06        		.uleb128 0x6
 650 00ec 40        		.uleb128 0x40
 651 00ed 18        		.uleb128 0x18
 652 00ee 7A        		.uleb128 0x7a
 653 00ef 19        		.uleb128 0x19
 654 00f0 00        		.byte	0


 655 00f1 00        		.byte	0
 656 00f2 00        		.byte	0
 657               		.section	.debug_loclists,"",@progbits
 658 0000 0000 00E3 		.long	.Ldebug_loc3-.Ldebug_loc2
 659               	.Ldebug_loc2:
 660 0004 0005      		.word	0x5
 661 0006 04        		.byte	0x4
 662 0007 00        		.byte	0
 663 0008 0000 0000 		.long	0
 664               	.Ldebug_loc0:
 665               	.LVUS2:
 666 000c 02        		.uleb128 .LVU50
 667 000d 00        		.uleb128 .LVU51
 668 000e 00        		.uleb128 .LVU51
 669 000f 00        		.uleb128 .LVU53
 670 0010 00        		.uleb128 .LVU53
 671 0011 03        		.uleb128 .LVU58
 672 0012 03        		.uleb128 .LVU58
 673 0013 00        		.uleb128 .LVU59
 674 0014 00        		.uleb128 .LVU60
 675 0015 03        		.uleb128 .LVU66
 676 0016 03        		.uleb128 .LVU66
 677 0017 00        		.uleb128 0
 678               	.LLST2:
 679 0018 04        		.byte	0x4
 680 0019 9801      		.uleb128 .LVL22-.Ltext0
 681 001b A801      		.uleb128 .LVL23-.Ltext0
 682 001d 02        		.uleb128 0x2
 683 001e 30        		.byte	0x30
 684 001f 9F        		.byte	0x9f
 685 0020 04        		.byte	0x4
 686 0021 A801      		.uleb128 .LVL23-.Ltext0
 687 0023 AA01      		.uleb128 .LVL24-.Ltext0
 688 0025 07        		.uleb128 0x7
 689 0026 7A        		.byte	0x7a
 690 0027 00        		.sleb128 0
 691 0028 91        		.byte	0x91
 692 0029 74        		.sleb128 -12
 693 002a 06        		.byte	0x6
 694 002b 1C        		.byte	0x1c
 695 002c 9F        		.byte	0x9f
 696 002d 04        		.byte	0x4
 697 002e AA01      		.uleb128 .LVL24-.Ltext0
 698 0030 BA01      		.uleb128 .LVL25-.Ltext0
 699 0032 08        		.uleb128 0x8
 700 0033 91        		.byte	0x91
 701 0034 74        		.sleb128 -12
 702 0035 06        		.byte	0x6
 703 0036 20        		.byte	0x20
 704 0037 7A        		.byte	0x7a
 705 0038 00        		.sleb128 0
 706 0039 22        		.byte	0x22
 707 003a 9F        		.byte	0x9f
 708 003b 04        		.byte	0x4
 709 003c BA01      		.uleb128 .LVL25-.Ltext0
 710 003e C001      		.uleb128 .LVL26-.Ltext0
 711 0040 07        		.uleb128 0x7


 712 0041 7A        		.byte	0x7a
 713 0042 00        		.sleb128 0
 714 0043 91        		.byte	0x91
 715 0044 74        		.sleb128 -12
 716 0045 06        		.byte	0x6
 717 0046 1C        		.byte	0x1c
 718 0047 9F        		.byte	0x9f
 719 0048 04        		.byte	0x4
 720 0049 C801      		.uleb128 .LVL27-.Ltext0
 721 004b DE01      		.uleb128 .LVL29-.Ltext0
 722 004d 08        		.uleb128 0x8
 723 004e 91        		.byte	0x91
 724 004f 74        		.sleb128 -12
 725 0050 06        		.byte	0x6
 726 0051 20        		.byte	0x20
 727 0052 7A        		.byte	0x7a
 728 0053 00        		.sleb128 0
 729 0054 22        		.byte	0x22
 730 0055 9F        		.byte	0x9f
 731 0056 04        		.byte	0x4
 732 0057 DE01      		.uleb128 .LVL29-.Ltext0
 733 0059 E601      		.uleb128 .LFE1-.Ltext0
 734 005b 07        		.uleb128 0x7
 735 005c 7A        		.byte	0x7a
 736 005d 00        		.sleb128 0
 737 005e 91        		.byte	0x91
 738 005f 74        		.sleb128 -12
 739 0060 06        		.byte	0x6
 740 0061 1C        		.byte	0x1c
 741 0062 9F        		.byte	0x9f
 742 0063 00        		.byte	0
 743               	.LVUS0:
 744 0064 00        		.uleb128 .LVU10
 745 0065 00        		.uleb128 .LVU16
 746 0066 00        		.uleb128 .LVU16
 747 0067 00        		.uleb128 .LVU24
 748 0068 00        		.uleb128 .LVU25
 749 0069 00        		.uleb128 .LVU26
 750 006a 00        		.uleb128 .LVU26
 751 006b 00        		.uleb128 .LVU34
 752 006c 00        		.uleb128 .LVU35
 753 006d 00        		.uleb128 .LVU39
 754 006e 00        		.uleb128 .LVU39
 755 006f 00        		.uleb128 0
 756               	.LLST0:
 757 0070 04        		.byte	0x4
 758 0071 22        		.uleb128 .LVL4-.Ltext0
 759 0072 36        		.uleb128 .LVL5-.Ltext0
 760 0073 01        		.uleb128 0x1
 761 0074 50        		.byte	0x50
 762 0075 04        		.byte	0x4
 763 0076 36        		.uleb128 .LVL5-.Ltext0
 764 0077 48        		.uleb128 .LVL9-.Ltext0
 765 0078 01        		.uleb128 0x1
 766 0079 52        		.byte	0x52
 767 007a 04        		.byte	0x4
 768 007b 50        		.uleb128 .LVL10-.Ltext0


 769 007c 55        		.uleb128 .LVL11-1-.Ltext0
 770 007d 01        		.uleb128 0x1
 771 007e 50        		.byte	0x50
 772 007f 04        		.byte	0x4
 773 0080 55        		.uleb128 .LVL11-1-.Ltext0
 774 0081 6C        		.uleb128 .LVL14-.Ltext0
 775 0082 01        		.uleb128 0x1
 776 0083 52        		.byte	0x52
 777 0084 04        		.byte	0x4
 778 0085 6E        		.uleb128 .LVL15-.Ltext0
 779 0086 79        		.uleb128 .LVL17-1-.Ltext0
 780 0087 01        		.uleb128 0x1
 781 0088 50        		.byte	0x50
 782 0089 04        		.byte	0x4
 783 008a 79        		.uleb128 .LVL17-1-.Ltext0
 784 008b 9001      		.uleb128 .LFE0-.Ltext0
 785 008d 01        		.uleb128 0x1
 786 008e 52        		.byte	0x52
 787 008f 00        		.byte	0
 788               	.LVUS1:
 789 0090 03        		.uleb128 .LVU5
 790 0091 00        		.uleb128 .LVU8
 791 0092 00        		.uleb128 .LVU8
 792 0093 00        		.uleb128 .LVU21
 793 0094 00        		.uleb128 .LVU21
 794 0095 00        		.uleb128 .LVU22
 795 0096 00        		.uleb128 .LVU25
 796 0097 00        		.uleb128 .LVU32
 797 0098 00        		.uleb128 .LVU32
 798 0099 00        		.uleb128 .LVU34
 799 009a 00        		.uleb128 .LVU34
 800 009b 00        		.uleb128 .LVU35
 801 009c 00        		.uleb128 .LVU35
 802 009d 00        		.uleb128 .LVU38
 803 009e 00        		.uleb128 .LVU38
 804 009f 01        		.uleb128 .LVU42
 805 00a0 01        		.uleb128 .LVU42
 806 00a1 02        		.uleb128 .LVU43
 807 00a2 02        		.uleb128 .LVU43
 808 00a3 00        		.uleb128 .LVU44
 809               	.LLST1:
 810 00a4 04        		.byte	0x4
 811 00a5 0C        		.uleb128 .LVL1-.Ltext0
 812 00a6 1E        		.uleb128 .LVL2-.Ltext0
 813 00a7 02        		.uleb128 0x2
 814 00a8 30        		.byte	0x30
 815 00a9 9F        		.byte	0x9f
 816 00aa 04        		.byte	0x4
 817 00ab 1E        		.uleb128 .LVL2-.Ltext0
 818 00ac 42        		.uleb128 .LVL7-.Ltext0
 819 00ad 01        		.uleb128 0x1
 820 00ae 53        		.byte	0x53
 821 00af 04        		.byte	0x4
 822 00b0 42        		.uleb128 .LVL7-.Ltext0
 823 00b1 44        		.uleb128 .LVL8-.Ltext0
 824 00b2 03        		.uleb128 0x3
 825 00b3 73        		.byte	0x73


 826 00b4 7F        		.sleb128 -1
 827 00b5 9F        		.byte	0x9f
 828 00b6 04        		.byte	0x4
 829 00b7 50        		.uleb128 .LVL10-.Ltext0
 830 00b8 64        		.uleb128 .LVL13-.Ltext0
 831 00b9 01        		.uleb128 0x1
 832 00ba 53        		.byte	0x53
 833 00bb 04        		.byte	0x4
 834 00bc 64        		.uleb128 .LVL13-.Ltext0
 835 00bd 6C        		.uleb128 .LVL14-.Ltext0
 836 00be 03        		.uleb128 0x3
 837 00bf 73        		.byte	0x73
 838 00c0 7F        		.sleb128 -1
 839 00c1 9F        		.byte	0x9f
 840 00c2 04        		.byte	0x4
 841 00c3 6C        		.uleb128 .LVL14-.Ltext0
 842 00c4 6E        		.uleb128 .LVL15-.Ltext0
 843 00c5 03        		.uleb128 0x3
 844 00c6 70        		.byte	0x70
 845 00c7 7F        		.sleb128 -1
 846 00c8 9F        		.byte	0x9f
 847 00c9 04        		.byte	0x4
 848 00ca 6E        		.uleb128 .LVL15-.Ltext0
 849 00cb 74        		.uleb128 .LVL16-.Ltext0
 850 00cc 01        		.uleb128 0x1
 851 00cd 53        		.byte	0x53
 852 00ce 04        		.byte	0x4
 853 00cf 74        		.uleb128 .LVL16-.Ltext0
 854 00d0 8601      		.uleb128 .LVL19-.Ltext0
 855 00d2 03        		.uleb128 0x3
 856 00d3 73        		.byte	0x73
 857 00d4 01        		.sleb128 1
 858 00d5 9F        		.byte	0x9f
 859 00d6 04        		.byte	0x4
 860 00d7 8601      		.uleb128 .LVL19-.Ltext0
 861 00d9 8601      		.uleb128 .LVL19-.Ltext0
 862 00db 01        		.uleb128 0x1
 863 00dc 53        		.byte	0x53
 864 00dd 04        		.byte	0x4
 865 00de 8601      		.uleb128 .LVL19-.Ltext0
 866 00e0 8A01      		.uleb128 .LVL20-.Ltext0
 867 00e2 03        		.uleb128 0x3
 868 00e3 73        		.byte	0x73
 869 00e4 7F        		.sleb128 -1
 870 00e5 9F        		.byte	0x9f
 871 00e6 00        		.byte	0
 872               	.Ldebug_loc3:
 873               		.section	.debug_aranges,"",@progbits
 874 0000 0000 001C 		.long	0x1c
 875 0004 0002      		.word	0x2
 876 0006 0000 0000 		.long	.Ldebug_info0
 877 000a 04        		.byte	0x4
 878 000b 00        		.byte	0
 879 000c 0000      		.word	0
 880 000e 0000      		.word	0
 881 0010 0000 0000 		.long	.Ltext0
 882 0014 0000 00E6 		.long	.Letext0-.Ltext0


 883 0018 0000 0000 		.long	0
 884 001c 0000 0000 		.long	0
 885               		.section	.debug_line,"",@progbits
 886               	.Ldebug_line0:
 887 0000 0000 0114 		.section	.debug_str,"MS",@progbits,1
 887      0003 0000 
 887      0020 0201 
 887      FB0E 0D00 
 887      0101 0101 
 888               	.LASF0:
 889 0000 6F75 7462 		.string	"outbyte"
 889      7974 6500 
 890               	.LASF4:
 891 0008 6E62 7974 		.string	"nbytes"
 891      6573 00
 892               	.LASF7:
 893 000f 2F68 6F6D 		.string	"/home/students/4494672686/sw2-3/mtk"
 893      652F 7374 
 893      7564 656E 
 893      7473 2F34 
 893      3439 3436 
 894               	.LASF3:
 895 0033 6368 6172 		.string	"char"
 895      00
 896               	.LASF6:
 897 0038 6373 7973 		.string	"csys68k.c"
 897      3638 6B2E 
 897      6300 
 898               	.LASF5:
 899 0042 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 899      4331 3720 
 899      3131 2E34 
 899      2E30 202D 
 899      6D63 7075 
 900               	.LASF9:
 901 0086 7265 6164 		.string	"read"
 901      00
 902               	.LASF2:
 903 008b 756E 7369 		.string	"unsigned char"
 903      676E 6564 
 903      2063 6861 
 903      7200 
 904               	.LASF8:
 905 0099 7772 6974 		.string	"write"
 905      6500 
 906               	.LASF1:
 907 009f 696E 6279 		.string	"inbyte"
 907      7465 00
 908               		.ident	"GCC: (GNU) 11.4.0"




   1               	#NO_APP
   2               		.file	"test1.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.section	.rodata.str1.1,"aMS",@progbits,1
   7               	.LC0:
   8 0000 2573 00   		.string	"%s"
   9               		.section	.text.startup,"ax",@progbits
  10               		.align	2
  11               		.globl	main
  12               		.type	main, @function
  13               	main:
  14               	.LFB3:
  15               		.file 1 "test1.c"
   1:test1.c       **** #include <stdio.h>
   2:test1.c       **** 
   3:test1.c       **** int main()
   4:test1.c       **** {
  16               		.loc 1 4 1 view -0
  17               		.cfi_startproc
  18 0000 4FEF FF00 		lea (-256,%sp),%sp
  19               		.cfi_def_cfa_offset 260
  20 0004 48E7 2030 		movem.l #8240,-(%sp)
  21               		.cfi_def_cfa_offset 272
  22               		.cfi_offset 2, -272
  23               		.cfi_offset 10, -268
  24               		.cfi_offset 11, -264
  25 0008 740C      		moveq #12,%d2
  26 000a D48F      		add.l %sp,%d2
  27 000c 47F9 0000 		lea scanf,%a3
  27      0000 
  28 0012 45F9 0000 		lea puts,%a2
  28      0000 
  29               	.L2:
   5:test1.c       ****   
   6:test1.c       ****   while(1){
  30               		.loc 1 6 3 discriminator 1 view .LVU1
  31               	.LBB2:
   7:test1.c       ****     char str[256];
  32               		.loc 1 7 5 discriminator 1 view .LVU2
   8:test1.c       ****     
   9:test1.c       ****     scanf("%s",str);
  33               		.loc 1 9 5 discriminator 1 view .LVU3
  34 0018 2F02      		move.l %d2,-(%sp)
  35               		.cfi_def_cfa_offset 276
  36 001a 4879 0000 		pea .LC0
  36      0000 
  37               		.cfi_def_cfa_offset 280
  38 0020 4E93      		jsr (%a3)
  39               	.LVL0:
  10:test1.c       ****     printf("%s\n",str);
  40               		.loc 1 10 5 discriminator 1 view .LVU4
  41 0022 2F02      		move.l %d2,-(%sp)
  42               		.cfi_def_cfa_offset 284
  43 0024 4E92      		jsr (%a2)
  44               	.LVL1:


  45               	.LBE2:
   6:test1.c       ****     char str[256];
  46               		.loc 1 6 8 discriminator 1 view .LVU5
  47               	.LBB3:
  48 0026 4FEF 000C 		lea (12,%sp),%sp
  49               		.cfi_def_cfa_offset 272
  50               	.LBE3:
   6:test1.c       ****     char str[256];
  51               		.loc 1 6 3 discriminator 1 view .LVU6
  52               	.LBB4:
   7:test1.c       ****     
  53               		.loc 1 7 5 discriminator 1 view .LVU7
   9:test1.c       ****     printf("%s\n",str);
  54               		.loc 1 9 5 discriminator 1 view .LVU8
  55 002a 2F02      		move.l %d2,-(%sp)
  56               		.cfi_def_cfa_offset 276
  57 002c 4879 0000 		pea .LC0
  57      0000 
  58               		.cfi_def_cfa_offset 280
  59 0032 4E93      		jsr (%a3)
  60               	.LVL2:
  61               		.loc 1 10 5 discriminator 1 view .LVU9
  62 0034 2F02      		move.l %d2,-(%sp)
  63               		.cfi_def_cfa_offset 284
  64 0036 4E92      		jsr (%a2)
  65               	.LVL3:
  66               	.LBE4:
   6:test1.c       ****     char str[256];
  67               		.loc 1 6 8 discriminator 1 view .LVU10
  68               	.LBB5:
  69 0038 4FEF 000C 		lea (12,%sp),%sp
  70               		.cfi_def_cfa_offset 272
  71 003c 60DA      		jra .L2
  72               	.LBE5:
  73               		.cfi_endproc
  74               	.LFE3:
  75               		.size	main, .-main
  76               		.text
  77               		.align	2
  78               		.globl	exit
  79               		.type	exit, @function
  80               	exit:
  81               	.LVL4:
  82               	.LFB4:
  11:test1.c       ****     }
  12:test1.c       ****     return 0;
  13:test1.c       **** }
  14:test1.c       **** 
  15:test1.c       **** 
  16:test1.c       **** void exit(int value) {
  83               		.loc 1 16 22 view -0
  84               		.cfi_startproc
  17:test1.c       **** *(char *)0x00d00039 = 'H'; /* LED0 への表示 (HALT) */
  85               		.loc 1 17 1 view .LVU12
  86               		.loc 1 17 21 is_stmt 0 view .LVU13
  87 0000 13FC 0048 		move.b #72,13631545
  87      00D0 0039 


  88               	.LVL5:
  89               	.L6:
  18:test1.c       **** for (;;) ; /* 無限ループトラップで停止させる */
  90               		.loc 1 18 1 is_stmt 1 discriminator 1 view .LVU14
  91               		.loc 1 18 1 discriminator 1 view .LVU15
  92               		.loc 1 18 1 discriminator 1 view .LVU16
  93               		.loc 1 18 1 discriminator 1 view .LVU17
  94 0008 60FE      		jra .L6
  95               		.cfi_endproc
  96               	.LFE4:
  97               		.size	exit, .-exit
  98               	.Letext0:
  99               		.file 2 "<built-in>"
 100               		.file 3 "/usr/local/m68k-elf/include/stdio.h"
 101               		.section	.debug_info,"",@progbits
 102               	.Ldebug_info0:
 103 0000 0000 013B 		.long	0x13b
 104 0004 0005      		.word	0x5
 105 0006 01        		.byte	0x1
 106 0007 04        		.byte	0x4
 107 0008 0000 0000 		.long	.Ldebug_abbrev0
 108 000c 04        		.uleb128 0x4
 109 000d 0000 0000 		.long	.LASF15
 110 0011 1D        		.byte	0x1d
 111 0012 0000 0000 		.long	.LASF16
 112 0016 0000 0000 		.long	.LASF17
 113 001a 0000 0000 		.long	.LLRL2
 114 001e 0000 0000 		.long	0
 115 0022 0000 0000 		.long	.Ldebug_line0
 116 0026 01        		.uleb128 0x1
 117 0027 01        		.byte	0x1
 118 0028 06        		.byte	0x6
 119 0029 0000 0000 		.long	.LASF0
 120 002d 01        		.uleb128 0x1
 121 002e 01        		.byte	0x1
 122 002f 08        		.byte	0x8
 123 0030 0000 0000 		.long	.LASF1
 124 0034 01        		.uleb128 0x1
 125 0035 02        		.byte	0x2
 126 0036 05        		.byte	0x5
 127 0037 0000 0000 		.long	.LASF2
 128 003b 01        		.uleb128 0x1
 129 003c 02        		.byte	0x2
 130 003d 07        		.byte	0x7
 131 003e 0000 0000 		.long	.LASF3
 132 0042 01        		.uleb128 0x1
 133 0043 04        		.byte	0x4
 134 0044 05        		.byte	0x5
 135 0045 0000 0000 		.long	.LASF4
 136 0049 01        		.uleb128 0x1
 137 004a 04        		.byte	0x4
 138 004b 07        		.byte	0x7
 139 004c 0000 0000 		.long	.LASF5
 140 0050 01        		.uleb128 0x1
 141 0051 08        		.byte	0x8
 142 0052 05        		.byte	0x5
 143 0053 0000 0000 		.long	.LASF6


 144 0057 01        		.uleb128 0x1
 145 0058 08        		.byte	0x8
 146 0059 07        		.byte	0x7
 147 005a 0000 0000 		.long	.LASF7
 148 005e 01        		.uleb128 0x1
 149 005f 0C        		.byte	0xc
 150 0060 04        		.byte	0x4
 151 0061 0000 0000 		.long	.LASF8
 152 0065 01        		.uleb128 0x1
 153 0066 04        		.byte	0x4
 154 0067 07        		.byte	0x7
 155 0068 0000 0000 		.long	.LASF9
 156 006c 05        		.uleb128 0x5
 157 006d 04        		.byte	0x4
 158 006e 05        		.byte	0x5
 159 006f 696E 7400 		.string	"int"
 160 0073 01        		.uleb128 0x1
 161 0074 01        		.byte	0x1
 162 0075 06        		.byte	0x6
 163 0076 0000 0000 		.long	.LASF10
 164 007a 06        		.uleb128 0x6
 165 007b 0000 0073 		.long	0x73
 166 007f 07        		.uleb128 0x7
 167 0080 04        		.byte	0x4
 168 0081 0000 007A 		.long	0x7a
 169 0085 08        		.uleb128 0x8
 170 0086 0000 0000 		.long	.LASF11
 171 008a 03        		.byte	0x3
 172 008b D0        		.byte	0xd0
 173 008c 05        		.byte	0x5
 174 008d 0000 006C 		.long	0x6c
 175 0091 0000 009C 		.long	0x9c
 176 0095 09        		.uleb128 0x9
 177 0096 0000 007F 		.long	0x7f
 178 009a 0A        		.uleb128 0xa
 179 009b 00        		.byte	0
 180 009c 0B        		.uleb128 0xb
 181 009d 0000 0000 		.long	.LASF18
 182 00a1 01        		.byte	0x1
 183 00a2 10        		.byte	0x10
 184 00a3 06        		.byte	0x6
 185 00a4 0000 0000 		.long	.LFB4
 186 00a8 0000 000A 		.long	.LFE4-.LFB4
 187 00ac 01        		.uleb128 0x1
 188 00ad 9C        		.byte	0x9c
 189 00ae 0000 00C7 		.long	0xc7
 190 00b2 0C        		.uleb128 0xc
 191 00b3 0000 0000 		.long	.LASF19
 192 00b7 01        		.byte	0x1
 193 00b8 10        		.byte	0x10
 194 00b9 0F        		.byte	0xf
 195 00ba 0000 006C 		.long	0x6c
 196 00be 0000 0000 		.long	.LLST1
 197 00c2 0000 0000 		.long	.LVUS1
 198 00c6 00        		.byte	0
 199 00c7 0D        		.uleb128 0xd
 200 00c8 0000 0000 		.long	.LASF20


 201 00cc 01        		.byte	0x1
 202 00cd 03        		.byte	0x3
 203 00ce 05        		.byte	0x5
 204 00cf 0000 006C 		.long	0x6c
 205 00d3 0000 0000 		.long	.LFB3
 206 00d7 0000 003E 		.long	.LFE3-.LFB3
 207 00db 01        		.uleb128 0x1
 208 00dc 9C        		.byte	0x9c
 209 00dd 0000 011C 		.long	0x11c
 210 00e1 0E        		.uleb128 0xe
 211 00e2 0000 0000 		.long	.LLRL0
 212 00e6 0F        		.uleb128 0xf
 213 00e7 7374 7200 		.string	"str"
 214 00eb 01        		.byte	0x1
 215 00ec 07        		.byte	0x7
 216 00ed 0A        		.byte	0xa
 217 00ee 0000 011C 		.long	0x11c
 218 00f2 03        		.uleb128 0x3
 219 00f3 91        		.byte	0x91
 220 00f4 FC7D      		.sleb128 -260
 221 00f6 02        		.uleb128 0x2
 222 00f7 0000 0000 		.long	.LVL0
 223 00fb 0000 012C 		.long	0x12c
 224 00ff 02        		.uleb128 0x2
 225 0100 0000 0000 		.long	.LVL1
 226 0104 0000 0135 		.long	0x135
 227 0108 02        		.uleb128 0x2
 228 0109 0000 0000 		.long	.LVL2
 229 010d 0000 012C 		.long	0x12c
 230 0111 02        		.uleb128 0x2
 231 0112 0000 0000 		.long	.LVL3
 232 0116 0000 0135 		.long	0x135
 233 011a 00        		.byte	0
 234 011b 00        		.byte	0
 235 011c 10        		.uleb128 0x10
 236 011d 0000 0073 		.long	0x73
 237 0121 0000 012C 		.long	0x12c
 238 0125 11        		.uleb128 0x11
 239 0126 0000 0049 		.long	0x49
 240 012a FF        		.byte	0xff
 241 012b 00        		.byte	0
 242 012c 03        		.uleb128 0x3
 243 012d 0000 0000 		.long	.LASF11
 244 0131 0000 0000 		.long	.LASF13
 245 0135 03        		.uleb128 0x3
 246 0136 0000 0000 		.long	.LASF12
 247 013a 0000 0000 		.long	.LASF14
 248 013e 00        		.byte	0
 249               		.section	.debug_abbrev,"",@progbits
 250               	.Ldebug_abbrev0:
 251 0000 01        		.uleb128 0x1
 252 0001 24        		.uleb128 0x24
 253 0002 00        		.byte	0
 254 0003 0B        		.uleb128 0xb
 255 0004 0B        		.uleb128 0xb
 256 0005 3E        		.uleb128 0x3e
 257 0006 0B        		.uleb128 0xb


 258 0007 03        		.uleb128 0x3
 259 0008 0E        		.uleb128 0xe
 260 0009 00        		.byte	0
 261 000a 00        		.byte	0
 262 000b 02        		.uleb128 0x2
 263 000c 48        		.uleb128 0x48
 264 000d 00        		.byte	0
 265 000e 7D        		.uleb128 0x7d
 266 000f 01        		.uleb128 0x1
 267 0010 7F        		.uleb128 0x7f
 268 0011 13        		.uleb128 0x13
 269 0012 00        		.byte	0
 270 0013 00        		.byte	0
 271 0014 03        		.uleb128 0x3
 272 0015 2E        		.uleb128 0x2e
 273 0016 00        		.byte	0
 274 0017 3F        		.uleb128 0x3f
 275 0018 19        		.uleb128 0x19
 276 0019 3C        		.uleb128 0x3c
 277 001a 19        		.uleb128 0x19
 278 001b 6E        		.uleb128 0x6e
 279 001c 0E        		.uleb128 0xe
 280 001d 03        		.uleb128 0x3
 281 001e 0E        		.uleb128 0xe
 282 001f 3A        		.uleb128 0x3a
 283 0020 21        		.uleb128 0x21
 284 0021 02        		.sleb128 2
 285 0022 3B        		.uleb128 0x3b
 286 0023 21        		.uleb128 0x21
 287 0024 00        		.sleb128 0
 288 0025 00        		.byte	0
 289 0026 00        		.byte	0
 290 0027 04        		.uleb128 0x4
 291 0028 11        		.uleb128 0x11
 292 0029 01        		.byte	0x1
 293 002a 25        		.uleb128 0x25
 294 002b 0E        		.uleb128 0xe
 295 002c 13        		.uleb128 0x13
 296 002d 0B        		.uleb128 0xb
 297 002e 03        		.uleb128 0x3
 298 002f 0E        		.uleb128 0xe
 299 0030 1B        		.uleb128 0x1b
 300 0031 0E        		.uleb128 0xe
 301 0032 55        		.uleb128 0x55
 302 0033 17        		.uleb128 0x17
 303 0034 11        		.uleb128 0x11
 304 0035 01        		.uleb128 0x1
 305 0036 10        		.uleb128 0x10
 306 0037 17        		.uleb128 0x17
 307 0038 00        		.byte	0
 308 0039 00        		.byte	0
 309 003a 05        		.uleb128 0x5
 310 003b 24        		.uleb128 0x24
 311 003c 00        		.byte	0
 312 003d 0B        		.uleb128 0xb
 313 003e 0B        		.uleb128 0xb
 314 003f 3E        		.uleb128 0x3e


 315 0040 0B        		.uleb128 0xb
 316 0041 03        		.uleb128 0x3
 317 0042 08        		.uleb128 0x8
 318 0043 00        		.byte	0
 319 0044 00        		.byte	0
 320 0045 06        		.uleb128 0x6
 321 0046 26        		.uleb128 0x26
 322 0047 00        		.byte	0
 323 0048 49        		.uleb128 0x49
 324 0049 13        		.uleb128 0x13
 325 004a 00        		.byte	0
 326 004b 00        		.byte	0
 327 004c 07        		.uleb128 0x7
 328 004d 0F        		.uleb128 0xf
 329 004e 00        		.byte	0
 330 004f 0B        		.uleb128 0xb
 331 0050 0B        		.uleb128 0xb
 332 0051 49        		.uleb128 0x49
 333 0052 13        		.uleb128 0x13
 334 0053 00        		.byte	0
 335 0054 00        		.byte	0
 336 0055 08        		.uleb128 0x8
 337 0056 2E        		.uleb128 0x2e
 338 0057 01        		.byte	0x1
 339 0058 3F        		.uleb128 0x3f
 340 0059 19        		.uleb128 0x19
 341 005a 03        		.uleb128 0x3
 342 005b 0E        		.uleb128 0xe
 343 005c 3A        		.uleb128 0x3a
 344 005d 0B        		.uleb128 0xb
 345 005e 3B        		.uleb128 0x3b
 346 005f 0B        		.uleb128 0xb
 347 0060 39        		.uleb128 0x39
 348 0061 0B        		.uleb128 0xb
 349 0062 27        		.uleb128 0x27
 350 0063 19        		.uleb128 0x19
 351 0064 49        		.uleb128 0x49
 352 0065 13        		.uleb128 0x13
 353 0066 3C        		.uleb128 0x3c
 354 0067 19        		.uleb128 0x19
 355 0068 01        		.uleb128 0x1
 356 0069 13        		.uleb128 0x13
 357 006a 00        		.byte	0
 358 006b 00        		.byte	0
 359 006c 09        		.uleb128 0x9
 360 006d 05        		.uleb128 0x5
 361 006e 00        		.byte	0
 362 006f 49        		.uleb128 0x49
 363 0070 13        		.uleb128 0x13
 364 0071 00        		.byte	0
 365 0072 00        		.byte	0
 366 0073 0A        		.uleb128 0xa
 367 0074 18        		.uleb128 0x18
 368 0075 00        		.byte	0
 369 0076 00        		.byte	0
 370 0077 00        		.byte	0
 371 0078 0B        		.uleb128 0xb


 372 0079 2E        		.uleb128 0x2e
 373 007a 01        		.byte	0x1
 374 007b 3F        		.uleb128 0x3f
 375 007c 19        		.uleb128 0x19
 376 007d 03        		.uleb128 0x3
 377 007e 0E        		.uleb128 0xe
 378 007f 3A        		.uleb128 0x3a
 379 0080 0B        		.uleb128 0xb
 380 0081 3B        		.uleb128 0x3b
 381 0082 0B        		.uleb128 0xb
 382 0083 39        		.uleb128 0x39
 383 0084 0B        		.uleb128 0xb
 384 0085 27        		.uleb128 0x27
 385 0086 19        		.uleb128 0x19
 386 0087 8701      		.uleb128 0x87
 387 0089 19        		.uleb128 0x19
 388 008a 11        		.uleb128 0x11
 389 008b 01        		.uleb128 0x1
 390 008c 12        		.uleb128 0x12
 391 008d 06        		.uleb128 0x6
 392 008e 40        		.uleb128 0x40
 393 008f 18        		.uleb128 0x18
 394 0090 7A        		.uleb128 0x7a
 395 0091 19        		.uleb128 0x19
 396 0092 01        		.uleb128 0x1
 397 0093 13        		.uleb128 0x13
 398 0094 00        		.byte	0
 399 0095 00        		.byte	0
 400 0096 0C        		.uleb128 0xc
 401 0097 05        		.uleb128 0x5
 402 0098 00        		.byte	0
 403 0099 03        		.uleb128 0x3
 404 009a 0E        		.uleb128 0xe
 405 009b 3A        		.uleb128 0x3a
 406 009c 0B        		.uleb128 0xb
 407 009d 3B        		.uleb128 0x3b
 408 009e 0B        		.uleb128 0xb
 409 009f 39        		.uleb128 0x39
 410 00a0 0B        		.uleb128 0xb
 411 00a1 49        		.uleb128 0x49
 412 00a2 13        		.uleb128 0x13
 413 00a3 02        		.uleb128 0x2
 414 00a4 17        		.uleb128 0x17
 415 00a5 B742      		.uleb128 0x2137
 416 00a7 17        		.uleb128 0x17
 417 00a8 00        		.byte	0
 418 00a9 00        		.byte	0
 419 00aa 0D        		.uleb128 0xd
 420 00ab 2E        		.uleb128 0x2e
 421 00ac 01        		.byte	0x1
 422 00ad 3F        		.uleb128 0x3f
 423 00ae 19        		.uleb128 0x19
 424 00af 03        		.uleb128 0x3
 425 00b0 0E        		.uleb128 0xe
 426 00b1 3A        		.uleb128 0x3a
 427 00b2 0B        		.uleb128 0xb
 428 00b3 3B        		.uleb128 0x3b


 429 00b4 0B        		.uleb128 0xb
 430 00b5 39        		.uleb128 0x39
 431 00b6 0B        		.uleb128 0xb
 432 00b7 49        		.uleb128 0x49
 433 00b8 13        		.uleb128 0x13
 434 00b9 11        		.uleb128 0x11
 435 00ba 01        		.uleb128 0x1
 436 00bb 12        		.uleb128 0x12
 437 00bc 06        		.uleb128 0x6
 438 00bd 40        		.uleb128 0x40
 439 00be 18        		.uleb128 0x18
 440 00bf 7A        		.uleb128 0x7a
 441 00c0 19        		.uleb128 0x19
 442 00c1 01        		.uleb128 0x1
 443 00c2 13        		.uleb128 0x13
 444 00c3 00        		.byte	0
 445 00c4 00        		.byte	0
 446 00c5 0E        		.uleb128 0xe
 447 00c6 0B        		.uleb128 0xb
 448 00c7 01        		.byte	0x1
 449 00c8 55        		.uleb128 0x55
 450 00c9 17        		.uleb128 0x17
 451 00ca 00        		.byte	0
 452 00cb 00        		.byte	0
 453 00cc 0F        		.uleb128 0xf
 454 00cd 34        		.uleb128 0x34
 455 00ce 00        		.byte	0
 456 00cf 03        		.uleb128 0x3
 457 00d0 08        		.uleb128 0x8
 458 00d1 3A        		.uleb128 0x3a
 459 00d2 0B        		.uleb128 0xb
 460 00d3 3B        		.uleb128 0x3b
 461 00d4 0B        		.uleb128 0xb
 462 00d5 39        		.uleb128 0x39
 463 00d6 0B        		.uleb128 0xb
 464 00d7 49        		.uleb128 0x49
 465 00d8 13        		.uleb128 0x13
 466 00d9 02        		.uleb128 0x2
 467 00da 18        		.uleb128 0x18
 468 00db 00        		.byte	0
 469 00dc 00        		.byte	0
 470 00dd 10        		.uleb128 0x10
 471 00de 01        		.uleb128 0x1
 472 00df 01        		.byte	0x1
 473 00e0 49        		.uleb128 0x49
 474 00e1 13        		.uleb128 0x13
 475 00e2 01        		.uleb128 0x1
 476 00e3 13        		.uleb128 0x13
 477 00e4 00        		.byte	0
 478 00e5 00        		.byte	0
 479 00e6 11        		.uleb128 0x11
 480 00e7 21        		.uleb128 0x21
 481 00e8 00        		.byte	0
 482 00e9 49        		.uleb128 0x49
 483 00ea 13        		.uleb128 0x13
 484 00eb 2F        		.uleb128 0x2f
 485 00ec 0B        		.uleb128 0xb


 486 00ed 00        		.byte	0
 487 00ee 00        		.byte	0
 488 00ef 00        		.byte	0
 489               		.section	.debug_loclists,"",@progbits
 490 0000 0000 0014 		.long	.Ldebug_loc3-.Ldebug_loc2
 491               	.Ldebug_loc2:
 492 0004 0005      		.word	0x5
 493 0006 04        		.byte	0x4
 494 0007 00        		.byte	0
 495 0008 0000 0000 		.long	0
 496               	.Ldebug_loc0:
 497               	.LVUS1:
 498 000c 00        		.uleb128 0
 499 000d 00        		.uleb128 .LVU14
 500               	.LLST1:
 501 000e 08        		.byte	0x8
 502 000f 0000 0000 		.long	.LVL4
 503 0013 08        		.uleb128 .LVL5-.LVL4
 504 0014 02        		.uleb128 0x2
 505 0015 91        		.byte	0x91
 506 0016 00        		.sleb128 0
 507 0017 00        		.byte	0
 508               	.Ldebug_loc3:
 509               		.section	.debug_aranges,"",@progbits
 510 0000 0000 0024 		.long	0x24
 511 0004 0002      		.word	0x2
 512 0006 0000 0000 		.long	.Ldebug_info0
 513 000a 04        		.byte	0x4
 514 000b 00        		.byte	0
 515 000c 0000      		.word	0
 516 000e 0000      		.word	0
 517 0010 0000 0000 		.long	.Ltext0
 518 0014 0000 000A 		.long	.Letext0-.Ltext0
 519 0018 0000 0000 		.long	.LFB3
 520 001c 0000 003E 		.long	.LFE3-.LFB3
 521 0020 0000 0000 		.long	0
 522 0024 0000 0000 		.long	0
 523               		.section	.debug_rnglists,"",@progbits
 524               	.Ldebug_ranges0:
 525 0000 0000 0027 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 526               	.Ldebug_ranges2:
 527 0004 0005      		.word	0x5
 528 0006 04        		.byte	0x4
 529 0007 00        		.byte	0
 530 0008 0000 0000 		.long	0
 531               	.LLRL0:
 532 000c 05        		.byte	0x5
 533 000d 0000 0000 		.long	.LBB2
 534 0011 04        		.byte	0x4
 535 0012 00        		.uleb128 .LBB2-.LBB2
 536 0013 0E        		.uleb128 .LBE2-.LBB2
 537 0014 04        		.byte	0x4
 538 0015 0E        		.uleb128 .LBB3-.LBB2
 539 0016 12        		.uleb128 .LBE3-.LBB2
 540 0017 04        		.byte	0x4
 541 0018 12        		.uleb128 .LBB4-.LBB2
 542 0019 20        		.uleb128 .LBE4-.LBB2


 543 001a 04        		.byte	0x4
 544 001b 20        		.uleb128 .LBB5-.LBB2
 545 001c 26        		.uleb128 .LBE5-.LBB2
 546 001d 00        		.byte	0
 547               	.LLRL2:
 548 001e 07        		.byte	0x7
 549 001f 0000 0000 		.long	.Ltext0
 550 0023 0A        		.uleb128 .Letext0-.Ltext0
 551 0024 07        		.byte	0x7
 552 0025 0000 0000 		.long	.LFB3
 553 0029 3E        		.uleb128 .LFE3-.LFB3
 554 002a 00        		.byte	0
 555               	.Ldebug_ranges3:
 556               		.section	.debug_line,"",@progbits
 557               	.Ldebug_line0:
 558 0000 0000 00D5 		.section	.debug_str,"MS",@progbits,1
 558      0003 0000 
 558      0053 0201 
 558      FB0E 0D00 
 558      0101 0101 
 559               	.LASF6:
 560 0000 6C6F 6E67 		.string	"long long int"
 560      206C 6F6E 
 560      6720 696E 
 560      7400 
 561               	.LASF9:
 562 000e 756E 7369 		.string	"unsigned int"
 562      676E 6564 
 562      2069 6E74 
 562      00
 563               	.LASF15:
 564 001b 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 564      4331 3720 
 564      3131 2E34 
 564      2E30 202D 
 564      6D63 7075 
 565               	.LASF12:
 566 005f 7075 7473 		.string	"puts"
 566      00
 567               	.LASF20:
 568 0064 6D61 696E 		.string	"main"
 568      00
 569               	.LASF14:
 570 0069 5F5F 6275 		.string	"__builtin_puts"
 570      696C 7469 
 570      6E5F 7075 
 570      7473 00
 571               	.LASF16:
 572 0078 7465 7374 		.string	"test1.c"
 572      312E 6300 
 573               	.LASF5:
 574 0080 6C6F 6E67 		.string	"long unsigned int"
 574      2075 6E73 
 574      6967 6E65 
 574      6420 696E 
 574      7400 
 575               	.LASF7:


 576 0092 6C6F 6E67 		.string	"long long unsigned int"
 576      206C 6F6E 
 576      6720 756E 
 576      7369 676E 
 576      6564 2069 
 577               	.LASF13:
 578 00a9 5F5F 6275 		.string	"__builtin_scanf"
 578      696C 7469 
 578      6E5F 7363 
 578      616E 6600 
 579               	.LASF11:
 580 00b9 7363 616E 		.string	"scanf"
 580      6600 
 581               	.LASF1:
 582 00bf 756E 7369 		.string	"unsigned char"
 582      676E 6564 
 582      2063 6861 
 582      7200 
 583               	.LASF4:
 584 00cd 6C6F 6E67 		.string	"long int"
 584      2069 6E74 
 584      00
 585               	.LASF3:
 586 00d6 7368 6F72 		.string	"short unsigned int"
 586      7420 756E 
 586      7369 676E 
 586      6564 2069 
 586      6E74 00
 587               	.LASF0:
 588 00e9 7369 676E 		.string	"signed char"
 588      6564 2063 
 588      6861 7200 
 589               	.LASF8:
 590 00f5 6C6F 6E67 		.string	"long double"
 590      2064 6F75 
 590      626C 6500 
 591               	.LASF19:
 592 0101 7661 6C75 		.string	"value"
 592      6500 
 593               	.LASF18:
 594 0107 6578 6974 		.string	"exit"
 594      00
 595               	.LASF17:
 596 010c 2F68 6F6D 		.string	"/home/students/4494672686/sw2-3/theme1/mtk"
 596      652F 7374 
 596      7564 656E 
 596      7473 2F34 
 596      3439 3436 
 597               	.LASF2:
 598 0137 7368 6F72 		.string	"short int"
 598      7420 696E 
 598      7400 
 599               	.LASF10:
 600 0141 6368 6172 		.string	"char"
 600      00
 601               		.ident	"GCC: (GNU) 11.4.0"


