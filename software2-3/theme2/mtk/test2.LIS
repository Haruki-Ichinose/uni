

   1               	        .data
   2               	        .align 2
   3               	environ:
   4 0000 0000 0000 	        .long 0
   5               	 	.align	2
   6               	
   7               	.extern main
   8               	.extern exit
   9               	.extern monitor_begin
  10               	.extern hardware_init_hook
  11               	.extern software_init_hook
  12               	.extern atexit
  13               	.extern __do_global_dtors
  14               	.extern __bss_start
  15               	.extern _end
  16               	
  17               	.global start
  18               	
  19               	.text
  20               	.even
  21               		/* See if user supplied their own stack (__stack != 0).  If not, then
  22               		 * default to using the value of %sp as set by the ROM monitor.
  23               		 */
  24 0000 207C 0000 		movel	#__stack, %a0
  24      0000 
  25 0006 B1FC 0000 		cmpl	#0, %a0
  25      0000 
  26 000c 6702      		jbeq    1f
  27 000e 2E48      		movel	%a0, %sp
  28               	1:
  29               		/* set up initial stack frame */
  30 0010 4E56 FFF8 		link	%a6, #-8
  31               	
  32               		/* zero out the bss section */
  33 0014 223C 0000 		movel	#__bss_start, %d1
  33      0000 
  34 001a 203C 0000 		movel	#_end, %d0
  34      0000 
  35 0020 B280      		cmpl	%d0, %d1
  36 0022 6712      		jbeq	3f
  37 0024 2041      		movl	%d1, %a0
  38 0026 9081      		subl	%d1, %d0
  39 0028 5380      		subql	#1, %d0
  40               	2:
  41 002a 4218      		clrb	(%a0)+
  42 002c 51C8 FFFC 		dbra	%d0, 2b
  43 0030 4240      		clrw	%d0
  44 0032 5380      		subql	#1, %d0
  45 0034 64F4      		jbcc	2b
  46               	3:
  47               		/* jmp monitor initialize after making up  bss */
  48 0036 4EF9 0000 		jmp	monitor_begin
  48      0000 
  49               	start:
  50               		/* monitor returns here.
  51               		 * re-setup stack for C programs.
  52               	         * See if user supplied their own stack (__stack != 0).  If not, then


  53               		 * default to using the value of %sp as set by the ROM monitor.
  54               		 */
  55 003c 207C 0000 		movel	#__stack, %a0
  55      0000 
  56 0042 B1FC 0000 		cmpl	#0, %a0
  56      0000 
  57 0048 6702      		jbeq    skip
  58 004a 2E48      		movel	%a0, %sp
  59               	skip:
  60               		/* set up initial stack frame */
  61 004c 4E56 FFF8 		link	%a6, #-8
  62               	
  63               		/*
  64               		 * initialize target specific stuff. Only execute these
  65               		 * functions it they exist.
  66               		 */
  67 0050 41F9 0000 		lea	hardware_init_hook, %a0
  67      0000 
  68 0056 B1FC 0000 		cmpl	#0, %a0
  68      0000 
  69 005c 6702      		jbeq	4f
  70 005e 4E90      		jsr     (%a0)
  71               	4:
  72 0060 41F9 0000 		lea	software_init_hook, %a0
  72      0000 
  73 0066 B1FC 0000 		cmpl	#0, %a0
  73      0000 
  74 006c 6702      		jbeq	5f
  75 006e 4E90      		jsr     (%a0)
  76               	5:
  77               	
  78               		/*
  79               		 * call the main routine from the application to get it going.
  80               		 * main (argc, argv, environ)
  81               		 * we pass argv as a pointer to NULL.
  82               		 */
  83               	
  84               		/* put __do_global_dtors in the atexit list so 
  85               		 * the destructors get run */
  86               	/* 
  87               		movel	#__do_global_dtors,(%sp)
  88               		jsr	atexit
  89               		movel	#__FINI_SECTION__,(%sp)
  90               		jsr	atexit
  91               		jsr	__INIT_SECTION__
  92               	*/
  93               		
  94               		** setup argv, argc and jump into main
  95 0070 4878 0000 	        pea     0
  96 0074 4879 0000 	        pea     environ
  96      0000 
  97 007a 486F 0004 	        pea     %sp@(4)
  98 007e 4878 0000 	        pea     0
  99 0082 4EB9 0000 		jsr	main
  99      0000 
 100 0088 2F00      		movel	%d0, %sp@-
 101               	


 102 008a 4EB9 0000 	        jsr     exit
 102      0000 
 103               	.even




   1               	***************************************************************
   2               	** 各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	** レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE, 	0xFFF000 	| DMAP を使用．
   8               	.equ IOBASE, 	0x00d00000
   9               		
  10               	***************
  11               	** 割り込み関係のレジスタ
  12               	***************
  13               	.equ IVR, REGBASE+0x300 	| 割り込みベクタレジスタ
  14               	.equ IMR, REGBASE+0x304 	| 割り込みマスクレジスタ
  15               	.equ ISR, REGBASE+0x30c 	| 割り込みステータスレジスタ
  16               	.equ IPR, REGBASE+0x310 	| 割り込みペンディングレジスタ
  17               		
  18               	***************
  19               	** タイマ関係のレジスタ
  20               	***************
  21               	.equ TCTL1, 	REGBASE+0x600 	| タイマ１コントロールレジスタ
  22               	.equ TPRER1, 	REGBASE+0x602 	| タイマ１プリスケーラレジスタ
  23               	.equ TCMP1, 	REGBASE+0x604 	| タイマ１コンペアレジスタ
  24               	.equ TCN1, 	REGBASE+0x608 	| タイマ１カウンタレジスタ
  25               	.equ TSTAT1, 	REGBASE+0x60a 	| タイマ１ステータスレジスタ
  26               		
  27               	***************
  28               	** UART1（送受信）関係のレジスタ
  29               	***************
  30               	.equ USTCNT1, 	REGBASE+0x900 	| UART1 ステータス/コントロールレジスタ
  31               	.equ UBAUD1, 	REGBASE+0x902 	| UART1 ボーコントロールレジスタ
  32               	.equ URX1, 	REGBASE+0x904 	| UART1 受信レジスタ
  33               	.equ UTX1, 	REGBASE+0x906 	| UART1 送信レジスタ
  34               		
  35               	***************
  36               	** LED
  37               	***************
  38               	.equ LED7, IOBASE+0x000002f
  39               	.equ LED6, IOBASE+0x000002d
  40               	.equ LED5, IOBASE+0x000002b
  41               	.equ LED4, IOBASE+0x0000029
  42               	.equ LED3, IOBASE+0x000003f
  43               	.equ LED2, IOBASE+0x000003d
  44               	.equ LED1, IOBASE+0x000003b
  45               	.equ LED0, IOBASE+0x0000039
  46               	
  47               	
  48               	
  49               	
  50               	**********************************************
  51               	.extern start
  52               	.global monitor_begin
  53               	.global TSTAT1
  54               	monitor_begin:
  55               	
  56               	
  57               	


  58               	***************************************************************
  59               	** スタック領域の確保
  60               	***************************************************************
  61               	.section .bss
  62               	.even
  63 0000 0000 0000 	SYS_STK: .ds.b 0x4000 	| システムスタック領域
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  64               	
  65               	.even
  66               	SYS_STK_TOP: 		| システムスタック領域の最後尾
  67               	
  68               	.even
  69 4000 0000 0000 	task_p:	.ds.l 1
  70               	
  71               		
  72               	***************************************************************
  73               	** 初期化
  74               	***************************************************************
  75               	.section .text
  76               	.even
  77               	boot:   ***************************************************
  78               		** スーパーバイザ & 各種設定を行っている最中の割込禁止
  79               		***************************************************
  80 0000 46FC 2700 		move.w 	#0x2700,%SR
  81 0004 4FF9 0000 		lea.l	SYS_STK_TOP, %SP | Set SSP
  81      0000 
  82               		
  83               		******************************
  84               		** 割り込みコントローラの初期化
  85               		*****************************
  86 000a 13FC 0040 		move.b 	#0x40, IVR | ユーザ割り込みベクタ番号を0x40+level に設定．
  86      00FF F300 
  87 0012 23FC 00FF 		move.l 	#0x00ff3ffb,IMR | 全割り込みマスク
  87      3FFB 00FF 
  87      F304 
  88               		
  89               		******************************************************************
  90               		** 送受信 (UART1) 関係の初期化 (割り込みレベルは 4 に固定されている)
  91               		*****************************************************************
  92 001c 33FC E10C 		move.w 	#0xe10c, USTCNT1 
  92      00FF F900 
  93 0024 33FC 0038 		move.w 	#0x0038, UBAUD1 | baud rate = 230400 bps
  93      00FF F902 
  94               		
  95               		*********************************************************
  96               		** タイマ関係の初期化 (割り込みレベルは 6 に固定されている)
  97               		*********************************************************
  98 002c 33FC 0004 		move.w 	#0x0004, TCTL1 
  98      00FF F600 
  99               	
 100 0034 21FC 0000 		move.l 	#uart1_interrupt, 0x110
 100      0000 0110 
 101 003c 21FC 0000 		move.l 	#timer_interrupt, 0x118
 101      0000 0118 


 102               	
 103               		***************
 104               		**キューの初期化
 105               		***************
 106 0044 4EBA 00D8 		jsr 	Init_Q
 107               		
 108 0048 21FC 0000 		move.l	#SYSTEM_CALL,0x080
 108      0000 0080 
 109 0050 23FC 000F 		move.l	#0x00f3ff9, IMR
 109      3FF9 00FF 
 109      F304 
 110               		
 111 005a 46FC 0000 		move.w 	#0x0000, %SR | USER MODE, LEVEL 0
 112 005e 4EF9 0000 		jmp	start
 112      0000 
 113               		**bra 	MAIN
 114               		
 115               	***************
 116               	** システムコール番号
 117               	***************
 118               	.equ SYSCALL_NUM_GETSTRING, 	1
 119               	.equ SYSCALL_NUM_PUTSTRING, 	2
 120               	.equ SYSCALL_NUM_RESET_TIMER, 	3
 121               	.equ SYSCALL_NUM_SET_TIMER, 	4
 122               	.equ SYSCALL_NUM_SKIPMT,	5
 123               		
 124               	****************************************************************
 125               	*** プログラム領域
 126               	****************************************************************
 127               	.section .text
 128               	.even
 129               	MAIN:
 130               	
 131               	
 132               	
 133               	
 134               	
 135               	
 136               	
 137               	
 138               	
 139               	
 140               	****************************************************************
 141               	*** 初期値のあるデータ領域
 142               	****************************************************************
 143               	.section .data
 144 0000 2A2A 2A2A 	TMSG:	.ascii "******\r\n" 	| \r: 行頭へ (キャリッジリターン)
 144      2A2A 0D0A 
 145               	.even 				| \n: 次の行へ (ラインフィード)
 146 0008 0000      	TTC:	.dc.w 0
 147               	.even
 148               		
 149               	****************************************************************
 150               	*** 初期値の無いデータ領域
 151               	****************************************************************
 152               	.section .bss
 153 4004 0000 0000 	BUF: .ds.b 256 			| BUF[256]


 153      0000 0000 
 153      0000 0000 
 153      0000 0000 
 153      0000 0000 
 154               	.even
 155 4104 0000 0000 	USR_STK: .ds.b 0x4000 		| ユーザスタック領域
 155      0000 0000 
 155      0000 0000 
 155      0000 0000 
 155      0000 0000 
 156               	.even
 157               	USR_STK_TOP: 			| ユーザスタック領域の最後尾
 158               		
 159               		
 160               		
 161               		
 162               		
 163               	*******************************
 164               	.section .bss
 165 8104 0000 0000 	Queue0:		.ds.b	274	
 165      0000 0000 
 165      0000 0000 
 165      0000 0000 
 165      0000 0000 
 166 8216 0000 0000 	Queue1:		.ds.b	274
 166      0000 0000 
 166      0000 0000 
 166      0000 0000 
 166      0000 0000 
 167               	
 168               	.section .text
 169               		.equ	BF_START, 0
 170               		.equ	BF_END, 255
 171               		.equ	top, 256
 172               		.equ	out, 260
 173               		.equ	in, 264
 174               		.equ	bottom, 268
 175               		.equ	s, 272
 176               	
 177               	
 178               	**************************
 179               	**送受信割り込み
 180               	**************************
 181               		
 182               	uart1_interrupt:
 183 0064 48E7 F000 		movem.l %d0-%d3, -(%sp)      
 184               	
 185 0068 3039 00FF 		move.w 	UTX1, %d0
 185      F906 
 186 006e 0280 0000 		andi.l 	#0x8000, %d0
 186      8000 
 187 0074 6700 0008 		beq 	uart1_interrupt_receive
 188 0078 7200      		move.l 	#0, %d1
 189 007a 4EBA 01B6 		jsr 	INTERPUT
 190               		
 191               	uart1_interrupt_receive:
 192 007e 3639 00FF 		move.w 	URX1, %d3


 192      F904 
 193 0084 1403      		move.b	%d3, %d2
 194 0086 0283 0000 		andi.l	#0x2000, %d3
 194      2000 
 195 008c 6700 000C 		beq	uart1_interrupt_end
 196 0090 7200      		move.l 	#0, %d1
 197 0092 4EBA 0220 		jsr 	INTERGET
 198 0096 6000 0002 		bra	uart1_interrupt_end
 199               		
 200               	uart1_interrupt_end:	
 201 009a 4CDF 000F 		movem.l (%sp)+, %d0-%d3
 202 009e 4E73      		rte
 203               		
 204               	
 205               	***************************************
 206               	** タイマ用ハード割り込みインターフェース
 207               	***************************************
 208               	timer_interrupt:
 209 00a0 3039 00FF 	    move.w 	TSTAT1, %d0        	/*TSTATをd0レジスタに読み込み*/
 209      F60A 
 210 00a6 0240 0001 	    andi.w	#0x01, %d0
 211 00aa 0C40 0000 	    cmpi.w	#0, %d0			/*第0ビットを確認（1ならば割り込み発生）*/
 212 00ae 6700 000E 	    beq     	timer_interrupt_end	/*0ならば割り込み処理を終了*/
 213 00b2 33FC 0000 	    move.w  	#0, TSTAT1        	/*TSTATをリセット*/
 213      00FF F60A 
 214 00ba 4EBA 0276 	    jsr     	CALL_RP           	/*割り込み時に呼び出すルーチンを実行*/
 215               	timer_interrupt_end:
 216 00be 4E73      	    rte                       		/*割り込み終了*/
 217               	    
 218               	    
 219               	****************************
 220               	** SYSTEM_CALL
 221               	** 入力
 222               	** d0:システムコール番号
 223               	** d1以降:システムコールの引数
 224               	** 出力
 225               	** d0:システムコール呼び出しの結果
 226               	****************************
 227               	
 228               	SYSTEM_CALL:
 229               	
 230               	SYSTEM_CALL_SKIPMT:
 231 00c0 0C80 0000 		cmp.l	#5, %d0
 231      0005 
 232 00c6 6600 0008 		bne	SYSTEM_CALL1	
 233 00ca 4EBA FFD4 		jsr	timer_interrupt
 234 00ce 4E73      		rte
 235               		
 236               	SYSTEM_CALL1:	
 237 00d0 48E7 7000 		movem.l	%d1-%d3,-(%sp)		/*レジスタの退避*/
 238 00d4 0C80 0000 		cmp.l	#1,%d0
 238      0001 
 239 00da 6600 000A 		bne	SYSTEM_CALL2		/*システムコール番号が１でないならば分岐*/
 240 00de 4EBA 01EE 		jsr	GETSTRING		/*GETSTRINGを呼び出す*/
 241 00e2 6000 0034 		bra	SYSTEM_CALL_FINISH
 242               		
 243               	SYSTEM_CALL2:


 244 00e6 0C80 0000 		cmp.l	#2,%d0
 244      0002 
 245 00ec 6600 000A 		bne	SYSTEM_CALL3		/*システムコール番号が2でないならば分岐*/
 246 00f0 4EBA 017E 		jsr	PUTSTRING		/*PUTSTRINGを呼び出す*/
 247 00f4 6000 0022 		bra	SYSTEM_CALL_FINISH
 248               	
 249               	SYSTEM_CALL3:
 250 00f8 0C80 0000 		cmp.l	#3,%d0
 250      0003 
 251 00fe 6600 000A 		bne	SYSTEM_CALL4		/*システムコール番号が3でないならば分岐*/
 252 0102 4EBA 01FE 		jsr	RESET_TIMER		/*RESET_TIMERを呼び出す*/
 253 0106 6000 0010 		bra	SYSTEM_CALL_FINISH
 254               	
 255               	SYSTEM_CALL4:
 256 010a 0C80 0000 		cmp.l	#4,%d0
 256      0004 
 257 0110 6600 0006 		bne	SYSTEM_CALL_FINISH	/*システムコール番号が4でないならば分岐*/
 258 0114 4EBA 01F6 		jsr	SET_TIMER		/*SET_TIMERを呼び出す*/
 259               	
 260               	SYSTEM_CALL_FINISH:
 261 0118 4CDF 000E 		movem.l	(%sp)+,%d1-%d3		/*レジスタの復帰*/
 262 011c 4E73      		rte
 263               	    
 264               	    
 265               	***************************
 266               	**初期化処理
 267               	***************************
 268               	Init_Q:
 269 011e 4EBA 0008 		jsr 	Init_Q0
 270 0122 4EBA 002A 		jsr 	Init_Q1
 271 0126 4E75      		rts
 272               	
 273               	Init_Q0:
 274 0128 43F9 0000 		lea.l	Queue0, %a1
 274      0000 
 275 012e 2449      		move.l	%a1, %a2
 276 0130 D5FC 0000 		add.l	#BF_END, %a2
 276      00FF 
 277 0136 2349 0100 		move.l	%a1, top(%a1)
 278 013a 2349 0104 		move.l	%a1, out(%a1)
 279 013e 2349 0108 		move.l	%a1, in(%a1)
 280 0142 234A 010C 		move.l	%a2, bottom(%a1)
 281 0146 137C 0000 		move.b	#0x00, s(%a1)
 281      0110 
 282 014c 4E75      		rts
 283               	
 284               	Init_Q1:	
 285 014e 43F9 0000 		lea.l	Queue1, %a1
 285      0000 
 286 0154 2449      		move.l	%a1, %a2
 287 0156 D5FC 0000 		add.l	#BF_END, %a2
 287      00FF 
 288 015c 2349 0100 		move.l	%a1, top(%a1)
 289 0160 2349 0104 		move.l	%a1, out(%a1)
 290 0164 2349 0108 		move.l	%a1, in(%a1)
 291 0168 234A 010C 		move.l	%a2, bottom(%a1)
 292 016c 137C 0000 		move.b	#0x00, s(%a1)


 292      0110 
 293 0172 4E75      		rts
 294               	
 295               	****************************
 296               	**SelectQueue
 297               	****************************
 298               	SelectQueue:
 299 0174 227C 0000 		movea.l	#Queue0,%a1		/*a1はキューの先頭アドレス*/
 299      0000 
 300 017a 0C40 0000 		cmp	#0, %d0
 301 017e 6700 0010 		beq	End_SelectQueue
 302 0182 227C 0000 		movea.l	#Queue1,%a1
 302      0000 
 303 0188 0C40 0001 		cmp	#1, %d0
 304 018c 6700 0002 		beq	End_SelectQueue
 305               	End_SelectQueue:
 306 0190 4E75      		rts	
 307               	
 308               	*************************
 309               	INQ:
 310 0192 40E7      		move.w	 %SR, -(%sp)
 311 0194 46FC 2700 		move.w	#0x2700, %SR
 312 0198 48E7 20F0 		movem.l	%a0-%a3/%d2, -(%sp)	/*レジスタの退避*/
 313 019c 4EBA FFD6 		jsr	SelectQueue		/*SelectQueueで編集するキューの先頭をa1へ*/
 314 01a0 7000      		move.l	#0, %d0			/*失敗判定に使用*/
 315 01a2 4EBA 0026 		jsr	PUT_BUF
 316 01a6 4CDF 0F04 		movem.l	(%sp)+, %a0-%a3/%d2	/*レジスタの回復*/
 317 01aa 46DF      		move.w 	(%sp)+, %SR
 318 01ac 4E75      		rts
 319               	
 320               	OUTQ:
 321 01ae 40E7      		move.w 	%SR, -(%sp)
 322 01b0 46FC 2700 		move.w	#0x2700, %SR
 323 01b4 48E7 20F0 		movem.l	%a0-%a3/%d2, -(%sp)	/*レジスタの退避*/
 324 01b8 4EBA FFBA 		jsr	SelectQueue		/*SelectQueueで編集するキューの先頭をa1へ*/
 325 01bc 7000      		move.l	#0, %d0
 326 01be 4EBA 003E 		jsr	GET_BUF
 327 01c2 4CDF 0F04 		movem.l	(%sp)+, %a0-%a3/%d2	/*レジスタの回復*/
 328 01c6 46DF      		move.w 	(%sp)+, %SR
 329 01c8 4E75      		rts
 330               	
 331               	*************************
 332               	**PUT_BUF
 333               	** a1: キューの先頭アドレス
 334               	** a2: 比較用アドレスレジスタ
 335               	** a3: キュー内データの格納先アドレス
 336               	*************************
 337               	PUT_BUF:
 338 01ca 3429 0110 		move	s(%a1), %d2
 339 01ce 0C42 0100 		cmp	 #0x100, %d2
 340 01d2 6700 0028 		beq	END_PUT_BUF
 341 01d6 2669 0108 		movea.l in(%a1), %a3
 342 01da 1681      		move.b	%d1, (%a3)
 343 01dc 2469 010C 		movea.l	bottom(%a1), %a2
 344 01e0 B5E9 0108 		cmpa.l	in(%a1), %a2
 345 01e4 6700 000A 		beq	STEP1_PUT_BUF
 346 01e8 52A9 0108 		add.l	#1, in(%a1)


 347 01ec 6000 0008 		bra	STEP2_PUT_BUF
 348               	
 349               	STEP1_PUT_BUF:
 350 01f0 2369 0100 		move.l	top(%a1), in(%a1)
 350      0108 
 351               	
 352               	
 353               	STEP2_PUT_BUF:
 354 01f6 5269 0110 		addq	#1, s(%a1)
 355 01fa 7001      		move.l	#1, %d0			/*書き込み成功*/
 356               	
 357               	END_PUT_BUF:	
 358 01fc 4E75      		rts
 359               	
 360               	
 361               	****************************
 362               	**GET_BUF
 363               	** a1: キューの先頭アドレス
 364               	** a2: 比較用アドレスレジスタ
 365               	** a3: キュー内データの読み出し元アドレス
 366               	***************************	
 367               	GET_BUF:	
 368 01fe 3429 0110 		move	s(%a1), %d2
 369 0202 0C42 0000 		cmp	 #0x0, %d2
 370 0206 6700 0028 		beq	END_GET_BUF
 371 020a 2669 0104 		movea.l out(%a1), %a3
 372 020e 1213      		move.b	(%a3), %d1
 373 0210 2469 010C 		movea.l	bottom(%a1), %a2
 374 0214 B5E9 0104 		cmpa.l	out(%a1), %a2
 375 0218 6700 000A 		beq	STEP1_GET_BUF
 376 021c 52A9 0104 		add.l	#1, out(%a1)
 377 0220 6000 0008 		bra	STEP2_GET_BUF
 378               	
 379               	STEP1_GET_BUF:
 380 0224 2369 0100 		move.l	top(%a1), out(%a1)
 380      0104 
 381               	
 382               	
 383               	STEP2_GET_BUF:
 384 022a 5369 0110 		subq	#1, s(%a1)
 385 022e 7001      		move.l	#1, %d0			/*書き込み成功*/
 386               	
 387               	END_GET_BUF:	
 388 0230 4E75      		rts
 389               	
 390               	**********************
 391               	** INTERPUT
 392               	** 入力: ch ->　d1
 393               	**********************
 394               	INTERPUT:
 395 0232 48E7 00F0 		movem.l %a0-%a3, -(%sp)		
 396 0236 40E7      		move.w 	%SR, -(%sp)
 397 0238 46FC 2700 		move.w 	#0x2700, %SR		/*走行レベル7に設定*/
 398               	
 399 023c 0C41 0000 		cmp 	#0, %d1
 400 0240 6600 0026 		bne 	END_INTERPUT		/*ch!=0なら何もせず復帰*/
 401               	


 402 0244 7001      		moveq.l #1, %d0
 403 0246 4EBA FF66 		jsr 	OUTQ			/*OUTQ(1,%d1)を実行*/
 404               		
 405 024a 0C00 0000 		cmp.b 	#0, %d0
 406 024e 6600 000E 		bne 	OUTQ_FAIL		/*OUTQが失敗なら送信割り込みをマスク*/
 407               	
 408 0252 33FC E108 		move.w 	#0xe108, USTCNT1	/*送信割り込みをマスク*/
 408      00FF F900 
 409 025a 6000 000C 		bra 	END_INTERPUT
 410               	
 411               	OUTQ_FAIL:
 412 025e 0641 0800 		add.w 	#0x800, %d1		/*ヘッダ付与*/
 413 0262 33C1 00FF 		move.w 	%d1, UTX1		/*UTX1に送信*/
 413      F906 
 414               	
 415               	END_INTERPUT:
 416 0268 46DF      		move.w 	(%sp)+, %SR
 417 026a 4CDF 0F00 		movem.l (%sp)+, %a0-%a3
 418 026e 4E75      		rts
 419               	
 420               	
 421               	******************
 422               	**PUTSTRING
 423               	** 入力:
 424               	**	ch ->　d1
 425               	**	p  ->　d2
 426               	**	size ->　d3
 427               	** 出力:
 428               	**	実際送信したデータ数->d0 
 429               	******************
 430               	
 431               	PUTSTRING:
 432 0270 48E7 7880 		movem.l %d1-%d4/%a0, -(%sp)
 433 0274 0C41 0000 		cmp 	#0, %d1
 434 0278 6600 0034 		bne 	END_PUTSTRING		/*ch≠0ならなにもせず復帰*/
 435 027c 7800      		move.l	 #0, %d4		| sz<-0
 436 027e 2042      		move.l 	%d2, %a0		| i<-p
 437 0280 0C43 0000 		cmp 	#0, %d3
 438 0284 6700 0026 		beq 	PUTSTRING_STEP3		/*size=0なら分岐*/
 439               	
 440               	PUTSTRING_STEP1:
 441 0288 B644      		cmp 	%d4, %d3
 442 028a 6700 0018 		beq 	PUTSTRING_STEP2		/*sz=sizeなら分岐*/
 443 028e 7001      		move.l	 #1, %d0
 444 0290 1218      		move.b 	(%a0)+, %d1
 445 0292 4EBA FEFE 		jsr 	INQ
 446 0296 0C40 0000 		cmp 	#0, %d0
 447 029a 6700 0008 		beq 	PUTSTRING_STEP2		/*INQ失敗なら分岐*/
 448 029e 5244      		add 	#1, %d4			| sz++
 449 02a0 6000 FFE6 		bra 	PUTSTRING_STEP1
 450               	
 451               	PUTSTRING_STEP2:
 452 02a4 33FC E10C 		move.w 	#0xe10c, USTCNT1	/*送信割り込み許可*/
 452      00FF F900 
 453               	
 454               	PUTSTRING_STEP3:
 455 02ac 2004      		move.l 	%d4, %d0


 456               	
 457               	END_PUTSTRING:
 458 02ae 4CDF 011E 		movem.l (%sp)+, %d1-%d4/%a0
 459 02b2 4E75      		rts
 460               	    
 461               	*******************
 462               	** INTERGET
 463               	** 入力: ch->d1
 464               	**	 data->d2
 465               	******************
 466               	
 467               	INTERGET:
 468 02b4 48E7 E000 		movem.l	%d0-%d2, -(%sp)		/*レジスタの退避*/
 469 02b8 0C01 0000 		cmpi.b	#0, %d1
 470 02bc 6600 000A 		bne	END_INTERGET		/*ch=0なら何もせず復帰*/
 471 02c0 7000      		move.l	#0x0, %d0
 472 02c2 2202      		move.l	%d2, %d1
 473 02c4 4EBA FECC 		jsr	INQ			/*OUTQ(1,%d1)を実行*/
 474               	
 475               	END_INTERGET:
 476 02c8 4CDF 0007 		movem.l	(%sp)+, %d0-%d2		/*レジスタの回復*/
 477 02cc 4E75      		rts
 478               	
 479               	
 480               	************
 481               	** GETSTRING
 482               	** 入力:ch -> d1
 483               	**	p  -> d2 /* データ書き込み先の先頭アドレス*/
 484               	**	size ->d3 /*取り出すデータサイズ*/
 485               	** 戻り値: sz ->d0	
 486               	*************
 487               	
 488               	GETSTRING:
 489 02ce 48E7 7880 		movem.l	%d1-%d4/%a0, -(%sp)		/*レジスタの退避*/
 490 02d2 0C01 0000 		cmpi.b	#0, %d1				/*chが0以外なら何もしない*/
 491 02d6 6600 0022 		bne	END_GETSTRING
 492 02da 7800      		move.l	#0, %d4				/*%d4をszとして使用*/
 493 02dc 2042      		movea.l	%d2, %a0			/*%a0をiとして使用*/
 494               		
 495               	GETSTRING_LOOP:	
 496 02de B843      		cmp	%d3, %d4			/*sz = sizeならば分岐*/
 497 02e0 6700 0018 		beq	END_GETSTRING	
 498 02e4 7000      		move.l	#0, %d0				/*受信キューを指定*/
 499 02e6 4EBA FEC6 		jsr	OUTQ				/*OUTQにより受信キューからデータ読み込み*/
 500 02ea 0C00 0000 		cmpi.b	#0, %d0				/*OUTQが失敗ならば分岐*/
 501 02ee 6700 000A 		beq	END_GETSTRING
 502 02f2 10C1      		move.b	%d1, (%a0)+			/*i番地にdataをコピーし、i++*/
 503 02f4 5284      		addq.l	#1, %d4				/*sz++*/
 504 02f6 6000 FFE6 		bra	GETSTRING_LOOP
 505               	
 506               	END_GETSTRING:
 507 02fa 2004      		move.l	%d4, %d0			/*sz -> %d0*/
 508 02fc 4CDF 011E 		movem.l	(%sp)+, %d1-%d4/%a0		/*レジスタの回復*/
 509 0300 4E75      		rts
 510               	
 511               	**********************
 512               	** RESET_TIMER


 513               	** TCTLを割り込み不可に設定
 514               	**********************
 515               		
 516               	RESET_TIMER:
 517 0302 33FC 0004 		move.w	#0x0004, TCTL1			/* TCTLを割り込み不可*/
 517      00FF F600 
 518 030a 4E75      		rts
 519               	
 520               	
 521               		
 522               	**********************
 523               	** SET_TIMER
 524               	** 入力
 525               	** タイマ割り込み発生周期t -> %d1	
 526               	** 割り込み時に起動するルーチンの先頭アドレス-> %d2
 527               	**********************
 528               		
 529               	SET_TIMER:
 530 030c 48E7 6000 		movem.l	%d1-%d2, -(%sp)	/* レジスタ退避 */
 531 0310 23C2 0000 		move.l	%d2, task_p	/* 先頭アドレスをtask_pへ代入 */
 531      0000 
 532 0316 33F8 00CE 		move.w	206, TPRER1	/* TPRERを206に設定 */
 532      00FF F602 
 533 031e 33C1 00FF 		move.w	%d1, TCMP1	/* 割り込み発生周期をTCMPへ */
 533      F604 
 534 0324 33FC 0015 		move.w	#0x0015, TCTL1	/* TCTLを割り込み許可 */
 534      00FF F600 
 535 032c 4CDF 0006 		movem.l	(%sp)+, %d1-%d2	/* レジスタの回復 */
 536 0330 4E75      		rts
 537               	
 538               	
 539               	****************************
 540               	** CALL_RP
 541               	** タイマ割り込み時に処理すべきルーチンを呼び出す
 542               	****************************
 543               	
 544               	CALL_RP:
 545 0332 48E7 0080 		movem.l	%a0, -(%sp)
 546 0336 2079 0000 		movea.l	(task_p), %a0
 546      0000 
 547 033c 4E90      		jsr	(%a0)		/* task_pが指すアドレスへジャンプ */
 548 033e 4CDF 0100 		movem.l	(%sp)+, %a0
 549 0342 4E75      		rts
 550               	
 551               	.end




   1               	#NO_APP
   2               		.file	"csys68k.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	read
   8               		.type	read, @function
   9               	read:
  10               	.LVL0:
  11               	.LFB0:
  12               		.file 1 "csys68k.c"
   1:csys68k.c     **** extern void outbyte(unsigned char c);
   2:csys68k.c     **** extern char inbyte();
   3:csys68k.c     **** 
   4:csys68k.c     **** int read(int fd, char *buf, int nbytes)
   5:csys68k.c     **** {
  13               		.loc 1 5 1 view -0
  14               		.cfi_startproc
  15               		.loc 1 5 1 is_stmt 0 view .LVU1
  16 0000 48E7 3838 		movem.l #14392,-(%sp)
  17               		.cfi_def_cfa_offset 28
  18               		.cfi_offset 2, -28
  19               		.cfi_offset 3, -24
  20               		.cfi_offset 4, -20
  21               		.cfi_offset 10, -16
  22               		.cfi_offset 11, -12
  23               		.cfi_offset 12, -8
  24 0004 286F 0020 		move.l 32(%sp),%a4
  25 0008 282F 0024 		move.l 36(%sp),%d4
   6:csys68k.c     ****   char c;
  26               		.loc 1 6 3 is_stmt 1 view .LVU2
   7:csys68k.c     ****   int  i;
  27               		.loc 1 7 3 view .LVU3
   8:csys68k.c     **** 
   9:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
  28               		.loc 1 9 3 view .LVU4
  29               	.LVL1:
  30               		.loc 1 9 17 view .LVU5
  31               		.loc 1 9 10 is_stmt 0 view .LVU6
  32 000c 7600      		moveq #0,%d3
  33               		.loc 1 9 17 view .LVU7
  34 000e 4A84      		tst.l %d4
  35 0010 6F36      		jle .L1
  36 0012 47F9 0000 		lea inbyte,%a3
  36      0000 
  37 0018 45F9 0000 		lea outbyte,%a2
  37      0000 
  38               	.LVL2:
  39               	.L8:
  10:csys68k.c     ****     c = inbyte();
  40               		.loc 1 10 5 is_stmt 1 view .LVU8
  41               		.loc 1 10 9 is_stmt 0 view .LVU9
  42 001e 4E93      		jsr (%a3)
  43               	.LVL3:
  44 0020 1400      		move.b %d0,%d2
  45               	.LVL4:


  11:csys68k.c     **** 
  12:csys68k.c     ****     if (c == '\r' || c == '\n'){ /* CR -> CRLF */
  46               		.loc 1 12 5 is_stmt 1 view .LVU10
  47               		.loc 1 12 8 is_stmt 0 view .LVU11
  48 0022 0C00 000D 		cmp.b #13,%d0
  49 0026 6728      		jeq .L3
  50               		.loc 1 12 19 discriminator 1 view .LVU12
  51 0028 0C00 000A 		cmp.b #10,%d0
  52 002c 6722      		jeq .L3
  13:csys68k.c     ****       outbyte('\r');
  14:csys68k.c     ****       outbyte('\n');
  15:csys68k.c     ****       *(buf + i) = '\n';
  16:csys68k.c     **** 
  17:csys68k.c     ****     /* } else if (c == '\x8'){ */     /* backspace \x8 */
  18:csys68k.c     ****     } else if (c == '\x7f'){      /* backspace \x8 -> \x7f (by terminal config.) */
  53               		.loc 1 18 12 is_stmt 1 view .LVU13
  54               		.loc 1 18 15 is_stmt 0 view .LVU14
  55 002e 0C00 007F 		cmp.b #127,%d0
  56 0032 673A      		jeq .L18
  19:csys68k.c     ****       if (i > 0){
  20:csys68k.c     **** 	outbyte('\x8'); /* bs  */
  21:csys68k.c     **** 	outbyte(' ');   /* spc */
  22:csys68k.c     **** 	outbyte('\x8'); /* bs  */
  23:csys68k.c     **** 	i--;
  24:csys68k.c     ****       }
  25:csys68k.c     ****       i--;
  26:csys68k.c     ****       continue;
  27:csys68k.c     **** 
  28:csys68k.c     ****     } else {
  29:csys68k.c     ****       outbyte(c);
  57               		.loc 1 29 7 is_stmt 1 view .LVU15
  58 0034 7000      		moveq #0,%d0
  59               	.LVL5:
  60               		.loc 1 29 7 is_stmt 0 view .LVU16
  61 0036 1002      		move.b %d2,%d0
  62 0038 2F00      		move.l %d0,-(%sp)
  63               		.cfi_def_cfa_offset 32
  64 003a 4E92      		jsr (%a2)
  65               	.LVL6:
  30:csys68k.c     ****       *(buf + i) = c;
  66               		.loc 1 30 7 is_stmt 1 view .LVU17
  67               		.loc 1 30 18 is_stmt 0 view .LVU18
  68 003c 1982 3800 		move.b %d2,(%a4,%d3.l)
  31:csys68k.c     ****     }
  32:csys68k.c     **** 
  33:csys68k.c     ****     if (*(buf + i) == '\n'){
  69               		.loc 1 33 5 is_stmt 1 view .LVU19
  34:csys68k.c     ****       return (i + 1);
  70               		.loc 1 34 17 is_stmt 0 view .LVU20
  71 0040 5283      		addq.l #1,%d3
  72               	.LVL7:
  73               		.loc 1 34 17 view .LVU21
  74 0042 588F      		addq.l #4,%sp
  75               		.cfi_def_cfa_offset 28
  76               	.LVL8:
   9:csys68k.c     ****     c = inbyte();
  77               		.loc 1 9 28 is_stmt 1 view .LVU22


   9:csys68k.c     ****     c = inbyte();
  78               		.loc 1 9 17 view .LVU23
  79 0044 B684      		cmp.l %d4,%d3
  80 0046 6DD6      		jlt .L8
  81               	.LVL9:
  82               	.L1:
  35:csys68k.c     ****     }
  36:csys68k.c     ****   }
  37:csys68k.c     ****   return (i);
  38:csys68k.c     **** }
  83               		.loc 1 38 1 is_stmt 0 view .LVU24
  84 0048 2003      		move.l %d3,%d0
  85 004a 4CDF 1C1C 		movem.l (%sp)+,#7196
  86 004e 4E75      		rts
  87               	.LVL10:
  88               	.L3:
  13:csys68k.c     ****       outbyte('\n');
  89               		.loc 1 13 7 is_stmt 1 view .LVU25
  90 0050 4878 000D 		pea 13.w
  91               		.cfi_def_cfa_offset 32
  92 0054 4E92      		jsr (%a2)
  93               	.LVL11:
  14:csys68k.c     ****       *(buf + i) = '\n';
  94               		.loc 1 14 7 view .LVU26
  95 0056 4878 000A 		pea 10.w
  96               		.cfi_def_cfa_offset 36
  97 005a 4E92      		jsr (%a2)
  98               	.LVL12:
  15:csys68k.c     **** 
  99               		.loc 1 15 7 view .LVU27
  15:csys68k.c     **** 
 100               		.loc 1 15 18 is_stmt 0 view .LVU28
 101 005c 19BC 000A 		move.b #10,(%a4,%d3.l)
 101      3800 
  33:csys68k.c     ****       return (i + 1);
 102               		.loc 1 33 5 is_stmt 1 view .LVU29
  34:csys68k.c     ****     }
 103               		.loc 1 34 7 view .LVU30
  34:csys68k.c     ****     }
 104               		.loc 1 34 17 is_stmt 0 view .LVU31
 105 0062 5283      		addq.l #1,%d3
 106               	.LVL13:
  34:csys68k.c     ****     }
 107               		.loc 1 34 17 view .LVU32
 108 0064 508F      		addq.l #8,%sp
 109               		.cfi_def_cfa_offset 28
 110               		.loc 1 38 1 view .LVU33
 111 0066 2003      		move.l %d3,%d0
 112 0068 4CDF 1C1C 		movem.l (%sp)+,#7196
 113               	.LVL14:
 114               		.loc 1 38 1 view .LVU34
 115 006c 4E75      		rts
 116               	.LVL15:
 117               	.L18:
  19:csys68k.c     **** 	outbyte('\x8'); /* bs  */
 118               		.loc 1 19 7 is_stmt 1 view .LVU35
  19:csys68k.c     **** 	outbyte('\x8'); /* bs  */


 119               		.loc 1 19 10 is_stmt 0 view .LVU36
 120 006e 4A83      		tst.l %d3
 121 0070 67AC      		jeq .L8
  23:csys68k.c     ****       }
 122               		.loc 1 23 3 view .LVU37
 123 0072 5383      		subq.l #1,%d3
 124               	.LVL16:
  20:csys68k.c     **** 	outbyte(' ');   /* spc */
 125               		.loc 1 20 2 is_stmt 1 view .LVU38
 126 0074 4878 0008 		pea 8.w
 127               		.cfi_def_cfa_offset 32
 128 0078 4E92      		jsr (%a2)
 129               	.LVL17:
  21:csys68k.c     **** 	outbyte('\x8'); /* bs  */
 130               		.loc 1 21 2 view .LVU39
 131 007a 4878 0020 		pea 32.w
 132               		.cfi_def_cfa_offset 36
 133 007e 4E92      		jsr (%a2)
 134               	.LVL18:
  22:csys68k.c     **** 	i--;
 135               		.loc 1 22 2 view .LVU40
 136 0080 4878 0008 		pea 8.w
 137               		.cfi_def_cfa_offset 40
 138 0084 4E92      		jsr (%a2)
 139               	.LVL19:
  23:csys68k.c     ****       }
 140               		.loc 1 23 2 view .LVU41
  25:csys68k.c     ****       continue;
 141               		.loc 1 25 7 view .LVU42
  26:csys68k.c     **** 
 142               		.loc 1 26 7 view .LVU43
 143 0086 4FEF 000C 		lea (12,%sp),%sp
 144               		.cfi_def_cfa_offset 28
 145               	.LVL20:
   9:csys68k.c     ****     c = inbyte();
 146               		.loc 1 9 28 view .LVU44
   9:csys68k.c     ****     c = inbyte();
 147               		.loc 1 9 17 view .LVU45
 148 008a B684      		cmp.l %d4,%d3
 149 008c 6D90      		jlt .L8
 150 008e 60B8      		jra .L1
 151               		.cfi_endproc
 152               	.LFE0:
 153               		.size	read, .-read
 154               		.align	2
 155               		.globl	write
 156               		.type	write, @function
 157               	write:
 158               	.LVL21:
 159               	.LFB1:
  39:csys68k.c     **** 
  40:csys68k.c     **** int write (int fd, char *buf, int nbytes)
  41:csys68k.c     **** {
 160               		.loc 1 41 1 view -0
 161               		.cfi_startproc
 162               		.loc 1 41 1 is_stmt 0 view .LVU47
 163 0090 48E7 3030 		movem.l #12336,-(%sp)


 164               		.cfi_def_cfa_offset 20
 165               		.cfi_offset 2, -20
 166               		.cfi_offset 3, -16
 167               		.cfi_offset 10, -12
 168               		.cfi_offset 11, -8
 169 0094 262F 001C 		move.l 28(%sp),%d3
  42:csys68k.c     ****   int i, j;
 170               		.loc 1 42 3 is_stmt 1 view .LVU48
  43:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
 171               		.loc 1 43 3 view .LVU49
 172               	.LVL22:
 173               		.loc 1 43 17 view .LVU50
 174 0098 6F26      		jle .L25
 175 009a 246F 0018 		move.l 24(%sp),%a2
 176 009e 240A      		move.l %a2,%d2
 177 00a0 D483      		add.l %d3,%d2
 178 00a2 47F9 0000 		lea outbyte,%a3
 178      0000 
 179               	.LVL23:
 180               	.L22:
  44:csys68k.c     ****     if (*(buf + i) == '\n') {
 181               		.loc 1 44 5 view .LVU51
 182               		.loc 1 44 9 is_stmt 0 view .LVU52
 183 00a8 101A      		move.b (%a2)+,%d0
 184               	.LVL24:
 185               		.loc 1 44 8 view .LVU53
 186 00aa 0C00 000A 		cmp.b #10,%d0
 187 00ae 6718      		jeq .L28
  45:csys68k.c     ****       outbyte ('\r');          /* LF -> CRLF */
  46:csys68k.c     ****     }
  47:csys68k.c     ****     outbyte (*(buf + i));
 188               		.loc 1 47 5 is_stmt 1 view .LVU54
 189 00b0 0280 0000 		and.l #255,%d0
 189      00FF 
 190 00b6 2F00      		move.l %d0,-(%sp)
 191               		.cfi_def_cfa_offset 24
 192 00b8 4E93      		jsr (%a3)
 193               	.LVL25:
  48:csys68k.c     ****     for (j = 0; j < 300; j++);
 194               		.loc 1 48 5 view .LVU55
 195               		.loc 1 48 19 view .LVU56
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 196               		.loc 1 43 28 view .LVU57
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 197               		.loc 1 43 17 view .LVU58
 198 00ba 588F      		addq.l #4,%sp
 199               		.cfi_def_cfa_offset 20
 200 00bc B48A      		cmp.l %a2,%d2
 201 00be 66E8      		jne .L22
 202               	.LVL26:
 203               	.L25:
  49:csys68k.c     ****   }
  50:csys68k.c     ****   return (nbytes);
  51:csys68k.c     **** }
 204               		.loc 1 51 1 is_stmt 0 view .LVU59
 205 00c0 2003      		move.l %d3,%d0
 206 00c2 4CDF 0C0C 		movem.l (%sp)+,#3084


 207 00c6 4E75      		rts
 208               	.LVL27:
 209               	.L28:
  45:csys68k.c     ****     }
 210               		.loc 1 45 7 is_stmt 1 view .LVU60
 211 00c8 4878 000D 		pea 13.w
 212               		.cfi_def_cfa_offset 24
 213 00cc 4E93      		jsr (%a3)
 214               	.LVL28:
  47:csys68k.c     ****     for (j = 0; j < 300; j++);
 215               		.loc 1 47 14 is_stmt 0 view .LVU61
 216 00ce 102A FFFF 		move.b -1(%a2),%d0
 217 00d2 588F      		addq.l #4,%sp
 218               		.cfi_def_cfa_offset 20
  47:csys68k.c     ****     for (j = 0; j < 300; j++);
 219               		.loc 1 47 5 is_stmt 1 view .LVU62
 220 00d4 0280 0000 		and.l #255,%d0
 220      00FF 
 221 00da 2F00      		move.l %d0,-(%sp)
 222               		.cfi_def_cfa_offset 24
 223 00dc 4E93      		jsr (%a3)
 224               	.LVL29:
  48:csys68k.c     ****   }
 225               		.loc 1 48 5 view .LVU63
  48:csys68k.c     ****   }
 226               		.loc 1 48 19 view .LVU64
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 227               		.loc 1 43 28 view .LVU65
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 228               		.loc 1 43 17 view .LVU66
 229 00de 588F      		addq.l #4,%sp
 230               		.cfi_def_cfa_offset 20
 231 00e0 B48A      		cmp.l %a2,%d2
 232 00e2 66C4      		jne .L22
 233 00e4 60DA      		jra .L25
 234               		.cfi_endproc
 235               	.LFE1:
 236               		.size	write, .-write
 237               	.Letext0:
 238               		.section	.debug_info,"",@progbits
 239               	.Ldebug_info0:
 240 0000 0000 017B 		.long	0x17b
 241 0004 0005      		.word	0x5
 242 0006 01        		.byte	0x1
 243 0007 04        		.byte	0x4
 244 0008 0000 0000 		.long	.Ldebug_abbrev0
 245 000c 06        		.uleb128 0x6
 246 000d 0000 0000 		.long	.LASF5
 247 0011 1D        		.byte	0x1d
 248 0012 0000 0000 		.long	.LASF6
 249 0016 0000 0000 		.long	.LASF7
 250 001a 0000 0000 		.long	.Ltext0
 251 001e 0000 00E6 		.long	.Letext0-.Ltext0
 252 0022 0000 0000 		.long	.Ldebug_line0
 253 0026 07        		.uleb128 0x7
 254 0027 0000 0000 		.long	.LASF0
 255 002b 01        		.byte	0x1


 256 002c 01        		.byte	0x1
 257 002d 0D        		.byte	0xd
 258 002e 0000 0038 		.long	0x38
 259 0032 08        		.uleb128 0x8
 260 0033 0000 0038 		.long	0x38
 261 0037 00        		.byte	0
 262 0038 04        		.uleb128 0x4
 263 0039 08        		.byte	0x8
 264 003a 0000 0000 		.long	.LASF2
 265 003e 09        		.uleb128 0x9
 266 003f 0000 0000 		.long	.LASF1
 267 0043 01        		.byte	0x1
 268 0044 02        		.byte	0x2
 269 0045 0D        		.byte	0xd
 270 0046 0000 0050 		.long	0x50
 271 004a 0000 0050 		.long	0x50
 272 004e 0A        		.uleb128 0xa
 273 004f 00        		.byte	0
 274 0050 04        		.uleb128 0x4
 275 0051 06        		.byte	0x6
 276 0052 0000 0000 		.long	.LASF3
 277 0056 0B        		.uleb128 0xb
 278 0057 0000 0000 		.long	.LASF8
 279 005b 01        		.byte	0x1
 280 005c 28        		.byte	0x28
 281 005d 05        		.byte	0x5
 282 005e 0000 00D0 		.long	0xd0
 283 0062 0000 0000 		.long	.LFB1
 284 0066 0000 0056 		.long	.LFE1-.LFB1
 285 006a 01        		.uleb128 0x1
 286 006b 9C        		.byte	0x9c
 287 006c 0000 00D0 		.long	0xd0
 288 0070 02        		.uleb128 0x2
 289 0071 6664 00   		.string	"fd"
 290 0074 28        		.byte	0x28
 291 0075 10        		.byte	0x10
 292 0076 0000 00D0 		.long	0xd0
 293 007a 02        		.uleb128 0x2
 294 007b 91        		.byte	0x91
 295 007c 00        		.sleb128 0
 296 007d 02        		.uleb128 0x2
 297 007e 6275 6600 		.string	"buf"
 298 0082 28        		.byte	0x28
 299 0083 1A        		.byte	0x1a
 300 0084 0000 00D7 		.long	0xd7
 301 0088 02        		.uleb128 0x2
 302 0089 91        		.byte	0x91
 303 008a 04        		.sleb128 4
 304 008b 05        		.uleb128 0x5
 305 008c 0000 0000 		.long	.LASF4
 306 0090 28        		.byte	0x28
 307 0091 23        		.byte	0x23
 308 0092 0000 00D0 		.long	0xd0
 309 0096 02        		.uleb128 0x2
 310 0097 91        		.byte	0x91
 311 0098 08        		.sleb128 8
 312 0099 03        		.uleb128 0x3


 313 009a 6900      		.string	"i"
 314 009c 2A        		.byte	0x2a
 315 009d 07        		.byte	0x7
 316 009e 0000 00D0 		.long	0xd0
 317 00a2 0000 0000 		.long	.LLST2
 318 00a6 0000 0000 		.long	.LVUS2
 319 00aa 0C        		.uleb128 0xc
 320 00ab 6A00      		.string	"j"
 321 00ad 01        		.byte	0x1
 322 00ae 2A        		.byte	0x2a
 323 00af 0A        		.byte	0xa
 324 00b0 0000 00D0 		.long	0xd0
 325 00b4 01        		.uleb128 0x1
 326 00b5 0000 0000 		.long	.LVL25
 327 00b9 0000 0026 		.long	0x26
 328 00bd 01        		.uleb128 0x1
 329 00be 0000 0000 		.long	.LVL28
 330 00c2 0000 0026 		.long	0x26
 331 00c6 01        		.uleb128 0x1
 332 00c7 0000 0000 		.long	.LVL29
 333 00cb 0000 0026 		.long	0x26
 334 00cf 00        		.byte	0
 335 00d0 0D        		.uleb128 0xd
 336 00d1 04        		.byte	0x4
 337 00d2 05        		.byte	0x5
 338 00d3 696E 7400 		.string	"int"
 339 00d7 0E        		.uleb128 0xe
 340 00d8 04        		.byte	0x4
 341 00d9 0000 0050 		.long	0x50
 342 00dd 0F        		.uleb128 0xf
 343 00de 0000 0000 		.long	.LASF9
 344 00e2 01        		.byte	0x1
 345 00e3 04        		.byte	0x4
 346 00e4 05        		.byte	0x5
 347 00e5 0000 00D0 		.long	0xd0
 348 00e9 0000 0000 		.long	.LFB0
 349 00ed 0000 0090 		.long	.LFE0-.LFB0
 350 00f1 01        		.uleb128 0x1
 351 00f2 9C        		.byte	0x9c
 352 00f3 02        		.uleb128 0x2
 353 00f4 6664 00   		.string	"fd"
 354 00f7 04        		.byte	0x4
 355 00f8 0E        		.byte	0xe
 356 00f9 0000 00D0 		.long	0xd0
 357 00fd 02        		.uleb128 0x2
 358 00fe 91        		.byte	0x91
 359 00ff 00        		.sleb128 0
 360 0100 02        		.uleb128 0x2
 361 0101 6275 6600 		.string	"buf"
 362 0105 04        		.byte	0x4
 363 0106 18        		.byte	0x18
 364 0107 0000 00D7 		.long	0xd7
 365 010b 02        		.uleb128 0x2
 366 010c 91        		.byte	0x91
 367 010d 04        		.sleb128 4
 368 010e 05        		.uleb128 0x5
 369 010f 0000 0000 		.long	.LASF4


 370 0113 04        		.byte	0x4
 371 0114 21        		.byte	0x21
 372 0115 0000 00D0 		.long	0xd0
 373 0119 02        		.uleb128 0x2
 374 011a 91        		.byte	0x91
 375 011b 08        		.sleb128 8
 376 011c 03        		.uleb128 0x3
 377 011d 6300      		.string	"c"
 378 011f 06        		.byte	0x6
 379 0120 08        		.byte	0x8
 380 0121 0000 0050 		.long	0x50
 381 0125 0000 0000 		.long	.LLST0
 382 0129 0000 0000 		.long	.LVUS0
 383 012d 03        		.uleb128 0x3
 384 012e 6900      		.string	"i"
 385 0130 07        		.byte	0x7
 386 0131 08        		.byte	0x8
 387 0132 0000 00D0 		.long	0xd0
 388 0136 0000 0000 		.long	.LLST1
 389 013a 0000 0000 		.long	.LVUS1
 390 013e 01        		.uleb128 0x1
 391 013f 0000 0000 		.long	.LVL3
 392 0143 0000 003E 		.long	0x3e
 393 0147 01        		.uleb128 0x1
 394 0148 0000 0000 		.long	.LVL6
 395 014c 0000 0026 		.long	0x26
 396 0150 01        		.uleb128 0x1
 397 0151 0000 0000 		.long	.LVL11
 398 0155 0000 0026 		.long	0x26
 399 0159 01        		.uleb128 0x1
 400 015a 0000 0000 		.long	.LVL12
 401 015e 0000 0026 		.long	0x26
 402 0162 01        		.uleb128 0x1
 403 0163 0000 0000 		.long	.LVL17
 404 0167 0000 0026 		.long	0x26
 405 016b 01        		.uleb128 0x1
 406 016c 0000 0000 		.long	.LVL18
 407 0170 0000 0026 		.long	0x26
 408 0174 01        		.uleb128 0x1
 409 0175 0000 0000 		.long	.LVL19
 410 0179 0000 0026 		.long	0x26
 411 017d 00        		.byte	0
 412 017e 00        		.byte	0
 413               		.section	.debug_abbrev,"",@progbits
 414               	.Ldebug_abbrev0:
 415 0000 01        		.uleb128 0x1
 416 0001 48        		.uleb128 0x48
 417 0002 00        		.byte	0
 418 0003 7D        		.uleb128 0x7d
 419 0004 01        		.uleb128 0x1
 420 0005 7F        		.uleb128 0x7f
 421 0006 13        		.uleb128 0x13
 422 0007 00        		.byte	0
 423 0008 00        		.byte	0
 424 0009 02        		.uleb128 0x2
 425 000a 05        		.uleb128 0x5
 426 000b 00        		.byte	0


 427 000c 03        		.uleb128 0x3
 428 000d 08        		.uleb128 0x8
 429 000e 3A        		.uleb128 0x3a
 430 000f 21        		.uleb128 0x21
 431 0010 01        		.sleb128 1
 432 0011 3B        		.uleb128 0x3b
 433 0012 0B        		.uleb128 0xb
 434 0013 39        		.uleb128 0x39
 435 0014 0B        		.uleb128 0xb
 436 0015 49        		.uleb128 0x49
 437 0016 13        		.uleb128 0x13
 438 0017 02        		.uleb128 0x2
 439 0018 18        		.uleb128 0x18
 440 0019 00        		.byte	0
 441 001a 00        		.byte	0
 442 001b 03        		.uleb128 0x3
 443 001c 34        		.uleb128 0x34
 444 001d 00        		.byte	0
 445 001e 03        		.uleb128 0x3
 446 001f 08        		.uleb128 0x8
 447 0020 3A        		.uleb128 0x3a
 448 0021 21        		.uleb128 0x21
 449 0022 01        		.sleb128 1
 450 0023 3B        		.uleb128 0x3b
 451 0024 0B        		.uleb128 0xb
 452 0025 39        		.uleb128 0x39
 453 0026 0B        		.uleb128 0xb
 454 0027 49        		.uleb128 0x49
 455 0028 13        		.uleb128 0x13
 456 0029 02        		.uleb128 0x2
 457 002a 17        		.uleb128 0x17
 458 002b B742      		.uleb128 0x2137
 459 002d 17        		.uleb128 0x17
 460 002e 00        		.byte	0
 461 002f 00        		.byte	0
 462 0030 04        		.uleb128 0x4
 463 0031 24        		.uleb128 0x24
 464 0032 00        		.byte	0
 465 0033 0B        		.uleb128 0xb
 466 0034 21        		.uleb128 0x21
 467 0035 01        		.sleb128 1
 468 0036 3E        		.uleb128 0x3e
 469 0037 0B        		.uleb128 0xb
 470 0038 03        		.uleb128 0x3
 471 0039 0E        		.uleb128 0xe
 472 003a 00        		.byte	0
 473 003b 00        		.byte	0
 474 003c 05        		.uleb128 0x5
 475 003d 05        		.uleb128 0x5
 476 003e 00        		.byte	0
 477 003f 03        		.uleb128 0x3
 478 0040 0E        		.uleb128 0xe
 479 0041 3A        		.uleb128 0x3a
 480 0042 21        		.uleb128 0x21
 481 0043 01        		.sleb128 1
 482 0044 3B        		.uleb128 0x3b
 483 0045 0B        		.uleb128 0xb


 484 0046 39        		.uleb128 0x39
 485 0047 0B        		.uleb128 0xb
 486 0048 49        		.uleb128 0x49
 487 0049 13        		.uleb128 0x13
 488 004a 02        		.uleb128 0x2
 489 004b 18        		.uleb128 0x18
 490 004c 00        		.byte	0
 491 004d 00        		.byte	0
 492 004e 06        		.uleb128 0x6
 493 004f 11        		.uleb128 0x11
 494 0050 01        		.byte	0x1
 495 0051 25        		.uleb128 0x25
 496 0052 0E        		.uleb128 0xe
 497 0053 13        		.uleb128 0x13
 498 0054 0B        		.uleb128 0xb
 499 0055 03        		.uleb128 0x3
 500 0056 0E        		.uleb128 0xe
 501 0057 1B        		.uleb128 0x1b
 502 0058 0E        		.uleb128 0xe
 503 0059 11        		.uleb128 0x11
 504 005a 01        		.uleb128 0x1
 505 005b 12        		.uleb128 0x12
 506 005c 06        		.uleb128 0x6
 507 005d 10        		.uleb128 0x10
 508 005e 17        		.uleb128 0x17
 509 005f 00        		.byte	0
 510 0060 00        		.byte	0
 511 0061 07        		.uleb128 0x7
 512 0062 2E        		.uleb128 0x2e
 513 0063 01        		.byte	0x1
 514 0064 3F        		.uleb128 0x3f
 515 0065 19        		.uleb128 0x19
 516 0066 03        		.uleb128 0x3
 517 0067 0E        		.uleb128 0xe
 518 0068 3A        		.uleb128 0x3a
 519 0069 0B        		.uleb128 0xb
 520 006a 3B        		.uleb128 0x3b
 521 006b 0B        		.uleb128 0xb
 522 006c 39        		.uleb128 0x39
 523 006d 0B        		.uleb128 0xb
 524 006e 27        		.uleb128 0x27
 525 006f 19        		.uleb128 0x19
 526 0070 3C        		.uleb128 0x3c
 527 0071 19        		.uleb128 0x19
 528 0072 01        		.uleb128 0x1
 529 0073 13        		.uleb128 0x13
 530 0074 00        		.byte	0
 531 0075 00        		.byte	0
 532 0076 08        		.uleb128 0x8
 533 0077 05        		.uleb128 0x5
 534 0078 00        		.byte	0
 535 0079 49        		.uleb128 0x49
 536 007a 13        		.uleb128 0x13
 537 007b 00        		.byte	0
 538 007c 00        		.byte	0
 539 007d 09        		.uleb128 0x9
 540 007e 2E        		.uleb128 0x2e


 541 007f 01        		.byte	0x1
 542 0080 3F        		.uleb128 0x3f
 543 0081 19        		.uleb128 0x19
 544 0082 03        		.uleb128 0x3
 545 0083 0E        		.uleb128 0xe
 546 0084 3A        		.uleb128 0x3a
 547 0085 0B        		.uleb128 0xb
 548 0086 3B        		.uleb128 0x3b
 549 0087 0B        		.uleb128 0xb
 550 0088 39        		.uleb128 0x39
 551 0089 0B        		.uleb128 0xb
 552 008a 49        		.uleb128 0x49
 553 008b 13        		.uleb128 0x13
 554 008c 3C        		.uleb128 0x3c
 555 008d 19        		.uleb128 0x19
 556 008e 01        		.uleb128 0x1
 557 008f 13        		.uleb128 0x13
 558 0090 00        		.byte	0
 559 0091 00        		.byte	0
 560 0092 0A        		.uleb128 0xa
 561 0093 18        		.uleb128 0x18
 562 0094 00        		.byte	0
 563 0095 00        		.byte	0
 564 0096 00        		.byte	0
 565 0097 0B        		.uleb128 0xb
 566 0098 2E        		.uleb128 0x2e
 567 0099 01        		.byte	0x1
 568 009a 3F        		.uleb128 0x3f
 569 009b 19        		.uleb128 0x19
 570 009c 03        		.uleb128 0x3
 571 009d 0E        		.uleb128 0xe
 572 009e 3A        		.uleb128 0x3a
 573 009f 0B        		.uleb128 0xb
 574 00a0 3B        		.uleb128 0x3b
 575 00a1 0B        		.uleb128 0xb
 576 00a2 39        		.uleb128 0x39
 577 00a3 0B        		.uleb128 0xb
 578 00a4 27        		.uleb128 0x27
 579 00a5 19        		.uleb128 0x19
 580 00a6 49        		.uleb128 0x49
 581 00a7 13        		.uleb128 0x13
 582 00a8 11        		.uleb128 0x11
 583 00a9 01        		.uleb128 0x1
 584 00aa 12        		.uleb128 0x12
 585 00ab 06        		.uleb128 0x6
 586 00ac 40        		.uleb128 0x40
 587 00ad 18        		.uleb128 0x18
 588 00ae 7A        		.uleb128 0x7a
 589 00af 19        		.uleb128 0x19
 590 00b0 01        		.uleb128 0x1
 591 00b1 13        		.uleb128 0x13
 592 00b2 00        		.byte	0
 593 00b3 00        		.byte	0
 594 00b4 0C        		.uleb128 0xc
 595 00b5 34        		.uleb128 0x34
 596 00b6 00        		.byte	0
 597 00b7 03        		.uleb128 0x3


 598 00b8 08        		.uleb128 0x8
 599 00b9 3A        		.uleb128 0x3a
 600 00ba 0B        		.uleb128 0xb
 601 00bb 3B        		.uleb128 0x3b
 602 00bc 0B        		.uleb128 0xb
 603 00bd 39        		.uleb128 0x39
 604 00be 0B        		.uleb128 0xb
 605 00bf 49        		.uleb128 0x49
 606 00c0 13        		.uleb128 0x13
 607 00c1 00        		.byte	0
 608 00c2 00        		.byte	0
 609 00c3 0D        		.uleb128 0xd
 610 00c4 24        		.uleb128 0x24
 611 00c5 00        		.byte	0
 612 00c6 0B        		.uleb128 0xb
 613 00c7 0B        		.uleb128 0xb
 614 00c8 3E        		.uleb128 0x3e
 615 00c9 0B        		.uleb128 0xb
 616 00ca 03        		.uleb128 0x3
 617 00cb 08        		.uleb128 0x8
 618 00cc 00        		.byte	0
 619 00cd 00        		.byte	0
 620 00ce 0E        		.uleb128 0xe
 621 00cf 0F        		.uleb128 0xf
 622 00d0 00        		.byte	0
 623 00d1 0B        		.uleb128 0xb
 624 00d2 0B        		.uleb128 0xb
 625 00d3 49        		.uleb128 0x49
 626 00d4 13        		.uleb128 0x13
 627 00d5 00        		.byte	0
 628 00d6 00        		.byte	0
 629 00d7 0F        		.uleb128 0xf
 630 00d8 2E        		.uleb128 0x2e
 631 00d9 01        		.byte	0x1
 632 00da 3F        		.uleb128 0x3f
 633 00db 19        		.uleb128 0x19
 634 00dc 03        		.uleb128 0x3
 635 00dd 0E        		.uleb128 0xe
 636 00de 3A        		.uleb128 0x3a
 637 00df 0B        		.uleb128 0xb
 638 00e0 3B        		.uleb128 0x3b
 639 00e1 0B        		.uleb128 0xb
 640 00e2 39        		.uleb128 0x39
 641 00e3 0B        		.uleb128 0xb
 642 00e4 27        		.uleb128 0x27
 643 00e5 19        		.uleb128 0x19
 644 00e6 49        		.uleb128 0x49
 645 00e7 13        		.uleb128 0x13
 646 00e8 11        		.uleb128 0x11
 647 00e9 01        		.uleb128 0x1
 648 00ea 12        		.uleb128 0x12
 649 00eb 06        		.uleb128 0x6
 650 00ec 40        		.uleb128 0x40
 651 00ed 18        		.uleb128 0x18
 652 00ee 7A        		.uleb128 0x7a
 653 00ef 19        		.uleb128 0x19
 654 00f0 00        		.byte	0


 655 00f1 00        		.byte	0
 656 00f2 00        		.byte	0
 657               		.section	.debug_loclists,"",@progbits
 658 0000 0000 00E3 		.long	.Ldebug_loc3-.Ldebug_loc2
 659               	.Ldebug_loc2:
 660 0004 0005      		.word	0x5
 661 0006 04        		.byte	0x4
 662 0007 00        		.byte	0
 663 0008 0000 0000 		.long	0
 664               	.Ldebug_loc0:
 665               	.LVUS2:
 666 000c 02        		.uleb128 .LVU50
 667 000d 00        		.uleb128 .LVU51
 668 000e 00        		.uleb128 .LVU51
 669 000f 00        		.uleb128 .LVU53
 670 0010 00        		.uleb128 .LVU53
 671 0011 03        		.uleb128 .LVU58
 672 0012 03        		.uleb128 .LVU58
 673 0013 00        		.uleb128 .LVU59
 674 0014 00        		.uleb128 .LVU60
 675 0015 03        		.uleb128 .LVU66
 676 0016 03        		.uleb128 .LVU66
 677 0017 00        		.uleb128 0
 678               	.LLST2:
 679 0018 04        		.byte	0x4
 680 0019 9801      		.uleb128 .LVL22-.Ltext0
 681 001b A801      		.uleb128 .LVL23-.Ltext0
 682 001d 02        		.uleb128 0x2
 683 001e 30        		.byte	0x30
 684 001f 9F        		.byte	0x9f
 685 0020 04        		.byte	0x4
 686 0021 A801      		.uleb128 .LVL23-.Ltext0
 687 0023 AA01      		.uleb128 .LVL24-.Ltext0
 688 0025 07        		.uleb128 0x7
 689 0026 7A        		.byte	0x7a
 690 0027 00        		.sleb128 0
 691 0028 91        		.byte	0x91
 692 0029 74        		.sleb128 -12
 693 002a 06        		.byte	0x6
 694 002b 1C        		.byte	0x1c
 695 002c 9F        		.byte	0x9f
 696 002d 04        		.byte	0x4
 697 002e AA01      		.uleb128 .LVL24-.Ltext0
 698 0030 BA01      		.uleb128 .LVL25-.Ltext0
 699 0032 08        		.uleb128 0x8
 700 0033 91        		.byte	0x91
 701 0034 74        		.sleb128 -12
 702 0035 06        		.byte	0x6
 703 0036 20        		.byte	0x20
 704 0037 7A        		.byte	0x7a
 705 0038 00        		.sleb128 0
 706 0039 22        		.byte	0x22
 707 003a 9F        		.byte	0x9f
 708 003b 04        		.byte	0x4
 709 003c BA01      		.uleb128 .LVL25-.Ltext0
 710 003e C001      		.uleb128 .LVL26-.Ltext0
 711 0040 07        		.uleb128 0x7


 712 0041 7A        		.byte	0x7a
 713 0042 00        		.sleb128 0
 714 0043 91        		.byte	0x91
 715 0044 74        		.sleb128 -12
 716 0045 06        		.byte	0x6
 717 0046 1C        		.byte	0x1c
 718 0047 9F        		.byte	0x9f
 719 0048 04        		.byte	0x4
 720 0049 C801      		.uleb128 .LVL27-.Ltext0
 721 004b DE01      		.uleb128 .LVL29-.Ltext0
 722 004d 08        		.uleb128 0x8
 723 004e 91        		.byte	0x91
 724 004f 74        		.sleb128 -12
 725 0050 06        		.byte	0x6
 726 0051 20        		.byte	0x20
 727 0052 7A        		.byte	0x7a
 728 0053 00        		.sleb128 0
 729 0054 22        		.byte	0x22
 730 0055 9F        		.byte	0x9f
 731 0056 04        		.byte	0x4
 732 0057 DE01      		.uleb128 .LVL29-.Ltext0
 733 0059 E601      		.uleb128 .LFE1-.Ltext0
 734 005b 07        		.uleb128 0x7
 735 005c 7A        		.byte	0x7a
 736 005d 00        		.sleb128 0
 737 005e 91        		.byte	0x91
 738 005f 74        		.sleb128 -12
 739 0060 06        		.byte	0x6
 740 0061 1C        		.byte	0x1c
 741 0062 9F        		.byte	0x9f
 742 0063 00        		.byte	0
 743               	.LVUS0:
 744 0064 00        		.uleb128 .LVU10
 745 0065 00        		.uleb128 .LVU16
 746 0066 00        		.uleb128 .LVU16
 747 0067 00        		.uleb128 .LVU24
 748 0068 00        		.uleb128 .LVU25
 749 0069 00        		.uleb128 .LVU26
 750 006a 00        		.uleb128 .LVU26
 751 006b 00        		.uleb128 .LVU34
 752 006c 00        		.uleb128 .LVU35
 753 006d 00        		.uleb128 .LVU39
 754 006e 00        		.uleb128 .LVU39
 755 006f 00        		.uleb128 0
 756               	.LLST0:
 757 0070 04        		.byte	0x4
 758 0071 22        		.uleb128 .LVL4-.Ltext0
 759 0072 36        		.uleb128 .LVL5-.Ltext0
 760 0073 01        		.uleb128 0x1
 761 0074 50        		.byte	0x50
 762 0075 04        		.byte	0x4
 763 0076 36        		.uleb128 .LVL5-.Ltext0
 764 0077 48        		.uleb128 .LVL9-.Ltext0
 765 0078 01        		.uleb128 0x1
 766 0079 52        		.byte	0x52
 767 007a 04        		.byte	0x4
 768 007b 50        		.uleb128 .LVL10-.Ltext0


 769 007c 55        		.uleb128 .LVL11-1-.Ltext0
 770 007d 01        		.uleb128 0x1
 771 007e 50        		.byte	0x50
 772 007f 04        		.byte	0x4
 773 0080 55        		.uleb128 .LVL11-1-.Ltext0
 774 0081 6C        		.uleb128 .LVL14-.Ltext0
 775 0082 01        		.uleb128 0x1
 776 0083 52        		.byte	0x52
 777 0084 04        		.byte	0x4
 778 0085 6E        		.uleb128 .LVL15-.Ltext0
 779 0086 79        		.uleb128 .LVL17-1-.Ltext0
 780 0087 01        		.uleb128 0x1
 781 0088 50        		.byte	0x50
 782 0089 04        		.byte	0x4
 783 008a 79        		.uleb128 .LVL17-1-.Ltext0
 784 008b 9001      		.uleb128 .LFE0-.Ltext0
 785 008d 01        		.uleb128 0x1
 786 008e 52        		.byte	0x52
 787 008f 00        		.byte	0
 788               	.LVUS1:
 789 0090 03        		.uleb128 .LVU5
 790 0091 00        		.uleb128 .LVU8
 791 0092 00        		.uleb128 .LVU8
 792 0093 00        		.uleb128 .LVU21
 793 0094 00        		.uleb128 .LVU21
 794 0095 00        		.uleb128 .LVU22
 795 0096 00        		.uleb128 .LVU25
 796 0097 00        		.uleb128 .LVU32
 797 0098 00        		.uleb128 .LVU32
 798 0099 00        		.uleb128 .LVU34
 799 009a 00        		.uleb128 .LVU34
 800 009b 00        		.uleb128 .LVU35
 801 009c 00        		.uleb128 .LVU35
 802 009d 00        		.uleb128 .LVU38
 803 009e 00        		.uleb128 .LVU38
 804 009f 01        		.uleb128 .LVU42
 805 00a0 01        		.uleb128 .LVU42
 806 00a1 02        		.uleb128 .LVU43
 807 00a2 02        		.uleb128 .LVU43
 808 00a3 00        		.uleb128 .LVU44
 809               	.LLST1:
 810 00a4 04        		.byte	0x4
 811 00a5 0C        		.uleb128 .LVL1-.Ltext0
 812 00a6 1E        		.uleb128 .LVL2-.Ltext0
 813 00a7 02        		.uleb128 0x2
 814 00a8 30        		.byte	0x30
 815 00a9 9F        		.byte	0x9f
 816 00aa 04        		.byte	0x4
 817 00ab 1E        		.uleb128 .LVL2-.Ltext0
 818 00ac 42        		.uleb128 .LVL7-.Ltext0
 819 00ad 01        		.uleb128 0x1
 820 00ae 53        		.byte	0x53
 821 00af 04        		.byte	0x4
 822 00b0 42        		.uleb128 .LVL7-.Ltext0
 823 00b1 44        		.uleb128 .LVL8-.Ltext0
 824 00b2 03        		.uleb128 0x3
 825 00b3 73        		.byte	0x73


 826 00b4 7F        		.sleb128 -1
 827 00b5 9F        		.byte	0x9f
 828 00b6 04        		.byte	0x4
 829 00b7 50        		.uleb128 .LVL10-.Ltext0
 830 00b8 64        		.uleb128 .LVL13-.Ltext0
 831 00b9 01        		.uleb128 0x1
 832 00ba 53        		.byte	0x53
 833 00bb 04        		.byte	0x4
 834 00bc 64        		.uleb128 .LVL13-.Ltext0
 835 00bd 6C        		.uleb128 .LVL14-.Ltext0
 836 00be 03        		.uleb128 0x3
 837 00bf 73        		.byte	0x73
 838 00c0 7F        		.sleb128 -1
 839 00c1 9F        		.byte	0x9f
 840 00c2 04        		.byte	0x4
 841 00c3 6C        		.uleb128 .LVL14-.Ltext0
 842 00c4 6E        		.uleb128 .LVL15-.Ltext0
 843 00c5 03        		.uleb128 0x3
 844 00c6 70        		.byte	0x70
 845 00c7 7F        		.sleb128 -1
 846 00c8 9F        		.byte	0x9f
 847 00c9 04        		.byte	0x4
 848 00ca 6E        		.uleb128 .LVL15-.Ltext0
 849 00cb 74        		.uleb128 .LVL16-.Ltext0
 850 00cc 01        		.uleb128 0x1
 851 00cd 53        		.byte	0x53
 852 00ce 04        		.byte	0x4
 853 00cf 74        		.uleb128 .LVL16-.Ltext0
 854 00d0 8601      		.uleb128 .LVL19-.Ltext0
 855 00d2 03        		.uleb128 0x3
 856 00d3 73        		.byte	0x73
 857 00d4 01        		.sleb128 1
 858 00d5 9F        		.byte	0x9f
 859 00d6 04        		.byte	0x4
 860 00d7 8601      		.uleb128 .LVL19-.Ltext0
 861 00d9 8601      		.uleb128 .LVL19-.Ltext0
 862 00db 01        		.uleb128 0x1
 863 00dc 53        		.byte	0x53
 864 00dd 04        		.byte	0x4
 865 00de 8601      		.uleb128 .LVL19-.Ltext0
 866 00e0 8A01      		.uleb128 .LVL20-.Ltext0
 867 00e2 03        		.uleb128 0x3
 868 00e3 73        		.byte	0x73
 869 00e4 7F        		.sleb128 -1
 870 00e5 9F        		.byte	0x9f
 871 00e6 00        		.byte	0
 872               	.Ldebug_loc3:
 873               		.section	.debug_aranges,"",@progbits
 874 0000 0000 001C 		.long	0x1c
 875 0004 0002      		.word	0x2
 876 0006 0000 0000 		.long	.Ldebug_info0
 877 000a 04        		.byte	0x4
 878 000b 00        		.byte	0
 879 000c 0000      		.word	0
 880 000e 0000      		.word	0
 881 0010 0000 0000 		.long	.Ltext0
 882 0014 0000 00E6 		.long	.Letext0-.Ltext0


 883 0018 0000 0000 		.long	0
 884 001c 0000 0000 		.long	0
 885               		.section	.debug_line,"",@progbits
 886               	.Ldebug_line0:
 887 0000 0000 0114 		.section	.debug_str,"MS",@progbits,1
 887      0003 0000 
 887      0020 0201 
 887      FB0E 0D00 
 887      0101 0101 
 888               	.LASF0:
 889 0000 6F75 7462 		.string	"outbyte"
 889      7974 6500 
 890               	.LASF4:
 891 0008 6E62 7974 		.string	"nbytes"
 891      6573 00
 892               	.LASF7:
 893 000f 2F68 6F6D 		.string	"/home/students/4494672686/sw2-3/mtk"
 893      652F 7374 
 893      7564 656E 
 893      7473 2F34 
 893      3439 3436 
 894               	.LASF3:
 895 0033 6368 6172 		.string	"char"
 895      00
 896               	.LASF6:
 897 0038 6373 7973 		.string	"csys68k.c"
 897      3638 6B2E 
 897      6300 
 898               	.LASF5:
 899 0042 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 899      4331 3720 
 899      3131 2E34 
 899      2E30 202D 
 899      6D63 7075 
 900               	.LASF9:
 901 0086 7265 6164 		.string	"read"
 901      00
 902               	.LASF2:
 903 008b 756E 7369 		.string	"unsigned char"
 903      676E 6564 
 903      2063 6861 
 903      7200 
 904               	.LASF8:
 905 0099 7772 6974 		.string	"write"
 905      6500 
 906               	.LASF1:
 907 009f 696E 6279 		.string	"inbyte"
 907      7465 00
 908               		.ident	"GCC: (GNU) 11.4.0"




   1               	.global inbyte
   2               	.include "equdefs.inc"
   1               	***********************************************
   2               	** 変数の定義
   3               	***********************************************
   4               	
   5               	***************************************************************
   6               	** 各種レジスタ定義
   7               	***************************************************************
   8               	***************
   9               	** レジスタ群の先頭
  10               	***************
  11               	.equ REGBASE, 	0xFFF000 	| DMAP を使用．
  12               	.equ IOBASE, 	0x00d00000
  13               		
  14               	***************
  15               	** 割り込み関係のレジスタ
  16               	***************
  17               	.equ IVR, REGBASE+0x300 	| 割り込みベクタレジスタ
  18               	.equ IMR, REGBASE+0x304 	| 割り込みマスクレジスタ
  19               	.equ ISR, REGBASE+0x30c 	| 割り込みステータスレジスタ
  20               	.equ IPR, REGBASE+0x310 	| 割り込みペンディングレジスタ
  21               		
  22               	***************
  23               	** タイマ関係のレジスタ
  24               	***************
  25               	.equ TCTL1, 	REGBASE+0x600 	| タイマ１コントロールレジスタ
  26               	.equ TPRER1, 	REGBASE+0x602 	| タイマ１プリスケーラレジスタ
  27               	.equ TCMP1, 	REGBASE+0x604 	| タイマ１コンペアレジスタ
  28               	.equ TCN1, 	REGBASE+0x608 	| タイマ１カウンタレジスタ
  29               	.equ TSTAT1, 	REGBASE+0x60a 	| タイマ１ステータスレジスタ
  30               		
  31               	***************
  32               	** UART1（送受信）関係のレジスタ
  33               	***************
  34               	.equ USTCNT1, 	REGBASE+0x900 	| UART1 ステータス/コントロールレジスタ
  35               	.equ UBAUD1, 	REGBASE+0x902 	| UART1 ボーコントロールレジスタ
  36               	.equ URX1, 	REGBASE+0x904 	| UART1 受信レジスタ
  37               	.equ UTX1, 	REGBASE+0x906 	| UART1 送信レジスタ
  38               		
  39               	***************
  40               	** LED
  41               	***************
  42               	.equ LED7, IOBASE+0x000002f
  43               	.equ LED6, IOBASE+0x000002d
  44               	.equ LED5, IOBASE+0x000002b
  45               	.equ LED4, IOBASE+0x0000029
  46               	.equ LED3, IOBASE+0x000003f
  47               	.equ LED2, IOBASE+0x000003d
  48               	.equ LED1, IOBASE+0x000003b
  49               	.equ LED0, IOBASE+0x0000039
  50               	
  51               	***************
  52               	** システムコール番号
  53               	***************
  54               	.equ SYSCALL_NUM_GETSTRING, 	1
  55               	.equ SYSCALL_NUM_PUTSTRING, 	2


  56               	.equ SYSCALL_NUM_RESET_TIMER, 	3
  57               	.equ SYSCALL_NUM_SET_TIMER, 	4
  58               	
  59               	****************************************************************
  60               	*** 初期値のあるデータ領域
  61               	****************************************************************
  62               	.section .data
  63               	
  64               	.even 				| \n: 次の行へ (ラインフィード)
  65 0000 0000      	TTC:	.dc.w 0
  66               	.even
  67               		
  68               	****************************************************************
  69               	*** 初期値の無いデータ領域
  70               	****************************************************************
  71               	.section .bss
  72 0000 0000 0000 	BUF: .ds.b 256 			| BUF[256]
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73               	
  74               	.even
  75 0100 0000 0000 	USR_STK: .ds.b 0x4000 		| ユーザスタック領域
  75      0000 0000 
  75      0000 0000 
  75      0000 0000 
  75      0000 0000 
  76               	.even
  77               	USR_STK_TOP: 			| ユーザスタック領域の最後尾
  78               		
  79               	*******************************
  80               	.section .bss
  81 4100 0000 0000 	Queue0:		.ds.b	274	/* 受信用キュー */
  81      0000 0000 
  81      0000 0000 
  81      0000 0000 
  81      0000 0000 
  82 4212 0000 0000 	Queue1:		.ds.b	274	/* 送信用キュー */
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  83               	
  84               	.section .text
  85               	.equ	BF_START, 	0		/* キューのデータ領域の先頭 */
  86               	.equ	BF_END, 	255		/* キューのデータ領域の最後尾 */
  87               	.equ	top, 		256		/* キューの先頭アドレスを保持へのオフセット */
  88               	.equ	out, 		260		/* 次にpopするデータアドレスを保持へのオフセット */
  89               	.equ	in, 		264		/* 次にinするデータアドレスを保持へのオフセット */
  90               	.equ	bottom, 	268		/* キューの最終アドレスを保持へのオフセット */
  91               	.equ	s, 		272		/* キュー内の要素数を保持する変数へのオフセット */
  92               	
  93               	
  94               	
   3               		
   4               	.text


   5               	.even
   6               	
   7               	inbyte:
   8 0000 48E7 7002 		movem.l %d1-%d3/%a6, -(%sp) 
   9 0004 4E56 FFFC 		link.w	%a6, #-4
  10               		
  11               	inbyte_loop:
  12 0008 7001      		move.l  #SYSCALL_NUM_GETSTRING, %d0
  13 000a 7200      	   	move.l  #0, %d1
  14 000c 240E      	   	move.l  %a6, %d2
  15 000e 5382      	   	sub.l   #1,  %d2                 
  16 0010 7601      	    	move.l  #1, %d3                  
  17 0012 4E40      	    	trap    #0                        
  18               	
  19 0014 0C80 0000 	    	cmpi.l   #0, %d0                   
  19      0000 
  20 001a 6700 FFEC 	    	beq     inbyte_loop      
  21               	    	
  22 001e 102E FFFF 	    	move.b  -1(%a6), %d0
  23 0022 13C0 00D0 		move.b	%d0, LED0
  23      0039 
  24 0028 4E5E      		unlk    %a6
  25 002a 4CDF 400E 	    	movem.l (%sp)+, %d1-%d3/%a6
  26               	    	
  27 002e 4E75      		rts
  28               	
  29               		
  30               	inkey:
  31 0030 48E7 7000 		movem.l %d1-%d3, -(%sp)
  32               		
  33               	inkey_loop:	
  34 0034 2200      		move.l  %d0, %d1
  35 0036 7001      		move.l  #SYSCALL_NUM_GETSTRING, %d0
  36 0038 243C 0000 	   	move.l  #inchrw_buf, %d2                 
  36      0000 
  37 003e 7601      	    	move.l  #1, %d3                  
  38 0040 4E40      	    	trap    #0                        
  39               	
  40 0042 0C80 0000 	    	cmpi.l   #0, %d0                   
  40      0000 
  41 0048 6700 000E 	    	beq     no_input
  42               	    	
  43 004c 1039 0000 	    	move.b  inchrw_buf, %d0
  43      0000 
  44 0052 0280 0000 		andi.l	#0xff, %d0	
  44      00FF 
  45               		
  46               	no_input:
  47 0058 70FF      		move.l  #-1, %d0  
  48               		
  49               	input_end:
  50 005a 4CDF 000E 		movem.l (%sp)+, %d1-%d3
  51 005e 4E75      		rts
  52               		
  53               	
  54               	.section .bss
  55               	.even


  56 4324 00        	inchrw_buf: .ds.b 1
  57 4325 00        		.even
  58               		




   1               	.extern curr_task
   2               	.extern next_task
   3               	.extern task_tab
   4               	.extern	p_body
   5               	.extern	v_body
   6               	.extern addq
   7               	.extern sched
   8               	.extern ready
   9               	
  10               	
  11               	.global	first_task
  12               	.global	swtch
  13               	.global init_timer
  14               	.global skipmt
  15               	.global hard_clock
  16               	.global	P
  17               	.global	V
  18               	.global	pv_handler
  19               	
  20               	.equ SYSCALL_NUM_RESET_TIMER,	3
  21               	.equ SYSCALL_NUM_SET_TIMER,	4
  22               	.equ SYSCALL_NUM_SKIPMT, 5
  23               	
  24               	.equ PV_CALL_P,			0
  25               	.equ PV_CALL_V,			1
  26               	
  27               	
  28               	.section .text
  29               	
  30               		
  31               	*********************************************************************************
  32               	** ユーザタスク起動用ルーチン
  33               	** first_task
  34               	** 入出力なし
  35               	** 担当：一瀬
  36               	**
  37               	*********************************************************************************
  38               	first_task:
  39 0000 2239 0000 		move.l	curr_task, %d1             /*curr_taskの番号をd1に*/	
  39      0000 
  40 0006 207C 0000 		movea.l	#task_tab, %a0             /*task_tab配列の先頭アドレスをa0に*/
  40      0000 
  41 000c C2FC 0014 		mulu.w  #20, %d1                   /*curr_taskの番号に20を乗算し、d1に格納*/
  42 0010 D1C1      		add.l   %d1, %a0                   /*a0にd1を加算し、curr_taskの先頭アドレスを計算
  43 0012 5888      	        add.l   #4,  %a0                   /*a0は該当のcurr_taskのstack_ptr(SSP）の先頭ア
  44 0014 2E50      	        move.l  (%a0), %sp                 /*スーパーバイザーモードのspにSSPを回復*
  45 0016 205F      	        move.l	(%sp)+, %a0                
  46 0018 4E60      	        move.l	%a0, %usp
  47 001a 4CDF 7FFF 	        movem.l (%sp)+, %d0-%d7/%a0-%a6    /*レジスタ15本回復*/
  48               	        
  49 001e 4E73      	        rte
  50               	
  51               	***********************************************************************************
  52               	** タスクスイッチを実際に起こす関数
  53               	** swtch
  54               	** 入出力なし
  55               	** 担当：若松


  56               	***********************************************************************************
  57               	swtch:
  58 0020 40E7      		move.w	%SR,-(%sp)                 /* SRを退避しrteでの復帰を可能に */
  59 0022 48E7 FFFE 		movem.l	%d0-%d7/%a0-%a6,-(%sp)	   /* 実行中タスクのレジスタ退避 */
  60 0026 4E68      		move.l	%usp, %a0
  61 0028 2F08      		move.l	%a0, -(%sp)
  62               		
  63 002a 2239 0000 		move.l 	curr_task, %d1             /* curr_task -> d1 */
  63      0000 
  64 0030 C2FC 0014 		mulu.w  #20, %d1                   /* TCB配列の各要素は4*5=20byte, タスクidに乗算 */
  65 0034 207C 0000 		movea.l #task_tab, %a0             /* task_tab配列の先頭アドレス -> a0 */
  65      0000 
  66 003a D1C1      		add.l   %d1, %a0                   /* task_tab配列内のcurr_taskの先頭アドレスまで移
  67 003c 5888      	        add.l   #4,  %a0                   /* stack_ptr(SSP）の先頭アドレス -> a0 */
  68 003e 208F      	        move.l  %sp, (%a0)                 /* 現在のタスクのTCBにSSPを記録*/
  69               	        
  70 0040 2239 0000 	        move.l  next_task, %d1             /* next_task-> d1 */
  70      0000 
  71 0046 23C1 0000 	        move.l  %d1, curr_task             /* curr_taskをnext_taskで更新*/
  71      0000 
  72 004c C2FC 0014 	        mulu.w  #20, %d1                   /* TCB配列の各要素は4*5=20byte, タスクidに乗
  73 0050 207C 0000 	        movea.l #task_tab, %a0             /* task_tab配列の先頭アドレス -> a0*/
  73      0000 
  74 0056 D1C1      		add.l   %d1, %a0                   /* task_tab配列内のcurr_taskの先頭アドレスまで移
  75 0058 5888      	        add.l   #4,  %a0                   /* stack_ptr(SSP）の先頭アドレス -> a0 */
  76 005a 2E50      	 	move.l  (%a0),%sp                  /* スーパバイザモードのspにSSPを回復 */
  77 005c 205F      	 	move.l	(%sp)+, %a0
  78 005e 4E60      	 	move.l	%a0, %usp    
  79 0060 4CDF 7FFF 	        movem.l (%sp)+,%d0-%d7/%a0-%a6 	   /*次のタスクのレジスタを回復*/
  80               	
  81 0064 4E73      	        rte
  82               	        
  83               	        
  84               	hard_clock:
  85 0066 48E7 FFFE 		movem.l	%d0-%d7/%a0-%a6, -(%sp)
  86               		
  87 006a 203C 0000 		move.l	#ready, %d0			|%d0　->　readyキューへのポインタ
  87      0000 
  88 0070 2239 0000 		move.l	curr_task, %d1			|%d1　->　タスクのID
  88      0000 
  89 0076 48E7 C000 		movem.l	%d0-%d1, -(%sp)		|%d0, %d1をスタックに積んで
  90 007a 4EB9 0000 		jsr	addq				|addqを実行
  90      0000 
  91 0080 DFFC 0000 		adda.l	#8, %sp			|%d0, %d1の８バイト分を%spに加算
  91      0008 
  92               		
  93 0086 4EB9 0000 		jsr	sched
  93      0000 
  94               		
  95 008c 4EBA FF92 		jsr	swtch
  96               	
  97 0090 4CDF 7FFF 		movem.l	(%sp)+, %d0-%d7/%a0-%a6
  98               		
  99 0094 4E75      		rts     
 100               	        
 101               	        
 102               	init_timer:


 103 0096 48E7 E000 		movem.l %d0-%d2, -(%sp) 
 104 009a 7003      		move.l #SYSCALL_NUM_RESET_TIMER, %d0    | タイマーをリセット
 105 009c 4E40      		trap #0
 106               	    
 107 009e 7004      		move.l #SYSCALL_NUM_SET_TIMER, %d0      | タイマーをセット
 108 00a0 323C 2710 		move.w #10000, %d1			                                        | およそ１秒くらい
 109 00a4 243C 0000 		move.l #hard_clock, %d2                                        | 割り込み時に呼び出すル
 109      0000 
 110 00aa 4E40      		trap #0
 111               	    
 112 00ac 4CDF 0007 		movem.l (%sp)+,%d0-%d2
 113 00b0 4E75      		rts  
 114               	
 115               	skipmt:
 116 00b2 48E7 E000 		movem.l %d0-%d2, -(%sp) 
 117 00b6 7005      		move.l #SYSCALL_NUM_SKIPMT, %d0
 118 00b8 4E40      		trap	#0
 119               		
 120 00ba 4CDF 0007 	  	movem.l (%sp)+,%d0-%d2
 121 00be 4E75      		rts  
 122               	
 123               	        
 124               	P:
 125 00c0 4E56 0000 		link.w	%a6,#0
 126 00c4 48E7 C000 		movem.l	%d0-%d1,-(%sp)  /*レジスタ退避*/
 127               		
 128 00c8 7000      		move.l	#0,%d0          /*PシステムコールIDの0をd0レジスタにセット*/
 129 00ca 222E 0008 		move.l	8(%a6),%d1      /*スタックから取り出した引数（セマフォID）をd1レジス
 130 00ce 4E41      		trap	#1              
 131               		
 132 00d0 4CDF 0003 		movem.l	(%sp)+,%d0-%d1  /*レジスタ復帰*/
 133 00d4 4E5E      		unlk	%a6
 134               		
 135 00d6 4E75      		rts
 136               		
 137               		
 138               	V:
 139 00d8 4E56 0000 		link.w	%a6,#0
 140 00dc 48E7 C000 		movem.l	%d0-%d1,-(%sp)  /*レジスタ退避*/
 141               		
 142 00e0 7001      		move.l	#1,%d0          /*VシステムコールIDの1をd1レジスタにセット*/
 143 00e2 222E 0008 		move.l	8(%a6),%d1      /*スタックから取り出した引数（セマフォID)をd1レジス
 144 00e6 4E41      		trap	#1
 145               		
 146 00e8 4CDF 0003 		movem.l	(%sp)+,%d0-%d1  /*レジスタ復帰*/
 147 00ec 4E5E      		unlk	%a6
 148               		
 149 00ee 4E75      		rts
 150               	
 151               		
 152               	pv_handler:
 153 00f0 40E7      		move.w	%SR,-(%sp)  /*SRをスタックに退避*/
 154 00f2 46FC 2700 		move.w	#0x2700,%SR /*走行レベルを７にして割り込み禁止*/
 155               		
 156 00f6 48E7 4000 		movem.l	%d1,-(%sp)  /*レジスタd1をスタックに退避*/
 157 00fa 0C80 0000 		cmp.l	#0,%d0      /*d0の値が0であるか比較*/
 157      0000 


 158 0100 6600 000C 		bne	pv_handler_1    /*d0が0でないならば分岐*/
 159 0104 4EB9 0000 		jsr	p_body          /*p_body()を呼び出す*/
 159      0000 
 160 010a 6000 0012 		bra	pv_handler_end  /*復帰処理へ*/
 161               		
 162               	pv_handler_1:
 163 010e 0C80 0000 		cmp.l	#1,%d0      /*d0の値が1であるか比較*/
 163      0001 
 164 0114 6600 0008 		bne	pv_handler_end  /*d0が1でないならば分岐*/
 165 0118 4EB9 0000 		jsr	v_body          /*v_body()を呼び出す*/
 165      0000 
 166               		
 167               	pv_handler_end:
 168 011e 4CDF 0002 		movem.l	(%sp)+,%d1  /*レジスタd1をスタックから復帰*/
 169 0122 46DF      		move.w	(%sp)+,%SR  /*SRをスタックから復帰*/
 170               		
 171 0124 4E73      		rte                 /*割り込み終了*/         




   1               	#NO_APP
   2               		.file	"mtk_c.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	init_kernel
   8               		.type	init_kernel, @function
   9               	init_kernel:
  10               	.LFB3:
  11               		.file 1 "mtk_c.c"
   1:mtk_c.c       **** #include <stdio.h>
   2:mtk_c.c       **** #include "mtk_c.h"
   3:mtk_c.c       **** 
   4:mtk_c.c       **** /*======================================================
   5:mtk_c.c       **** 変数および配列の定義
   6:mtk_c.c       **** ========================================================*/
   7:mtk_c.c       **** SEMAPHORE_TYPE 	semaphore[NUMSEMAPHORE];	/* セマフォ */
   8:mtk_c.c       **** TCB_TYPE 	task_tab[NUMTASK+1];		/* TCB配列 */
   9:mtk_c.c       **** STACK_TYPE	stacks[NUMTASK];		/* タスクスタック */
  10:mtk_c.c       **** 
  11:mtk_c.c       **** /* 大域変数 */
  12:mtk_c.c       **** TASK_ID_TYPE curr_task;
  13:mtk_c.c       **** TASK_ID_TYPE new_task;
  14:mtk_c.c       **** TASK_ID_TYPE next_task;
  15:mtk_c.c       **** TASK_ID_TYPE ready;
  16:mtk_c.c       **** 
  17:mtk_c.c       **** /*======================================================
  18:mtk_c.c       **** カーネルの初期化
  19:mtk_c.c       **** init_kernel:
  20:mtk_c.c       **** 引数 　: なし
  21:mtk_c.c       **** 返り値 : なし
  22:mtk_c.c       **** 担当　 : 若松 
  23:mtk_c.c       **** ========================================================*/
  24:mtk_c.c       **** 
  25:mtk_c.c       **** void init_kernel(){
  12               		.loc 1 25 19 view -0
  13               		.cfi_startproc
  26:mtk_c.c       **** /* TCB配列の初期化. TCB配列の各要素はTCB_TYPE型の構造体 */
  27:mtk_c.c       ****     for(int i=0;  i<=NUMTASK; i++){	/* id = 0 は使わないが初期化は行っておく */
  14               		.loc 1 27 5 view .LVU1
  15               	.LBB17:
  16               		.loc 1 27 9 view .LVU2
  17               	.LVL0:
  18               		.loc 1 27 20 view .LVU3
  19 0000 41F9 0000 		lea task_tab,%a0
  19      0000 
  20               	.LVL1:
  21               	.L2:
  28:mtk_c.c       ****         task_tab[i].status=EMPTY;	/* status = EMPTY */
  22               		.loc 1 28 9 discriminator 3 view .LVU4
  23               		.loc 1 28 27 is_stmt 0 discriminator 3 view .LVU5
  24 0006 42A8 000C 		clr.l 12(%a0)
  29:mtk_c.c       ****         task_tab[i].next= NULLTASKID ;	/* 次のタスクidはNULLTASKID */
  25               		.loc 1 29 9 is_stmt 1 discriminator 3 view .LVU6
  26               		.loc 1 29 25 is_stmt 0 discriminator 3 view .LVU7
  27 000a 42A8 0010 		clr.l 16(%a0)


  30:mtk_c.c       ****         task_tab[i].task_addr=NULL;	/* タスクアドレス = NULL */
  28               		.loc 1 30 9 is_stmt 1 discriminator 3 view .LVU8
  29               		.loc 1 30 30 is_stmt 0 discriminator 3 view .LVU9
  30 000e 4290      		clr.l (%a0)
  31:mtk_c.c       ****         task_tab[i].stack_ptr=NULL;	/* スタックアドレス = NULL*/
  31               		.loc 1 31 9 is_stmt 1 discriminator 3 view .LVU10
  32               		.loc 1 31 30 is_stmt 0 discriminator 3 view .LVU11
  33 0010 42A8 0004 		clr.l 4(%a0)
  32:mtk_c.c       ****         task_tab[i].priority=0;		/* 優先度は0 */
  34               		.loc 1 32 9 is_stmt 1 discriminator 3 view .LVU12
  35               		.loc 1 32 29 is_stmt 0 discriminator 3 view .LVU13
  36 0014 42A8 0008 		clr.l 8(%a0)
  27:mtk_c.c       ****         task_tab[i].status=EMPTY;	/* status = EMPTY */
  37               		.loc 1 27 32 is_stmt 1 discriminator 3 view .LVU14
  27:mtk_c.c       ****         task_tab[i].status=EMPTY;	/* status = EMPTY */
  38               		.loc 1 27 20 discriminator 3 view .LVU15
  39 0018 41E8 0014 		lea (20,%a0),%a0
  40 001c B1FC 0000 		cmp.l #task_tab+120,%a0
  40      0000 
  41 0022 66E2      		jne .L2
  42               	.LBE17:
  33:mtk_c.c       ****     }
  34:mtk_c.c       ****     
  35:mtk_c.c       **** /* readyキューの初期化 */
  36:mtk_c.c       ****     ready = 0;				/* 実行待ちタスクはない */
  43               		.loc 1 36 5 view .LVU16
  44               		.loc 1 36 11 is_stmt 0 view .LVU17
  45 0024 42B9 0000 		clr.l ready
  45      0000 
  37:mtk_c.c       ****  
  38:mtk_c.c       **** /* pr_handler = TRAP #1 */
  39:mtk_c.c       ****   *(unsigned int *)0x084 = (unsigned int)pv_handler; /* 関数名でアドレス参照 */
  46               		.loc 1 39 3 is_stmt 1 view .LVU18
  47               		.loc 1 39 26 is_stmt 0 view .LVU19
  48 002a 21FC 0000 		move.l #pv_handler,132.w
  48      0000 0084 
  40:mtk_c.c       **** 
  41:mtk_c.c       **** /* セマフォの値を初期化 */
  42:mtk_c.c       ****     for(int i=0; i<NUMSEMAPHORE; i++){
  49               		.loc 1 42 5 is_stmt 1 view .LVU20
  50               	.LBB18:
  51               		.loc 1 42 9 view .LVU21
  52               	.LVL2:
  53               		.loc 1 42 19 view .LVU22
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  54               		.loc 1 43 9 view .LVU23
  55               		.loc 1 43 28 is_stmt 0 view .LVU24
  56 0032 7001      		moveq #1,%d0
  57 0034 23C0 0000 		move.l %d0,semaphore
  57      0000 
  44:mtk_c.c       ****         semaphore[i].task_list = NULLTASKID;	/* 初期化時点で次のタスクはない */
  58               		.loc 1 44 9 is_stmt 1 view .LVU25
  59               		.loc 1 44 32 is_stmt 0 view .LVU26
  60 003a 42B9 0000 		clr.l semaphore+8
  60      0000 
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  61               		.loc 1 42 35 is_stmt 1 view .LVU27


  62               	.LVL3:
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  63               		.loc 1 42 19 view .LVU28
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  64               		.loc 1 43 9 view .LVU29
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  65               		.loc 1 43 28 is_stmt 0 view .LVU30
  66 0040 23C0 0000 		move.l %d0,semaphore+12
  66      0000 
  67               		.loc 1 44 9 is_stmt 1 view .LVU31
  68               		.loc 1 44 32 is_stmt 0 view .LVU32
  69 0046 42B9 0000 		clr.l semaphore+20
  69      0000 
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  70               		.loc 1 42 35 is_stmt 1 view .LVU33
  71               	.LVL4:
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  72               		.loc 1 42 19 view .LVU34
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  73               		.loc 1 43 9 view .LVU35
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  74               		.loc 1 43 28 is_stmt 0 view .LVU36
  75 004c 23C0 0000 		move.l %d0,semaphore+24
  75      0000 
  76               		.loc 1 44 9 is_stmt 1 view .LVU37
  77               		.loc 1 44 32 is_stmt 0 view .LVU38
  78 0052 42B9 0000 		clr.l semaphore+32
  78      0000 
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  79               		.loc 1 42 35 is_stmt 1 view .LVU39
  80               	.LVL5:
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  81               		.loc 1 42 19 view .LVU40
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  82               		.loc 1 43 9 view .LVU41
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  83               		.loc 1 43 28 is_stmt 0 view .LVU42
  84 0058 23C0 0000 		move.l %d0,semaphore+36
  84      0000 
  85               		.loc 1 44 9 is_stmt 1 view .LVU43
  86               		.loc 1 44 32 is_stmt 0 view .LVU44
  87 005e 42B9 0000 		clr.l semaphore+44
  87      0000 
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  88               		.loc 1 42 35 is_stmt 1 view .LVU45
  89               	.LVL6:
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  90               		.loc 1 42 19 view .LVU46
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  91               		.loc 1 43 9 view .LVU47
  43:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  92               		.loc 1 43 28 is_stmt 0 view .LVU48
  93 0064 23C0 0000 		move.l %d0,semaphore+48
  93      0000 
  94               		.loc 1 44 9 is_stmt 1 view .LVU49
  95               		.loc 1 44 32 is_stmt 0 view .LVU50
  96 006a 42B9 0000 		clr.l semaphore+56


  96      0000 
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  97               		.loc 1 42 35 is_stmt 1 view .LVU51
  98               	.LVL7:
  42:mtk_c.c       ****         semaphore[i].count = 1;			/* セマフォは専有されていない */
  99               		.loc 1 42 19 view .LVU52
 100               	.LBE18:
  45:mtk_c.c       ****     }
  46:mtk_c.c       **** }
 101               		.loc 1 46 1 is_stmt 0 view .LVU53
 102 0070 4E75      		rts
 103               		.cfi_endproc
 104               	.LFE3:
 105               		.size	init_kernel, .-init_kernel
 106               		.align	2
 107               		.globl	set_task
 108               		.type	set_task, @function
 109               	set_task:
 110               	.LVL8:
 111               	.LFB4:
  47:mtk_c.c       **** 
  48:mtk_c.c       **** 
  49:mtk_c.c       **** /*======================================================
  50:mtk_c.c       **** ユーザタスクの初期化と登録 
  51:mtk_c.c       **** set_task:
  52:mtk_c.c       **** 引数 : ユーザタスク関数へのポインタ(タスクの先頭番地)
  53:mtk_c.c       **** 返り値 : なし
  54:mtk_c.c       **** 担当：一瀬
  55:mtk_c.c       **** ========================================================*/
  56:mtk_c.c       **** 
  57:mtk_c.c       **** void set_task(char *p){
 112               		.loc 1 57 23 is_stmt 1 view -0
 113               		.cfi_startproc
 114               		.loc 1 57 23 is_stmt 0 view .LVU55
 115 0072 48E7 3020 		movem.l #12320,-(%sp)
 116               		.cfi_def_cfa_offset 16
 117               		.cfi_offset 2, -16
 118               		.cfi_offset 3, -12
 119               		.cfi_offset 10, -8
 120 0076 222F 0010 		move.l 16(%sp),%d1
  58:mtk_c.c       ****  
  59:mtk_c.c       ****   for(int i=1; i <= NUMTASK; i++){
 121               		.loc 1 59 3 is_stmt 1 view .LVU56
 122               	.LBB19:
 123               		.loc 1 59 7 view .LVU57
 124               	.LVL9:
 125               		.loc 1 59 18 view .LVU58
 126 007a 41F9 0000 		lea task_tab+32,%a0
 126      0000 
 127               		.loc 1 59 11 is_stmt 0 view .LVU59
 128 0080 7401      		moveq #1,%d2
 129               	.LVL10:
 130               	.L9:
  60:mtk_c.c       ****     	if (task_tab[i].status == EMPTY){
 131               		.loc 1 60 6 is_stmt 1 view .LVU60
 132               		.loc 1 60 9 is_stmt 0 view .LVU61
 133 0082 4A90      		tst.l (%a0)


 134 0084 6700 00B6 		jeq .L18
  59:mtk_c.c       ****     	if (task_tab[i].status == EMPTY){
 135               		.loc 1 59 31 is_stmt 1 discriminator 2 view .LVU62
 136 0088 5282      		addq.l #1,%d2
 137               	.LVL11:
  59:mtk_c.c       ****     	if (task_tab[i].status == EMPTY){
 138               		.loc 1 59 18 discriminator 2 view .LVU63
 139 008a 41E8 0014 		lea (20,%a0),%a0
 140 008e 7006      		moveq #6,%d0
 141 0090 B082      		cmp.l %d2,%d0
 142 0092 66EE      		jne .L9
 143               	.LBE19:
  61:mtk_c.c       ****       		new_task = i; 
  62:mtk_c.c       ****       		break;
  63:mtk_c.c       ****       	}						//タスクを走査し、空きスロット見つけたらそのIDをnew_taskに代
  64:mtk_c.c       ****   }
  65:mtk_c.c       ****   task_tab[new_task].task_addr = p;			//空きスロットにユーザタスク関数のポイン
 144               		.loc 1 65 21 is_stmt 0 view .LVU64
 145 0094 2439 0000 		move.l new_task,%d2
 145      0000 
 146               	.LVL12:
 147               	.L8:
 148               		.loc 1 65 3 is_stmt 1 view .LVU65
 149               		.loc 1 65 32 is_stmt 0 view .LVU66
 150 009a 43F9 0000 		lea task_tab,%a1
 150      0000 
 151 00a0 2042      		move.l %d2,%a0
 152 00a2 D1C2      		add.l %d2,%a0
 153 00a4 D1C8      		add.l %a0,%a0
 154 00a6 D1C2      		add.l %d2,%a0
 155 00a8 D1C8      		add.l %a0,%a0
 156 00aa D1C8      		add.l %a0,%a0
 157 00ac 2381 8800 		move.l %d1,(%a1,%a0.l)
  66:mtk_c.c       ****   task_tab[new_task].status = OCCUPIED;			//スロットの使用状態を使用中に変更
 158               		.loc 1 66 3 is_stmt 1 view .LVU67
 159               		.loc 1 66 29 is_stmt 0 view .LVU68
 160 00b0 41F1 8800 		lea (%a1,%a0.l),%a0
 161 00b4 7601      		moveq #1,%d3
 162 00b6 2143 000C 		move.l %d3,12(%a0)
  67:mtk_c.c       ****   task_tab[new_task].stack_ptr = init_stack(new_task);	//init_stackで初期化
 163               		.loc 1 67 3 is_stmt 1 view .LVU69
 164               	.LVL13:
 165               	.LBB20:
 166               	.LBI20:
  68:mtk_c.c       ****   addq(&ready, new_task); 				//readyキューにnew_taskを登録
  69:mtk_c.c       **** }
  70:mtk_c.c       **** 
  71:mtk_c.c       **** /*==========================================================================
  72:mtk_c.c       **** ユーザタスク用のスタックの初期化
  73:mtk_c.c       **** init_stack:
  74:mtk_c.c       **** 引数   : タスクID
  75:mtk_c.c       **** 返り値 : 初期化後にユーザタスク用SSPが指すアドレス(void *型)
  76:mtk_c.c       **** 担当：若松、一瀬（共同）
  77:mtk_c.c       **** ===========================================================================*/
  78:mtk_c.c       **** 
  79:mtk_c.c       **** void *init_stack(TASK_ID_TYPE id){
 167               		.loc 1 79 7 view .LVU70


 168               	.LBB21:
  80:mtk_c.c       ****   int *ssp = &stacks[id - 1].sstack[STKSIZE];  /* タスクの実行開始アドレス -> initial P
 169               		.loc 1 80 3 view .LVU71
  81:mtk_c.c       ****   *(--ssp) = task_tab[id].task_addr;
 170               		.loc 1 81 3 view .LVU72
 171               		.loc 1 81 12 is_stmt 0 view .LVU73
 172 00ba 45F9 0000 		lea stacks,%a2
 172      0000 
 173 00c0 2002      		move.l %d2,%d0
 174 00c2 760B      		moveq #11,%d3
 175 00c4 E7A8      		lsl.l %d3,%d0
 176 00c6 2581 08FC 		move.l %d1,-4(%a2,%d0.l)
  82:mtk_c.c       ****   
  83:mtk_c.c       ****   unsigned short int *ssp1 = &stacks[id - 1].sstack[STKSIZE-4];	/* SRとして0を2byte分プッシ
 177               		.loc 1 83 3 is_stmt 1 view .LVU74
 178               	.LVL14:
  84:mtk_c.c       ****   *(--ssp1) = 0x0000;
 179               		.loc 1 84 3 view .LVU75
 180               		.loc 1 84 13 is_stmt 0 view .LVU76
 181 00ca 45F9 0000 		lea stacks-4,%a2
 181      0000 
 182 00d0 4272 08FE 		clr.w -2(%a2,%d0.l)
  85:mtk_c.c       ****   
  86:mtk_c.c       ****   int *ssp2 = &stacks[id - 1].sstack[STKSIZE-66];	/* Initial USPをプッシュ */
 183               		.loc 1 86 3 is_stmt 1 view .LVU77
 184               	.LVL15:
  87:mtk_c.c       ****   *(--ssp2) = &stacks[id - 1].ustack[STKSIZE];
 185               		.loc 1 87 3 view .LVU78
 186               		.loc 1 87 15 is_stmt 0 view .LVU79
 187 00d4 45F9 0000 		lea stacks-66,%a2
 187      0000 
 188 00da 2200      		move.l %d0,%d1
 189 00dc 0681 0000 		add.l #stacks-1024,%d1
 189      0000 
 190 00e2 2581 08FC 		move.l %d1,-4(%a2,%d0.l)
  88:mtk_c.c       **** 
  89:mtk_c.c       ****   return  &stacks[id - 1].sstack[STKSIZE-70];		/* 初期化後のSSPが指すアドレスを返す 
 191               		.loc 1 89 3 is_stmt 1 view .LVU80
 192               	.LVL16:
 193               		.loc 1 89 11 is_stmt 0 view .LVU81
 194 00e6 0680 0000 		add.l #stacks-70,%d0
 194      0000 
 195 00ec 2140 0004 		move.l %d0,4(%a0)
 196               	.LBE21:
 197               	.LBE20:
  68:mtk_c.c       **** }
 198               		.loc 1 68 3 is_stmt 1 view .LVU82
 199               	.LVL17:
 200               	.LBB22:
 201               	.LBI22:
  90:mtk_c.c       **** }
  91:mtk_c.c       **** 
  92:mtk_c.c       **** /*==========================================================================
  93:mtk_c.c       **** マルチタスク処理の開始 
  94:mtk_c.c       **** begin_sch:
  95:mtk_c.c       **** 引数 　: なし
  96:mtk_c.c       **** 返り値 : なし


  97:mtk_c.c       **** 担当　 : 若松 
  98:mtk_c.c       **** ===========================================================================*/
  99:mtk_c.c       **** 
 100:mtk_c.c       **** void begin_sch(){
 101:mtk_c.c       ****   curr_task = removeq(&ready);		/* removeqで最初のタスクを設定 */
 102:mtk_c.c       ****   init_timer();				/* init_timerでタイマの初期化 */
 103:mtk_c.c       ****   first_task();				/* first_taskで最初のタスクを起動 */
 104:mtk_c.c       **** }
 105:mtk_c.c       **** 
 106:mtk_c.c       **** /*=============================================================
 107:mtk_c.c       **** タスクキューの最後尾へのTCBの追加 
 108:mtk_c.c       **** addq:
 109:mtk_c.c       **** 引数 : キューへのポインタとタスクのID
 110:mtk_c.c       **** 返り値 : なし
 111:mtk_c.c       **** 担当：一瀬
 112:mtk_c.c       **** ===============================================================*/
 113:mtk_c.c       **** 
 114:mtk_c.c       **** void addq(int *q, int id){
 202               		.loc 1 114 6 view .LVU83
 203               	.LBB23:
 115:mtk_c.c       ****   int a = *q;
 204               		.loc 1 115 3 view .LVU84
 205               		.loc 1 115 7 is_stmt 0 view .LVU85
 206 00f0 2039 0000 		move.l ready,%d0
 206      0000 
 207               	.LVL18:
 116:mtk_c.c       ****   if(a == NULLTASKID){
 208               		.loc 1 116 3 is_stmt 1 view .LVU86
 209               		.loc 1 116 5 is_stmt 0 view .LVU87
 210 00f6 661E      		jne .L10
 117:mtk_c.c       ****   	*q = id;
 211               		.loc 1 117 4 is_stmt 1 view .LVU88
 212               		.loc 1 117 7 is_stmt 0 view .LVU89
 213 00f8 23C2 0000 		move.l %d2,ready
 213      0000 
 115:mtk_c.c       ****   int a = *q;
 214               		.loc 1 115 7 view .LVU90
 215 00fe 7200      		moveq #0,%d1
 216               	.LVL19:
 217               	.L11:
 118:mtk_c.c       ****   }						//最後尾のタスクIdがなければ、引数のidを追加する
 119:mtk_c.c       ****   else{
 120:mtk_c.c       **** 	while (task_tab[a].next != NULLTASKID){
 121:mtk_c.c       ****     		a = task_tab[a].next;
 122:mtk_c.c       ****   	}
 123:mtk_c.c       ****   }
 124:mtk_c.c       ****   task_tab[a].next = id;
 218               		.loc 1 124 3 is_stmt 1 view .LVU91
 219               		.loc 1 124 20 is_stmt 0 view .LVU92
 220 0100 2001      		move.l %d1,%d0
 221 0102 D081      		add.l %d1,%d0
 222 0104 D080      		add.l %d0,%d0
 223 0106 D081      		add.l %d1,%d0
 224 0108 D080      		add.l %d0,%d0
 225 010a D080      		add.l %d0,%d0
 226 010c 2382 0810 		move.l %d2,16(%a1,%d0.l)
 227               	.LVL20:


 228               		.loc 1 124 20 view .LVU93
 229               	.LBE23:
 230               	.LBE22:
  69:mtk_c.c       **** 
 231               		.loc 1 69 1 view .LVU94
 232 0110 4CDF 040C 		movem.l (%sp)+,#1036
 233 0114 4E75      		rts
 234               	.LVL21:
 235               	.L10:
 236               	.LBB25:
 237               	.LBB24:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 238               		.loc 1 120 26 is_stmt 1 view .LVU95
 239 0116 2200      		move.l %d0,%d1
 120:mtk_c.c       ****     		a = task_tab[a].next;
 240               		.loc 1 120 20 is_stmt 0 view .LVU96
 241 0118 D080      		add.l %d0,%d0
 242               	.LVL22:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 243               		.loc 1 120 20 view .LVU97
 244 011a D080      		add.l %d0,%d0
 245 011c D081      		add.l %d1,%d0
 246 011e D080      		add.l %d0,%d0
 247 0120 D080      		add.l %d0,%d0
 248 0122 2031 0810 		move.l 16(%a1,%d0.l),%d0
 120:mtk_c.c       ****     		a = task_tab[a].next;
 249               		.loc 1 120 26 view .LVU98
 250 0126 67D8      		jeq .L11
 251               	.LVL23:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 252               		.loc 1 120 26 is_stmt 1 view .LVU99
 253 0128 2200      		move.l %d0,%d1
 120:mtk_c.c       ****     		a = task_tab[a].next;
 254               		.loc 1 120 20 is_stmt 0 view .LVU100
 255 012a D080      		add.l %d0,%d0
 256               	.LVL24:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 257               		.loc 1 120 20 view .LVU101
 258 012c D080      		add.l %d0,%d0
 259 012e D081      		add.l %d1,%d0
 260 0130 D080      		add.l %d0,%d0
 261 0132 D080      		add.l %d0,%d0
 262 0134 2031 0810 		move.l 16(%a1,%d0.l),%d0
 120:mtk_c.c       ****     		a = task_tab[a].next;
 263               		.loc 1 120 26 view .LVU102
 264 0138 66DC      		jne .L10
 265 013a 60C4      		jra .L11
 266               	.LVL25:
 267               	.L18:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 268               		.loc 1 120 26 view .LVU103
 269               	.LBE24:
 270               	.LBE25:
 271               	.LBB26:
  61:mtk_c.c       ****       		break;
 272               		.loc 1 61 9 is_stmt 1 view .LVU104
  61:mtk_c.c       ****       		break;


 273               		.loc 1 61 18 is_stmt 0 view .LVU105
 274 013c 23C2 0000 		move.l %d2,new_task
 274      0000 
  62:mtk_c.c       ****       	}						//タスクを走査し、空きスロット見つけたらそのIDをnew_taskに代
 275               		.loc 1 62 9 is_stmt 1 view .LVU106
 276 0142 6000 FF56 		jra .L8
 277               	.LBE26:
 278               		.cfi_endproc
 279               	.LFE4:
 280               		.size	set_task, .-set_task
 281               		.align	2
 282               		.globl	init_stack
 283               		.type	init_stack, @function
 284               	init_stack:
 285               	.LVL26:
 286               	.LFB5:
  79:mtk_c.c       ****   int *ssp = &stacks[id - 1].sstack[STKSIZE];  /* タスクの実行開始アドレス -> initial P
 287               		.loc 1 79 34 view -0
 288               		.cfi_startproc
  79:mtk_c.c       ****   int *ssp = &stacks[id - 1].sstack[STKSIZE];  /* タスクの実行開始アドレス -> initial P
 289               		.loc 1 79 34 is_stmt 0 view .LVU108
 290 0146 2F02      		move.l %d2,-(%sp)
 291               		.cfi_def_cfa_offset 8
 292               		.cfi_offset 2, -8
 293 0148 242F 0008 		move.l 8(%sp),%d2
  80:mtk_c.c       ****   *(--ssp) = task_tab[id].task_addr;
 294               		.loc 1 80 3 is_stmt 1 view .LVU109
 295 014c 2002      		move.l %d2,%d0
 296 014e 720B      		moveq #11,%d1
 297 0150 E3A8      		lsl.l %d1,%d0
 298               	.LVL27:
  81:mtk_c.c       ****   
 299               		.loc 1 81 3 view .LVU110
  81:mtk_c.c       ****   
 300               		.loc 1 81 26 is_stmt 0 view .LVU111
 301 0152 2202      		move.l %d2,%d1
 302 0154 D282      		add.l %d2,%d1
 303 0156 D281      		add.l %d1,%d1
 304 0158 D282      		add.l %d2,%d1
 305 015a D281      		add.l %d1,%d1
 306 015c D281      		add.l %d1,%d1
  81:mtk_c.c       ****   
 307               		.loc 1 81 12 view .LVU112
 308 015e 41F9 0000 		lea stacks,%a0
 308      0000 
 309 0164 43F9 0000 		lea task_tab,%a1
 309      0000 
 310 016a 21B1 1800 		move.l (%a1,%d1.l),-4(%a0,%d0.l)
 310      08FC 
  83:mtk_c.c       ****   *(--ssp1) = 0x0000;
 311               		.loc 1 83 3 is_stmt 1 view .LVU113
 312               	.LVL28:
  84:mtk_c.c       ****   
 313               		.loc 1 84 3 view .LVU114
  84:mtk_c.c       ****   
 314               		.loc 1 84 13 is_stmt 0 view .LVU115
 315 0170 41F9 0000 		lea stacks-4,%a0


 315      0000 
 316 0176 4270 08FE 		clr.w -2(%a0,%d0.l)
  86:mtk_c.c       ****   *(--ssp2) = &stacks[id - 1].ustack[STKSIZE];
 317               		.loc 1 86 3 is_stmt 1 view .LVU116
 318               	.LVL29:
  87:mtk_c.c       **** 
 319               		.loc 1 87 3 view .LVU117
  87:mtk_c.c       **** 
 320               		.loc 1 87 15 is_stmt 0 view .LVU118
 321 017a 41F9 0000 		lea stacks-66,%a0
 321      0000 
 322 0180 2200      		move.l %d0,%d1
 323 0182 0681 0000 		add.l #stacks-1024,%d1
 323      0000 
 324 0188 2181 08FC 		move.l %d1,-4(%a0,%d0.l)
  89:mtk_c.c       **** }
 325               		.loc 1 89 3 is_stmt 1 view .LVU119
  90:mtk_c.c       **** 
 326               		.loc 1 90 1 is_stmt 0 view .LVU120
 327 018c 0680 0000 		add.l #stacks-70,%d0
 327      0000 
 328               	.LVL30:
  90:mtk_c.c       **** 
 329               		.loc 1 90 1 view .LVU121
 330 0192 241F      		move.l (%sp)+,%d2
 331               	.LVL31:
  90:mtk_c.c       **** 
 332               		.loc 1 90 1 view .LVU122
 333 0194 4E75      		rts
 334               		.cfi_endproc
 335               	.LFE5:
 336               		.size	init_stack, .-init_stack
 337               		.align	2
 338               		.globl	begin_sch
 339               		.type	begin_sch, @function
 340               	begin_sch:
 341               	.LFB6:
 100:mtk_c.c       ****   curr_task = removeq(&ready);		/* removeqで最初のタスクを設定 */
 342               		.loc 1 100 17 is_stmt 1 view -0
 343               		.cfi_startproc
 101:mtk_c.c       ****   init_timer();				/* init_timerでタイマの初期化 */
 344               		.loc 1 101 3 view .LVU124
 345               	.LVL32:
 346               	.LBB27:
 347               	.LBI27:
 125:mtk_c.c       **** }
 126:mtk_c.c       **** 
 127:mtk_c.c       **** /*=============================================================
 128:mtk_c.c       **** タスクキューの先頭からTCBの除去
 129:mtk_c.c       **** removeq:
 130:mtk_c.c       **** 引数 : キューへのポインタ
 131:mtk_c.c       **** 返り値 : 先頭のID
 132:mtk_c.c       **** 担当：一瀬
 133:mtk_c.c       **** ===============================================================*/
 134:mtk_c.c       **** int removeq(int *q){
 348               		.loc 1 134 5 view .LVU125
 349               	.LBB28:


 135:mtk_c.c       ****   int a = *q;
 350               		.loc 1 135 3 view .LVU126
 351               		.loc 1 135 7 is_stmt 0 view .LVU127
 352 0196 2039 0000 		move.l ready,%d0
 352      0000 
 353               	.LVL33:
 136:mtk_c.c       ****   *q = task_tab[a].next;
 354               		.loc 1 136 3 is_stmt 1 view .LVU128
 355               		.loc 1 136 19 is_stmt 0 view .LVU129
 356 019c 2040      		move.l %d0,%a0
 357 019e D1C0      		add.l %d0,%a0
 358 01a0 D1C8      		add.l %a0,%a0
 359 01a2 D1C0      		add.l %d0,%a0
 360 01a4 D1C8      		add.l %a0,%a0
 361 01a6 D1C8      		add.l %a0,%a0
 362 01a8 D1FC 0000 		add.l #task_tab+16,%a0
 362      0000 
 363               		.loc 1 136 6 view .LVU130
 364 01ae 23D0 0000 		move.l (%a0),ready
 364      0000 
 137:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 365               		.loc 1 137 3 is_stmt 1 view .LVU131
 366               		.loc 1 137 20 is_stmt 0 view .LVU132
 367 01b4 4290      		clr.l (%a0)
 138:mtk_c.c       ****   return a;
 368               		.loc 1 138 3 is_stmt 1 view .LVU133
 369               	.LVL34:
 370               		.loc 1 138 3 is_stmt 0 view .LVU134
 371               	.LBE28:
 372               	.LBE27:
 101:mtk_c.c       ****   init_timer();				/* init_timerでタイマの初期化 */
 373               		.loc 1 101 13 view .LVU135
 374 01b6 23C0 0000 		move.l %d0,curr_task
 374      0000 
 102:mtk_c.c       ****   first_task();				/* first_taskで最初のタスクを起動 */
 375               		.loc 1 102 3 is_stmt 1 view .LVU136
 376 01bc 4EB9 0000 		jsr init_timer
 376      0000 
 377               	.LVL35:
 103:mtk_c.c       **** }
 378               		.loc 1 103 3 view .LVU137
 104:mtk_c.c       **** 
 379               		.loc 1 104 1 is_stmt 0 view .LVU138
 103:mtk_c.c       **** }
 380               		.loc 1 103 3 view .LVU139
 381 01c2 4EF9 0000 		jra first_task
 381      0000 
 382               	.LVL36:
 383               		.cfi_endproc
 384               	.LFE6:
 385               		.size	begin_sch, .-begin_sch
 386               		.align	2
 387               		.globl	addq
 388               		.type	addq, @function
 389               	addq:
 390               	.LVL37:
 391               	.LFB7:


 114:mtk_c.c       ****   int a = *q;
 392               		.loc 1 114 26 is_stmt 1 view -0
 393               		.cfi_startproc
 114:mtk_c.c       ****   int a = *q;
 394               		.loc 1 114 26 is_stmt 0 view .LVU141
 395 01c8 206F 0004 		move.l 4(%sp),%a0
 396 01cc 226F 0008 		move.l 8(%sp),%a1
 115:mtk_c.c       ****   if(a == NULLTASKID){
 397               		.loc 1 115 3 is_stmt 1 view .LVU142
 115:mtk_c.c       ****   if(a == NULLTASKID){
 398               		.loc 1 115 7 is_stmt 0 view .LVU143
 399 01d0 2010      		move.l (%a0),%d0
 400               	.LVL38:
 116:mtk_c.c       ****   	*q = id;
 401               		.loc 1 116 3 is_stmt 1 view .LVU144
 116:mtk_c.c       ****   	*q = id;
 402               		.loc 1 116 5 is_stmt 0 view .LVU145
 403 01d2 672A      		jeq .L28
 404 01d4 41F9 0000 		lea task_tab,%a0
 404      0000 
 405               	.LVL39:
 406               	.L24:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 407               		.loc 1 120 26 is_stmt 1 view .LVU146
 408 01da 2200      		move.l %d0,%d1
 120:mtk_c.c       ****     		a = task_tab[a].next;
 409               		.loc 1 120 20 is_stmt 0 view .LVU147
 410 01dc D080      		add.l %d0,%d0
 411               	.LVL40:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 412               		.loc 1 120 20 view .LVU148
 413 01de D080      		add.l %d0,%d0
 414 01e0 D081      		add.l %d1,%d0
 415 01e2 D080      		add.l %d0,%d0
 416 01e4 D080      		add.l %d0,%d0
 417 01e6 2030 0810 		move.l 16(%a0,%d0.l),%d0
 120:mtk_c.c       ****     		a = task_tab[a].next;
 418               		.loc 1 120 26 view .LVU149
 419 01ea 66EE      		jne .L24
 124:mtk_c.c       **** }
 420               		.loc 1 124 3 is_stmt 1 view .LVU150
 124:mtk_c.c       **** }
 421               		.loc 1 124 20 is_stmt 0 view .LVU151
 422 01ec 2001      		move.l %d1,%d0
 423 01ee D081      		add.l %d1,%d0
 424 01f0 D080      		add.l %d0,%d0
 425 01f2 D081      		add.l %d1,%d0
 426 01f4 D080      		add.l %d0,%d0
 427 01f6 D080      		add.l %d0,%d0
 428 01f8 2189 0810 		move.l %a1,16(%a0,%d0.l)
 125:mtk_c.c       **** 
 429               		.loc 1 125 1 view .LVU152
 430 01fc 4E75      		rts
 431               	.LVL41:
 432               	.L28:
 117:mtk_c.c       ****   }						//最後尾のタスクIdがなければ、引数のidを追加する
 433               		.loc 1 117 4 is_stmt 1 view .LVU153


 117:mtk_c.c       ****   }						//最後尾のタスクIdがなければ、引数のidを追加する
 434               		.loc 1 117 7 is_stmt 0 view .LVU154
 435 01fe 2089      		move.l %a1,(%a0)
 115:mtk_c.c       ****   if(a == NULLTASKID){
 436               		.loc 1 115 7 view .LVU155
 437 0200 7200      		moveq #0,%d1
 438 0202 41F9 0000 		lea task_tab,%a0
 438      0000 
 439               	.LVL42:
 124:mtk_c.c       **** }
 440               		.loc 1 124 3 is_stmt 1 view .LVU156
 124:mtk_c.c       **** }
 441               		.loc 1 124 20 is_stmt 0 view .LVU157
 442 0208 2001      		move.l %d1,%d0
 443 020a D081      		add.l %d1,%d0
 444 020c D080      		add.l %d0,%d0
 445 020e D081      		add.l %d1,%d0
 446 0210 D080      		add.l %d0,%d0
 447 0212 D080      		add.l %d0,%d0
 448 0214 2189 0810 		move.l %a1,16(%a0,%d0.l)
 125:mtk_c.c       **** 
 449               		.loc 1 125 1 view .LVU158
 450 0218 4E75      		rts
 451               		.cfi_endproc
 452               	.LFE7:
 453               		.size	addq, .-addq
 454               		.align	2
 455               		.globl	removeq
 456               		.type	removeq, @function
 457               	removeq:
 458               	.LVL43:
 459               	.LFB8:
 134:mtk_c.c       ****   int a = *q;
 460               		.loc 1 134 20 is_stmt 1 view -0
 461               		.cfi_startproc
 134:mtk_c.c       ****   int a = *q;
 462               		.loc 1 134 20 is_stmt 0 view .LVU160
 463 021a 226F 0004 		move.l 4(%sp),%a1
 135:mtk_c.c       ****   *q = task_tab[a].next;
 464               		.loc 1 135 3 is_stmt 1 view .LVU161
 135:mtk_c.c       ****   *q = task_tab[a].next;
 465               		.loc 1 135 7 is_stmt 0 view .LVU162
 466 021e 2011      		move.l (%a1),%d0
 467               	.LVL44:
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 468               		.loc 1 136 3 is_stmt 1 view .LVU163
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 469               		.loc 1 136 19 is_stmt 0 view .LVU164
 470 0220 2040      		move.l %d0,%a0
 471 0222 D1C0      		add.l %d0,%a0
 472 0224 D1C8      		add.l %a0,%a0
 473 0226 D1C0      		add.l %d0,%a0
 474 0228 D1C8      		add.l %a0,%a0
 475 022a D1C8      		add.l %a0,%a0
 476 022c D1FC 0000 		add.l #task_tab+16,%a0
 476      0000 
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;


 477               		.loc 1 136 6 view .LVU165
 478 0232 2290      		move.l (%a0),(%a1)
 137:mtk_c.c       ****   return a;
 479               		.loc 1 137 3 is_stmt 1 view .LVU166
 137:mtk_c.c       ****   return a;
 480               		.loc 1 137 20 is_stmt 0 view .LVU167
 481 0234 4290      		clr.l (%a0)
 482               		.loc 1 138 3 is_stmt 1 view .LVU168
 139:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす
 483               		.loc 1 139 1 is_stmt 0 view .LVU169
 484 0236 4E75      		rts
 485               		.cfi_endproc
 486               	.LFE8:
 487               		.size	removeq, .-removeq
 488               		.align	2
 489               		.globl	sched
 490               		.type	sched, @function
 491               	sched:
 492               	.LFB9:
 140:mtk_c.c       **** 
 141:mtk_c.c       **** /*=============================================================
 142:mtk_c.c       **** タスクのスケジュール関数
 143:mtk_c.c       **** sched:
 144:mtk_c.c       **** 引数 　: なし
 145:mtk_c.c       **** 返り値 : なし
 146:mtk_c.c       **** 担当　 : 若松 
 147:mtk_c.c       **** ===============================================================*/
 148:mtk_c.c       **** 
 149:mtk_c.c       **** void sched(){
 493               		.loc 1 149 13 is_stmt 1 view -0
 494               		.cfi_startproc
 150:mtk_c.c       ****   next_task = removeq(&ready); 		/* readyキューからタスクを取り出しnext_taskに代入 
 495               		.loc 1 150 3 view .LVU171
 496               	.LVL45:
 497               	.LBB31:
 498               	.LBI31:
 134:mtk_c.c       ****   int a = *q;
 499               		.loc 1 134 5 view .LVU172
 500               	.LBB32:
 135:mtk_c.c       ****   *q = task_tab[a].next;
 501               		.loc 1 135 3 view .LVU173
 135:mtk_c.c       ****   *q = task_tab[a].next;
 502               		.loc 1 135 7 is_stmt 0 view .LVU174
 503 0238 2039 0000 		move.l ready,%d0
 503      0000 
 504               	.LVL46:
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 505               		.loc 1 136 3 is_stmt 1 view .LVU175
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 506               		.loc 1 136 19 is_stmt 0 view .LVU176
 507 023e 2040      		move.l %d0,%a0
 508 0240 D1C0      		add.l %d0,%a0
 509 0242 D1C8      		add.l %a0,%a0
 510 0244 D1C0      		add.l %d0,%a0
 511 0246 D1C8      		add.l %a0,%a0
 512 0248 D1C8      		add.l %a0,%a0
 513 024a D1FC 0000 		add.l #task_tab+16,%a0


 513      0000 
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 514               		.loc 1 136 6 view .LVU177
 515 0250 23D0 0000 		move.l (%a0),ready
 515      0000 
 137:mtk_c.c       ****   return a;
 516               		.loc 1 137 3 is_stmt 1 view .LVU178
 137:mtk_c.c       ****   return a;
 517               		.loc 1 137 20 is_stmt 0 view .LVU179
 518 0256 4290      		clr.l (%a0)
 138:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす
 519               		.loc 1 138 3 is_stmt 1 view .LVU180
 520               	.LVL47:
 138:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす
 521               		.loc 1 138 3 is_stmt 0 view .LVU181
 522               	.LBE32:
 523               	.LBE31:
 524               		.loc 1 150 13 view .LVU182
 525 0258 23C0 0000 		move.l %d0,next_task
 525      0000 
 151:mtk_c.c       ****   while (next_task == NULLTASKID){}	/* NULLTASKIDの場合は無限ループ */
 526               		.loc 1 151 3 is_stmt 1 view .LVU183
 527               		.loc 1 151 35 view .LVU184
 528               		.loc 1 151 20 view .LVU185
 529 025e 6602      		jne .L37
 530               	.L36:
 531 0260 60FE      		jra .L36
 532               	.L37:
 152:mtk_c.c       **** }
 533               		.loc 1 152 1 is_stmt 0 view .LVU186
 534 0262 4E75      		rts
 535               		.cfi_endproc
 536               	.LFE9:
 537               		.size	sched, .-sched
 538               		.align	2
 539               		.globl	sleep
 540               		.type	sleep, @function
 541               	sleep:
 542               	.LVL48:
 543               	.LFB12:
 153:mtk_c.c       **** 
 154:mtk_c.c       **** 
 155:mtk_c.c       **** 
 156:mtk_c.c       **** 
 157:mtk_c.c       **** 
 158:mtk_c.c       **** 
 159:mtk_c.c       **** 
 160:mtk_c.c       **** 
 161:mtk_c.c       **** 
 162:mtk_c.c       **** 
 163:mtk_c.c       **** void p_body(int a) {
 164:mtk_c.c       **** 	semaphore[a].count -= 1;        /*セマフォの値をデクリメント*/
 165:mtk_c.c       **** 	if (semaphore[a].count < 0) {   /*その結果セマフォが獲得できないなら*/
 166:mtk_c.c       **** 		sleep(a);                                       /*セマフォ待ちのキューに入れ休眠
 167:mtk_c.c       **** 		}
 168:mtk_c.c       **** }
 169:mtk_c.c       **** 


 170:mtk_c.c       **** void v_body(int a) {
 171:mtk_c.c       **** 	semaphore[a].count += 1;           /*セマフォの値をインクリメント*/
 172:mtk_c.c       **** 	if (semaphore[a].count <= 0) {  /*その結果セマフォが空いたなら*/
 173:mtk_c.c       **** 		wakeup(a);                                     /*そのセマフォを待っている先頭のタ
 174:mtk_c.c       **** 		}
 175:mtk_c.c       **** }
 176:mtk_c.c       **** 
 177:mtk_c.c       **** 
 178:mtk_c.c       **** int sleep(int a){		/* a := セマフォID*/
 544               		.loc 1 178 17 is_stmt 1 view -0
 545               		.cfi_startproc
 546               		.loc 1 178 17 is_stmt 0 view .LVU188
 547 0264 222F 0004 		move.l 4(%sp),%d1
 179:mtk_c.c       **** 	addq(&(semaphore[a].task_list),curr_task);
 548               		.loc 1 179 2 is_stmt 1 view .LVU189
 549 0268 2279 0000 		move.l curr_task,%a1
 549      0000 
 550               	.LVL49:
 551               	.LBB39:
 552               	.LBI39:
 114:mtk_c.c       ****   int a = *q;
 553               		.loc 1 114 6 view .LVU190
 554               	.LBB40:
 115:mtk_c.c       ****   if(a == NULLTASKID){
 555               		.loc 1 115 3 view .LVU191
 115:mtk_c.c       ****   if(a == NULLTASKID){
 556               		.loc 1 115 7 is_stmt 0 view .LVU192
 557 026e 2001      		move.l %d1,%d0
 558 0270 D081      		add.l %d1,%d0
 559 0272 D081      		add.l %d1,%d0
 560 0274 D080      		add.l %d0,%d0
 561 0276 D080      		add.l %d0,%d0
 562 0278 2040      		move.l %d0,%a0
 563 027a D1FC 0000 		add.l #semaphore+8,%a0
 563      0000 
 564 0280 2010      		move.l (%a0),%d0
 565               	.LVL50:
 116:mtk_c.c       ****   	*q = id;
 566               		.loc 1 116 3 is_stmt 1 view .LVU193
 116:mtk_c.c       ****   	*q = id;
 567               		.loc 1 116 5 is_stmt 0 view .LVU194
 568 0282 6758      		jeq .L48
 569 0284 41F9 0000 		lea task_tab,%a0
 569      0000 
 570               	.LVL51:
 571               	.L41:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 572               		.loc 1 120 26 is_stmt 1 view .LVU195
 573 028a 2200      		move.l %d0,%d1
 120:mtk_c.c       ****     		a = task_tab[a].next;
 574               		.loc 1 120 20 is_stmt 0 view .LVU196
 575 028c D080      		add.l %d0,%d0
 576               	.LVL52:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 577               		.loc 1 120 20 view .LVU197
 578 028e D080      		add.l %d0,%d0
 579 0290 D081      		add.l %d1,%d0


 580 0292 D080      		add.l %d0,%d0
 581 0294 D080      		add.l %d0,%d0
 582 0296 2030 0810 		move.l 16(%a0,%d0.l),%d0
 120:mtk_c.c       ****     		a = task_tab[a].next;
 583               		.loc 1 120 26 view .LVU198
 584 029a 66EE      		jne .L41
 124:mtk_c.c       **** }
 585               		.loc 1 124 3 is_stmt 1 view .LVU199
 124:mtk_c.c       **** }
 586               		.loc 1 124 20 is_stmt 0 view .LVU200
 587 029c 2001      		move.l %d1,%d0
 588 029e D081      		add.l %d1,%d0
 589 02a0 D080      		add.l %d0,%d0
 590 02a2 D081      		add.l %d1,%d0
 591 02a4 D080      		add.l %d0,%d0
 592 02a6 D080      		add.l %d0,%d0
 593 02a8 2189 0810 		move.l %a1,16(%a0,%d0.l)
 594               	.LVL53:
 124:mtk_c.c       **** }
 595               		.loc 1 124 20 view .LVU201
 596               	.LBE40:
 597               	.LBE39:
 180:mtk_c.c       **** 	sched();
 598               		.loc 1 180 2 is_stmt 1 view .LVU202
 599               	.LBB42:
 600               	.LBI42:
 149:mtk_c.c       ****   next_task = removeq(&ready); 		/* readyキューからタスクを取り出しnext_taskに代入 
 601               		.loc 1 149 6 view .LVU203
 602               	.LBB43:
 150:mtk_c.c       ****   while (next_task == NULLTASKID){}	/* NULLTASKIDの場合は無限ループ */
 603               		.loc 1 150 3 view .LVU204
 604               	.LBB44:
 605               	.LBI44:
 134:mtk_c.c       ****   int a = *q;
 606               		.loc 1 134 5 view .LVU205
 607               	.LBB45:
 135:mtk_c.c       ****   *q = task_tab[a].next;
 608               		.loc 1 135 3 view .LVU206
 135:mtk_c.c       ****   *q = task_tab[a].next;
 609               		.loc 1 135 7 is_stmt 0 view .LVU207
 610 02ac 2239 0000 		move.l ready,%d1
 610      0000 
 611               	.LVL54:
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 612               		.loc 1 136 3 is_stmt 1 view .LVU208
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 613               		.loc 1 136 19 is_stmt 0 view .LVU209
 614 02b2 2001      		move.l %d1,%d0
 615 02b4 D081      		add.l %d1,%d0
 616 02b6 D080      		add.l %d0,%d0
 617 02b8 D081      		add.l %d1,%d0
 618 02ba D080      		add.l %d0,%d0
 619 02bc D080      		add.l %d0,%d0
 620 02be 41F0 0810 		lea 16(%a0,%d0.l),%a0
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 621               		.loc 1 136 6 view .LVU210
 622 02c2 23D0 0000 		move.l (%a0),ready


 622      0000 
 137:mtk_c.c       ****   return a;
 623               		.loc 1 137 3 is_stmt 1 view .LVU211
 137:mtk_c.c       ****   return a;
 624               		.loc 1 137 20 is_stmt 0 view .LVU212
 625 02c8 4290      		clr.l (%a0)
 138:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす
 626               		.loc 1 138 3 is_stmt 1 view .LVU213
 627               	.LVL55:
 138:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす
 628               		.loc 1 138 3 is_stmt 0 view .LVU214
 629               	.LBE45:
 630               	.LBE44:
 150:mtk_c.c       ****   while (next_task == NULLTASKID){}	/* NULLTASKIDの場合は無限ループ */
 631               		.loc 1 150 13 view .LVU215
 632 02ca 23C1 0000 		move.l %d1,next_task
 632      0000 
 151:mtk_c.c       **** }
 633               		.loc 1 151 3 is_stmt 1 view .LVU216
 151:mtk_c.c       **** }
 634               		.loc 1 151 35 view .LVU217
 151:mtk_c.c       **** }
 635               		.loc 1 151 20 view .LVU218
 636 02d0 6602      		jne .L49
 637               	.L47:
 638 02d2 60FE      		jra .L47
 639               	.L49:
 640               	.LBE43:
 641               	.LBE42:
 181:mtk_c.c       **** 	swtch();
 642               		.loc 1 181 2 view .LVU219
 643 02d4 4EB9 0000 		jsr swtch
 643      0000 
 644               	.LVL56:
 182:mtk_c.c       **** }
 645               		.loc 1 182 1 is_stmt 0 view .LVU220
 646 02da 4E75      		rts
 647               	.LVL57:
 648               	.L48:
 649               	.LBB49:
 650               	.LBB41:
 117:mtk_c.c       ****   }						//最後尾のタスクIdがなければ、引数のidを追加する
 651               		.loc 1 117 4 is_stmt 1 view .LVU221
 117:mtk_c.c       ****   }						//最後尾のタスクIdがなければ、引数のidを追加する
 652               		.loc 1 117 7 is_stmt 0 view .LVU222
 653 02dc 2089      		move.l %a1,(%a0)
 115:mtk_c.c       ****   if(a == NULLTASKID){
 654               		.loc 1 115 7 view .LVU223
 655 02de 7200      		moveq #0,%d1
 656               	.LVL58:
 115:mtk_c.c       ****   if(a == NULLTASKID){
 657               		.loc 1 115 7 view .LVU224
 658 02e0 41F9 0000 		lea task_tab,%a0
 658      0000 
 659               	.LVL59:
 124:mtk_c.c       **** }
 660               		.loc 1 124 3 is_stmt 1 view .LVU225


 124:mtk_c.c       **** }
 661               		.loc 1 124 20 is_stmt 0 view .LVU226
 662 02e6 2001      		move.l %d1,%d0
 663 02e8 D081      		add.l %d1,%d0
 664 02ea D080      		add.l %d0,%d0
 665 02ec D081      		add.l %d1,%d0
 666 02ee D080      		add.l %d0,%d0
 667 02f0 D080      		add.l %d0,%d0
 668 02f2 2189 0810 		move.l %a1,16(%a0,%d0.l)
 669               	.LVL60:
 124:mtk_c.c       **** }
 670               		.loc 1 124 20 view .LVU227
 671               	.LBE41:
 672               	.LBE49:
 180:mtk_c.c       **** 	swtch();
 673               		.loc 1 180 2 is_stmt 1 view .LVU228
 674               	.LBB50:
 149:mtk_c.c       ****   next_task = removeq(&ready); 		/* readyキューからタスクを取り出しnext_taskに代入 
 675               		.loc 1 149 6 view .LVU229
 676               	.LBB48:
 150:mtk_c.c       ****   while (next_task == NULLTASKID){}	/* NULLTASKIDの場合は無限ループ */
 677               		.loc 1 150 3 view .LVU230
 678               	.LBB47:
 134:mtk_c.c       ****   int a = *q;
 679               		.loc 1 134 5 view .LVU231
 680               	.LBB46:
 135:mtk_c.c       ****   *q = task_tab[a].next;
 681               		.loc 1 135 3 view .LVU232
 135:mtk_c.c       ****   *q = task_tab[a].next;
 682               		.loc 1 135 7 is_stmt 0 view .LVU233
 683 02f6 2239 0000 		move.l ready,%d1
 683      0000 
 684               	.LVL61:
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 685               		.loc 1 136 3 is_stmt 1 view .LVU234
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 686               		.loc 1 136 19 is_stmt 0 view .LVU235
 687 02fc 2001      		move.l %d1,%d0
 688 02fe D081      		add.l %d1,%d0
 689 0300 D080      		add.l %d0,%d0
 690 0302 D081      		add.l %d1,%d0
 691 0304 D080      		add.l %d0,%d0
 692 0306 D080      		add.l %d0,%d0
 693 0308 41F0 0810 		lea 16(%a0,%d0.l),%a0
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 694               		.loc 1 136 6 view .LVU236
 695 030c 23D0 0000 		move.l (%a0),ready
 695      0000 
 137:mtk_c.c       ****   return a;
 696               		.loc 1 137 3 is_stmt 1 view .LVU237
 137:mtk_c.c       ****   return a;
 697               		.loc 1 137 20 is_stmt 0 view .LVU238
 698 0312 4290      		clr.l (%a0)
 138:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす
 699               		.loc 1 138 3 is_stmt 1 view .LVU239
 700               	.LVL62:
 138:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす


 701               		.loc 1 138 3 is_stmt 0 view .LVU240
 702               	.LBE46:
 703               	.LBE47:
 150:mtk_c.c       ****   while (next_task == NULLTASKID){}	/* NULLTASKIDの場合は無限ループ */
 704               		.loc 1 150 13 view .LVU241
 705 0314 23C1 0000 		move.l %d1,next_task
 705      0000 
 151:mtk_c.c       **** }
 706               		.loc 1 151 3 is_stmt 1 view .LVU242
 151:mtk_c.c       **** }
 707               		.loc 1 151 35 view .LVU243
 151:mtk_c.c       **** }
 708               		.loc 1 151 20 view .LVU244
 709 031a 67B6      		jeq .L47
 710 031c 60B6      		jra .L49
 711               	.LBE48:
 712               	.LBE50:
 713               		.cfi_endproc
 714               	.LFE12:
 715               		.size	sleep, .-sleep
 716               		.align	2
 717               		.globl	p_body
 718               		.type	p_body, @function
 719               	p_body:
 720               	.LVL63:
 721               	.LFB10:
 163:mtk_c.c       **** 	semaphore[a].count -= 1;        /*セマフォの値をデクリメント*/
 722               		.loc 1 163 20 view -0
 723               		.cfi_startproc
 163:mtk_c.c       **** 	semaphore[a].count -= 1;        /*セマフォの値をデクリメント*/
 724               		.loc 1 163 20 is_stmt 0 view .LVU246
 725 031e 222F 0004 		move.l 4(%sp),%d1
 164:mtk_c.c       **** 	if (semaphore[a].count < 0) {   /*その結果セマフォが獲得できないなら*/
 726               		.loc 1 164 2 is_stmt 1 view .LVU247
 164:mtk_c.c       **** 	if (semaphore[a].count < 0) {   /*その結果セマフォが獲得できないなら*/
 727               		.loc 1 164 21 is_stmt 0 view .LVU248
 728 0322 43F9 0000 		lea semaphore,%a1
 728      0000 
 729 0328 2001      		move.l %d1,%d0
 730 032a D081      		add.l %d1,%d0
 731 032c D081      		add.l %d1,%d0
 732 032e D080      		add.l %d0,%d0
 733 0330 D080      		add.l %d0,%d0
 734 0332 2071 0800 		move.l (%a1,%d0.l),%a0
 735 0336 5388      		subq.l #1,%a0
 736 0338 2388 0800 		move.l %a0,(%a1,%d0.l)
 165:mtk_c.c       **** 		sleep(a);                                       /*セマフォ待ちのキューに入れ休眠
 737               		.loc 1 165 2 is_stmt 1 view .LVU249
 165:mtk_c.c       **** 		sleep(a);                                       /*セマフォ待ちのキューに入れ休眠
 738               		.loc 1 165 5 is_stmt 0 view .LVU250
 739 033c 6B02      		jmi .L56
 168:mtk_c.c       **** 
 740               		.loc 1 168 1 view .LVU251
 741 033e 4E75      		rts
 742               	.L56:
 166:mtk_c.c       **** 		}
 743               		.loc 1 166 3 is_stmt 1 view .LVU252


 744 0340 2F41 0004 		move.l %d1,4(%sp)
 168:mtk_c.c       **** 
 745               		.loc 1 168 1 is_stmt 0 view .LVU253
 166:mtk_c.c       **** 		}
 746               		.loc 1 166 3 view .LVU254
 747 0344 6000 FF1E 		jra sleep
 748               	.LVL64:
 749               		.cfi_endproc
 750               	.LFE10:
 751               		.size	p_body, .-p_body
 752               		.align	2
 753               		.globl	wakeup
 754               		.type	wakeup, @function
 755               	wakeup:
 756               	.LVL65:
 757               	.LFB13:
 183:mtk_c.c       **** 
 184:mtk_c.c       **** 
 185:mtk_c.c       **** int wakeup(int a){
 758               		.loc 1 185 18 is_stmt 1 view -0
 759               		.cfi_startproc
 760               		.loc 1 185 18 is_stmt 0 view .LVU256
 761 0348 2F0A      		move.l %a2,-(%sp)
 762               		.cfi_def_cfa_offset 8
 763               		.cfi_offset 10, -8
 764 034a 2F02      		move.l %d2,-(%sp)
 765               		.cfi_def_cfa_offset 12
 766               		.cfi_offset 2, -12
 767 034c 202F 000C 		move.l 12(%sp),%d0
 186:mtk_c.c       **** 	TASK_ID_TYPE	task_id = removeq(&(semaphore[a].task_list));
 768               		.loc 1 186 2 is_stmt 1 view .LVU257
 769               	.LVL66:
 770               	.LBB51:
 771               	.LBI51:
 134:mtk_c.c       ****   int a = *q;
 772               		.loc 1 134 5 view .LVU258
 773               	.LBB52:
 135:mtk_c.c       ****   *q = task_tab[a].next;
 774               		.loc 1 135 3 view .LVU259
 135:mtk_c.c       ****   *q = task_tab[a].next;
 775               		.loc 1 135 7 is_stmt 0 view .LVU260
 776 0350 2040      		move.l %d0,%a0
 777 0352 D1C0      		add.l %d0,%a0
 778 0354 D1C0      		add.l %d0,%a0
 779 0356 D1C8      		add.l %a0,%a0
 780 0358 D1C8      		add.l %a0,%a0
 781 035a D1FC 0000 		add.l #semaphore+8,%a0
 781      0000 
 782 0360 2410      		move.l (%a0),%d2
 783               	.LVL67:
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 784               		.loc 1 136 3 is_stmt 1 view .LVU261
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 785               		.loc 1 136 19 is_stmt 0 view .LVU262
 786 0362 43F9 0000 		lea task_tab,%a1
 786      0000 
 787 0368 2002      		move.l %d2,%d0


 788               	.LVL68:
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 789               		.loc 1 136 19 view .LVU263
 790 036a D082      		add.l %d2,%d0
 791 036c D080      		add.l %d0,%d0
 792 036e D082      		add.l %d2,%d0
 793 0370 D080      		add.l %d0,%d0
 794 0372 D080      		add.l %d0,%d0
 795 0374 45F1 0810 		lea 16(%a1,%d0.l),%a2
 136:mtk_c.c       ****   task_tab[a].next = NULLTASKID;
 796               		.loc 1 136 6 view .LVU264
 797 0378 2092      		move.l (%a2),(%a0)
 137:mtk_c.c       ****   return a;
 798               		.loc 1 137 3 is_stmt 1 view .LVU265
 137:mtk_c.c       ****   return a;
 799               		.loc 1 137 20 is_stmt 0 view .LVU266
 800 037a 4292      		clr.l (%a2)
 138:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす
 801               		.loc 1 138 3 is_stmt 1 view .LVU267
 802               	.LVL69:
 138:mtk_c.c       **** }						//タスクIdを消去して、先頭のIDをかえす
 803               		.loc 1 138 3 is_stmt 0 view .LVU268
 804               	.LBE52:
 805               	.LBE51:
 187:mtk_c.c       **** 	addq(&ready, task_id);
 806               		.loc 1 187 2 is_stmt 1 view .LVU269
 807               	.LBB53:
 808               	.LBI53:
 114:mtk_c.c       ****   int a = *q;
 809               		.loc 1 114 6 view .LVU270
 810               	.LBB54:
 115:mtk_c.c       ****   if(a == NULLTASKID){
 811               		.loc 1 115 3 view .LVU271
 115:mtk_c.c       ****   if(a == NULLTASKID){
 812               		.loc 1 115 7 is_stmt 0 view .LVU272
 813 037c 2039 0000 		move.l ready,%d0
 813      0000 
 814               	.LVL70:
 116:mtk_c.c       ****   	*q = id;
 815               		.loc 1 116 3 is_stmt 1 view .LVU273
 116:mtk_c.c       ****   	*q = id;
 816               		.loc 1 116 5 is_stmt 0 view .LVU274
 817 0382 661E      		jne .L58
 117:mtk_c.c       ****   }						//最後尾のタスクIdがなければ、引数のidを追加する
 818               		.loc 1 117 4 is_stmt 1 view .LVU275
 117:mtk_c.c       ****   }						//最後尾のタスクIdがなければ、引数のidを追加する
 819               		.loc 1 117 7 is_stmt 0 view .LVU276
 820 0384 23C2 0000 		move.l %d2,ready
 820      0000 
 115:mtk_c.c       ****   if(a == NULLTASKID){
 821               		.loc 1 115 7 view .LVU277
 822 038a 7200      		moveq #0,%d1
 823               	.LVL71:
 824               	.L59:
 124:mtk_c.c       **** }
 825               		.loc 1 124 3 is_stmt 1 view .LVU278
 124:mtk_c.c       **** }


 826               		.loc 1 124 20 is_stmt 0 view .LVU279
 827 038c 2001      		move.l %d1,%d0
 828 038e D081      		add.l %d1,%d0
 829 0390 D080      		add.l %d0,%d0
 830 0392 D081      		add.l %d1,%d0
 831 0394 D080      		add.l %d0,%d0
 832 0396 D080      		add.l %d0,%d0
 833 0398 2382 0810 		move.l %d2,16(%a1,%d0.l)
 834               	.LVL72:
 124:mtk_c.c       **** }
 835               		.loc 1 124 20 view .LVU280
 836               	.LBE54:
 837               	.LBE53:
 188:mtk_c.c       **** 	}
 838               		.loc 1 188 2 view .LVU281
 839 039c 241F      		move.l (%sp)+,%d2
 840               	.LVL73:
 841               		.loc 1 188 2 view .LVU282
 842 039e 245F      		move.l (%sp)+,%a2
 843 03a0 4E75      		rts
 844               	.LVL74:
 845               	.L58:
 846               	.LBB56:
 847               	.LBB55:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 848               		.loc 1 120 26 is_stmt 1 view .LVU283
 849 03a2 2200      		move.l %d0,%d1
 120:mtk_c.c       ****     		a = task_tab[a].next;
 850               		.loc 1 120 20 is_stmt 0 view .LVU284
 851 03a4 D080      		add.l %d0,%d0
 852               	.LVL75:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 853               		.loc 1 120 20 view .LVU285
 854 03a6 D080      		add.l %d0,%d0
 855 03a8 D081      		add.l %d1,%d0
 856 03aa D080      		add.l %d0,%d0
 857 03ac D080      		add.l %d0,%d0
 858 03ae 2031 0810 		move.l 16(%a1,%d0.l),%d0
 120:mtk_c.c       ****     		a = task_tab[a].next;
 859               		.loc 1 120 26 view .LVU286
 860 03b2 67D8      		jeq .L59
 861               	.LVL76:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 862               		.loc 1 120 26 is_stmt 1 view .LVU287
 863 03b4 2200      		move.l %d0,%d1
 120:mtk_c.c       ****     		a = task_tab[a].next;
 864               		.loc 1 120 20 is_stmt 0 view .LVU288
 865 03b6 D080      		add.l %d0,%d0
 866               	.LVL77:
 120:mtk_c.c       ****     		a = task_tab[a].next;
 867               		.loc 1 120 20 view .LVU289
 868 03b8 D080      		add.l %d0,%d0
 869 03ba D081      		add.l %d1,%d0
 870 03bc D080      		add.l %d0,%d0
 871 03be D080      		add.l %d0,%d0
 872 03c0 2031 0810 		move.l 16(%a1,%d0.l),%d0
 120:mtk_c.c       ****     		a = task_tab[a].next;


 873               		.loc 1 120 26 view .LVU290
 874 03c4 66DC      		jne .L58
 875 03c6 60C4      		jra .L59
 876               	.LBE55:
 877               	.LBE56:
 878               		.cfi_endproc
 879               	.LFE13:
 880               		.size	wakeup, .-wakeup
 881               		.align	2
 882               		.globl	v_body
 883               		.type	v_body, @function
 884               	v_body:
 885               	.LVL78:
 886               	.LFB11:
 170:mtk_c.c       **** 	semaphore[a].count += 1;           /*セマフォの値をインクリメント*/
 887               		.loc 1 170 20 is_stmt 1 view -0
 888               		.cfi_startproc
 170:mtk_c.c       **** 	semaphore[a].count += 1;           /*セマフォの値をインクリメント*/
 889               		.loc 1 170 20 is_stmt 0 view .LVU292
 890 03c8 222F 0004 		move.l 4(%sp),%d1
 171:mtk_c.c       **** 	if (semaphore[a].count <= 0) {  /*その結果セマフォが空いたなら*/
 891               		.loc 1 171 2 is_stmt 1 view .LVU293
 171:mtk_c.c       **** 	if (semaphore[a].count <= 0) {  /*その結果セマフォが空いたなら*/
 892               		.loc 1 171 21 is_stmt 0 view .LVU294
 893 03cc 43F9 0000 		lea semaphore,%a1
 893      0000 
 894 03d2 2001      		move.l %d1,%d0
 895 03d4 D081      		add.l %d1,%d0
 896 03d6 D081      		add.l %d1,%d0
 897 03d8 D080      		add.l %d0,%d0
 898 03da D080      		add.l %d0,%d0
 899 03dc 2071 0800 		move.l (%a1,%d0.l),%a0
 900 03e0 5288      		addq.l #1,%a0
 901 03e2 2388 0800 		move.l %a0,(%a1,%d0.l)
 172:mtk_c.c       **** 		wakeup(a);                                     /*そのセマフォを待っている先頭のタ
 902               		.loc 1 172 2 is_stmt 1 view .LVU295
 172:mtk_c.c       **** 		wakeup(a);                                     /*そのセマフォを待っている先頭のタ
 903               		.loc 1 172 5 is_stmt 0 view .LVU296
 904 03e6 6F02      		jle .L69
 175:mtk_c.c       **** 
 905               		.loc 1 175 1 view .LVU297
 906 03e8 4E75      		rts
 907               	.L69:
 173:mtk_c.c       **** 		}
 908               		.loc 1 173 3 is_stmt 1 view .LVU298
 909 03ea 2F41 0004 		move.l %d1,4(%sp)
 175:mtk_c.c       **** 
 910               		.loc 1 175 1 is_stmt 0 view .LVU299
 173:mtk_c.c       **** 		}
 911               		.loc 1 173 3 view .LVU300
 912 03ee 6000 FF58 		jra wakeup
 913               	.LVL79:
 914               		.cfi_endproc
 915               	.LFE11:
 916               		.size	v_body, .-v_body
 917               		.globl	ready
 918               		.section	.bss


 919               		.align	2
 920               		.type	ready, @object
 921               		.size	ready, 4
 922               	ready:
 923 0000 0000 0000 		.zero	4
 924               		.globl	next_task
 925               		.align	2
 926               		.type	next_task, @object
 927               		.size	next_task, 4
 928               	next_task:
 929 0004 0000 0000 		.zero	4
 930               		.globl	new_task
 931               		.align	2
 932               		.type	new_task, @object
 933               		.size	new_task, 4
 934               	new_task:
 935 0008 0000 0000 		.zero	4
 936               		.globl	curr_task
 937               		.align	2
 938               		.type	curr_task, @object
 939               		.size	curr_task, 4
 940               	curr_task:
 941 000c 0000 0000 		.zero	4
 942               		.globl	stacks
 943               		.type	stacks, @object
 944               		.size	stacks, 10240
 945               	stacks:
 946 0010 0000 0000 		.zero	10240
 946      0000 0000 
 946      0000 0000 
 946      0000 0000 
 946      0000 0000 
 947               		.globl	task_tab
 948               		.align	2
 949               		.type	task_tab, @object
 950               		.size	task_tab, 120
 951               	task_tab:
 952 2810 0000 0000 		.zero	120
 952      0000 0000 
 952      0000 0000 
 952      0000 0000 
 952      0000 0000 
 953               		.globl	semaphore
 954               		.align	2
 955               		.type	semaphore, @object
 956               		.size	semaphore, 60
 957               	semaphore:
 958 2888 0000 0000 		.zero	60
 958      0000 0000 
 958      0000 0000 
 958      0000 0000 
 958      0000 0000 
 959               		.text
 960               	.Letext0:
 961               		.file 2 "mtk_c.h"
 962               		.section	.debug_info,"",@progbits
 963               	.Ldebug_info0:


 964 0000 0000 06F6 		.long	0x6f6
 965 0004 0005      		.word	0x5
 966 0006 01        		.byte	0x1
 967 0007 04        		.byte	0x4
 968 0008 0000 0000 		.long	.Ldebug_abbrev0
 969 000c 1F        		.uleb128 0x1f
 970 000d 0000 0000 		.long	.LASF47
 971 0011 1D        		.byte	0x1d
 972 0012 0000 0000 		.long	.LASF48
 973 0016 0000 0000 		.long	.LASF49
 974 001a 0000 0000 		.long	.Ltext0
 975 001e 0000 03F2 		.long	.Letext0-.Ltext0
 976 0022 0000 0000 		.long	.Ldebug_line0
 977 0026 02        		.uleb128 0x2
 978 0027 01        		.byte	0x1
 979 0028 06        		.byte	0x6
 980 0029 0000 0000 		.long	.LASF0
 981 002d 02        		.uleb128 0x2
 982 002e 01        		.byte	0x1
 983 002f 08        		.byte	0x8
 984 0030 0000 0000 		.long	.LASF1
 985 0034 02        		.uleb128 0x2
 986 0035 02        		.byte	0x2
 987 0036 05        		.byte	0x5
 988 0037 0000 0000 		.long	.LASF2
 989 003b 02        		.uleb128 0x2
 990 003c 02        		.byte	0x2
 991 003d 07        		.byte	0x7
 992 003e 0000 0000 		.long	.LASF3
 993 0042 02        		.uleb128 0x2
 994 0043 04        		.byte	0x4
 995 0044 05        		.byte	0x5
 996 0045 0000 0000 		.long	.LASF4
 997 0049 02        		.uleb128 0x2
 998 004a 04        		.byte	0x4
 999 004b 07        		.byte	0x7
 1000 004c 0000 0000 		.long	.LASF5
 1001 0050 02        		.uleb128 0x2
 1002 0051 08        		.byte	0x8
 1003 0052 05        		.byte	0x5
 1004 0053 0000 0000 		.long	.LASF6
 1005 0057 02        		.uleb128 0x2
 1006 0058 08        		.byte	0x8
 1007 0059 07        		.byte	0x7
 1008 005a 0000 0000 		.long	.LASF7
 1009 005e 02        		.uleb128 0x2
 1010 005f 0C        		.byte	0xc
 1011 0060 04        		.byte	0x4
 1012 0061 0000 0000 		.long	.LASF8
 1013 0065 02        		.uleb128 0x2
 1014 0066 04        		.byte	0x4
 1015 0067 07        		.byte	0x7
 1016 0068 0000 0000 		.long	.LASF9
 1017 006c 20        		.uleb128 0x20
 1018 006d 04        		.byte	0x4
 1019 006e 05        		.byte	0x5
 1020 006f 696E 7400 		.string	"int"


 1021 0073 21        		.uleb128 0x21
 1022 0074 04        		.byte	0x4
 1023 0075 09        		.uleb128 0x9
 1024 0076 0000 007A 		.long	0x7a
 1025 007a 02        		.uleb128 0x2
 1026 007b 01        		.byte	0x1
 1027 007c 06        		.byte	0x6
 1028 007d 0000 0000 		.long	.LASF10
 1029 0081 0A        		.uleb128 0xa
 1030 0082 0000 0000 		.long	.LASF13
 1031 0086 11        		.byte	0x11
 1032 0087 0D        		.byte	0xd
 1033 0088 0000 006C 		.long	0x6c
 1034 008c 18        		.uleb128 0x18
 1035 008d 0C        		.byte	0xc
 1036 008e 13        		.byte	0x13
 1037 008f 0000 00B9 		.long	0xb9
 1038 0093 04        		.uleb128 0x4
 1039 0094 0000 0000 		.long	.LASF11
 1040 0098 15        		.byte	0x15
 1041 0099 05        		.byte	0x5
 1042 009a 0000 006C 		.long	0x6c
 1043 009e 00        		.byte	0
 1044 009f 22        		.uleb128 0x22
 1045 00a0 6E73 7400 		.string	"nst"
 1046 00a4 02        		.byte	0x2
 1047 00a5 16        		.byte	0x16
 1048 00a6 05        		.byte	0x5
 1049 00a7 0000 006C 		.long	0x6c
 1050 00ab 04        		.byte	0x4
 1051 00ac 04        		.uleb128 0x4
 1052 00ad 0000 0000 		.long	.LASF12
 1053 00b1 17        		.byte	0x17
 1054 00b2 0E        		.byte	0xe
 1055 00b3 0000 0081 		.long	0x81
 1056 00b7 08        		.byte	0x8
 1057 00b8 00        		.byte	0
 1058 00b9 0A        		.uleb128 0xa
 1059 00ba 0000 0000 		.long	.LASF14
 1060 00be 18        		.byte	0x18
 1061 00bf 03        		.byte	0x3
 1062 00c0 0000 008C 		.long	0x8c
 1063 00c4 18        		.uleb128 0x18
 1064 00c5 14        		.byte	0x14
 1065 00c6 1A        		.byte	0x1a
 1066 00c7 0000 0108 		.long	0x108
 1067 00cb 04        		.uleb128 0x4
 1068 00cc 0000 0000 		.long	.LASF15
 1069 00d0 1C        		.byte	0x1c
 1070 00d1 0A        		.byte	0xa
 1071 00d2 0000 010F 		.long	0x10f
 1072 00d6 00        		.byte	0
 1073 00d7 04        		.uleb128 0x4
 1074 00d8 0000 0000 		.long	.LASF16
 1075 00dc 1D        		.byte	0x1d
 1076 00dd 09        		.byte	0x9
 1077 00de 0000 0073 		.long	0x73


 1078 00e2 04        		.byte	0x4
 1079 00e3 04        		.uleb128 0x4
 1080 00e4 0000 0000 		.long	.LASF17
 1081 00e8 1E        		.byte	0x1e
 1082 00e9 07        		.byte	0x7
 1083 00ea 0000 006C 		.long	0x6c
 1084 00ee 08        		.byte	0x8
 1085 00ef 04        		.uleb128 0x4
 1086 00f0 0000 0000 		.long	.LASF18
 1087 00f4 1F        		.byte	0x1f
 1088 00f5 07        		.byte	0x7
 1089 00f6 0000 006C 		.long	0x6c
 1090 00fa 0C        		.byte	0xc
 1091 00fb 04        		.uleb128 0x4
 1092 00fc 0000 0000 		.long	.LASF19
 1093 0100 20        		.byte	0x20
 1094 0101 10        		.byte	0x10
 1095 0102 0000 0081 		.long	0x81
 1096 0106 10        		.byte	0x10
 1097 0107 00        		.byte	0
 1098 0108 23        		.uleb128 0x23
 1099 0109 0000 010F 		.long	0x10f
 1100 010d 07        		.uleb128 0x7
 1101 010e 00        		.byte	0
 1102 010f 09        		.uleb128 0x9
 1103 0110 0000 0108 		.long	0x108
 1104 0114 0A        		.uleb128 0xa
 1105 0115 0000 0000 		.long	.LASF20
 1106 0119 21        		.byte	0x21
 1107 011a 03        		.byte	0x3
 1108 011b 0000 00C4 		.long	0xc4
 1109 011f 24        		.uleb128 0x24
 1110 0120 0800      		.word	0x800
 1111 0122 02        		.byte	0x2
 1112 0123 23        		.byte	0x23
 1113 0124 09        		.byte	0x9
 1114 0125 0000 0144 		.long	0x144
 1115 0129 04        		.uleb128 0x4
 1116 012a 0000 0000 		.long	.LASF21
 1117 012e 25        		.byte	0x25
 1118 012f 07        		.byte	0x7
 1119 0130 0000 0144 		.long	0x144
 1120 0134 00        		.byte	0
 1121 0135 25        		.uleb128 0x25
 1122 0136 0000 0000 		.long	.LASF22
 1123 013a 02        		.byte	0x2
 1124 013b 26        		.byte	0x26
 1125 013c 07        		.byte	0x7
 1126 013d 0000 0144 		.long	0x144
 1127 0141 0400      		.word	0x400
 1128 0143 00        		.byte	0
 1129 0144 0B        		.uleb128 0xb
 1130 0145 0000 007A 		.long	0x7a
 1131 0149 0000 0155 		.long	0x155
 1132 014d 26        		.uleb128 0x26
 1133 014e 0000 0049 		.long	0x49
 1134 0152 03FF      		.word	0x3ff


 1135 0154 00        		.byte	0
 1136 0155 0A        		.uleb128 0xa
 1137 0156 0000 0000 		.long	.LASF23
 1138 015a 27        		.byte	0x27
 1139 015b 03        		.byte	0x3
 1140 015c 0000 011F 		.long	0x11f
 1141 0160 0B        		.uleb128 0xb
 1142 0161 0000 00B9 		.long	0xb9
 1143 0165 0000 0170 		.long	0x170
 1144 0169 10        		.uleb128 0x10
 1145 016a 0000 0049 		.long	0x49
 1146 016e 04        		.byte	0x4
 1147 016f 00        		.byte	0
 1148 0170 05        		.uleb128 0x5
 1149 0171 0000 0000 		.long	.LASF24
 1150 0175 40        		.byte	0x40
 1151 0176 17        		.byte	0x17
 1152 0177 0000 0160 		.long	0x160
 1153 017b 0B        		.uleb128 0xb
 1154 017c 0000 0114 		.long	0x114
 1155 0180 0000 018B 		.long	0x18b
 1156 0184 10        		.uleb128 0x10
 1157 0185 0000 0049 		.long	0x49
 1158 0189 05        		.byte	0x5
 1159 018a 00        		.byte	0
 1160 018b 05        		.uleb128 0x5
 1161 018c 0000 0000 		.long	.LASF25
 1162 0190 41        		.byte	0x41
 1163 0191 11        		.byte	0x11
 1164 0192 0000 017B 		.long	0x17b
 1165 0196 0B        		.uleb128 0xb
 1166 0197 0000 0155 		.long	0x155
 1167 019b 0000 01A6 		.long	0x1a6
 1168 019f 10        		.uleb128 0x10
 1169 01a0 0000 0049 		.long	0x49
 1170 01a4 04        		.byte	0x4
 1171 01a5 00        		.byte	0
 1172 01a6 05        		.uleb128 0x5
 1173 01a7 0000 0000 		.long	.LASF26
 1174 01ab 42        		.byte	0x42
 1175 01ac 13        		.byte	0x13
 1176 01ad 0000 0196 		.long	0x196
 1177 01b1 05        		.uleb128 0x5
 1178 01b2 0000 0000 		.long	.LASF27
 1179 01b6 44        		.byte	0x44
 1180 01b7 15        		.byte	0x15
 1181 01b8 0000 0081 		.long	0x81
 1182 01bc 05        		.uleb128 0x5
 1183 01bd 0000 0000 		.long	.LASF28
 1184 01c1 45        		.byte	0x45
 1185 01c2 15        		.byte	0x15
 1186 01c3 0000 0081 		.long	0x81
 1187 01c7 05        		.uleb128 0x5
 1188 01c8 0000 0000 		.long	.LASF29
 1189 01cc 46        		.byte	0x46
 1190 01cd 15        		.byte	0x15
 1191 01ce 0000 0081 		.long	0x81


 1192 01d2 05        		.uleb128 0x5
 1193 01d3 0000 0000 		.long	.LASF30
 1194 01d7 47        		.byte	0x47
 1195 01d8 15        		.byte	0x15
 1196 01d9 0000 0081 		.long	0x81
 1197 01dd 06        		.uleb128 0x6
 1198 01de 0000 0170 		.long	0x170
 1199 01e2 07        		.byte	0x7
 1200 01e3 11        		.byte	0x11
 1201 01e4 05        		.uleb128 0x5
 1202 01e5 03        		.byte	0x3
 1203 01e6 0000 0000 		.long	semaphore
 1204 01ea 06        		.uleb128 0x6
 1205 01eb 0000 018B 		.long	0x18b
 1206 01ef 08        		.byte	0x8
 1207 01f0 0B        		.byte	0xb
 1208 01f1 05        		.uleb128 0x5
 1209 01f2 03        		.byte	0x3
 1210 01f3 0000 0000 		.long	task_tab
 1211 01f7 06        		.uleb128 0x6
 1212 01f8 0000 01A6 		.long	0x1a6
 1213 01fc 09        		.byte	0x9
 1214 01fd 0C        		.byte	0xc
 1215 01fe 05        		.uleb128 0x5
 1216 01ff 03        		.byte	0x3
 1217 0200 0000 0000 		.long	stacks
 1218 0204 06        		.uleb128 0x6
 1219 0205 0000 01B1 		.long	0x1b1
 1220 0209 0C        		.byte	0xc
 1221 020a 0E        		.byte	0xe
 1222 020b 05        		.uleb128 0x5
 1223 020c 03        		.byte	0x3
 1224 020d 0000 0000 		.long	curr_task
 1225 0211 06        		.uleb128 0x6
 1226 0212 0000 01BC 		.long	0x1bc
 1227 0216 0D        		.byte	0xd
 1228 0217 0E        		.byte	0xe
 1229 0218 05        		.uleb128 0x5
 1230 0219 03        		.byte	0x3
 1231 021a 0000 0000 		.long	new_task
 1232 021e 06        		.uleb128 0x6
 1233 021f 0000 01C7 		.long	0x1c7
 1234 0223 0E        		.byte	0xe
 1235 0224 0E        		.byte	0xe
 1236 0225 05        		.uleb128 0x5
 1237 0226 03        		.byte	0x3
 1238 0227 0000 0000 		.long	next_task
 1239 022b 06        		.uleb128 0x6
 1240 022c 0000 01D2 		.long	0x1d2
 1241 0230 0F        		.byte	0xf
 1242 0231 0E        		.byte	0xe
 1243 0232 05        		.uleb128 0x5
 1244 0233 03        		.byte	0x3
 1245 0234 0000 0000 		.long	ready
 1246 0238 0C        		.uleb128 0xc
 1247 0239 0000 0000 		.long	.LASF31
 1248 023d 30        		.byte	0x30


 1249 023e 0000 0244 		.long	0x244
 1250 0242 07        		.uleb128 0x7
 1251 0243 00        		.byte	0
 1252 0244 0C        		.uleb128 0xc
 1253 0245 0000 0000 		.long	.LASF32
 1254 0249 3C        		.byte	0x3c
 1255 024a 0000 0250 		.long	0x250
 1256 024e 07        		.uleb128 0x7
 1257 024f 00        		.byte	0
 1258 0250 0C        		.uleb128 0xc
 1259 0251 0000 0000 		.long	.LASF33
 1260 0255 3B        		.byte	0x3b
 1261 0256 0000 025C 		.long	0x25c
 1262 025a 07        		.uleb128 0x7
 1263 025b 00        		.byte	0
 1264 025c 0C        		.uleb128 0xc
 1265 025d 0000 0000 		.long	.LASF34
 1266 0261 38        		.byte	0x38
 1267 0262 0000 0268 		.long	0x268
 1268 0266 07        		.uleb128 0x7
 1269 0267 00        		.byte	0
 1270 0268 19        		.uleb128 0x19
 1271 0269 0000 0000 		.long	.LASF36
 1272 026d B9        		.byte	0xb9
 1273 026e 0000 006C 		.long	0x6c
 1274 0272 0000 0000 		.long	.LFB13
 1275 0276 0000 0080 		.long	.LFE13-.LFB13
 1276 027a 01        		.uleb128 0x1
 1277 027b 9C        		.byte	0x9c
 1278 027c 0000 0312 		.long	0x312
 1279 0280 08        		.uleb128 0x8
 1280 0281 6100      		.string	"a"
 1281 0283 B9        		.byte	0xb9
 1282 0284 10        		.byte	0x10
 1283 0285 0000 006C 		.long	0x6c
 1284 0289 02        		.uleb128 0x2
 1285 028a 91        		.byte	0x91
 1286 028b 00        		.sleb128 0
 1287 028c 27        		.uleb128 0x27
 1288 028d 0000 0000 		.long	.LASF35
 1289 0291 01        		.byte	0x1
 1290 0292 BA        		.byte	0xba
 1291 0293 0F        		.byte	0xf
 1292 0294 0000 0081 		.long	0x81
 1293 0298 0000 0000 		.long	.LLST28
 1294 029c 0000 0000 		.long	.LVUS28
 1295 02a0 11        		.uleb128 0x11
 1296 02a1 0000 0423 		.long	0x423
 1297 02a5 0000 0000 		.long	.LBI51
 1298 02a9 01        		.byte	.LVU258
 1299 02aa 0000 0000 		.long	.LBB51
 1300 02ae 0000 002C 		.long	.LBE51-.LBB51
 1301 02b2 BA        		.byte	0xba
 1302 02b3 19        		.byte	0x19
 1303 02b4 0000 02D3 		.long	0x2d3
 1304 02b8 03        		.uleb128 0x3
 1305 02b9 0000 0432 		.long	0x432


 1306 02bd 0000 0000 		.long	.LLST29
 1307 02c1 0000 0000 		.long	.LVUS29
 1308 02c5 01        		.uleb128 0x1
 1309 02c6 0000 043B 		.long	0x43b
 1310 02ca 0000 0000 		.long	.LLST30
 1311 02ce 0000 0000 		.long	.LVUS30
 1312 02d2 00        		.byte	0
 1313 02d3 12        		.uleb128 0x12
 1314 02d4 0000 044A 		.long	0x44a
 1315 02d8 0000 0000 		.long	.LBI53
 1316 02dc 03        		.byte	.LVU270
 1317 02dd 0000 0000 		.long	.LLRL31
 1318 02e1 BB        		.byte	0xbb
 1319 02e2 02        		.byte	0x2
 1320 02e3 03        		.uleb128 0x3
 1321 02e4 0000 0460 		.long	0x460
 1322 02e8 0000 0000 		.long	.LLST32
 1323 02ec 0000 0000 		.long	.LVUS32
 1324 02f0 03        		.uleb128 0x3
 1325 02f1 0000 0457 		.long	0x457
 1326 02f5 0000 0000 		.long	.LLST33
 1327 02f9 0000 0000 		.long	.LVUS33
 1328 02fd 0D        		.uleb128 0xd
 1329 02fe 0000 0000 		.long	.LLRL31
 1330 0302 01        		.uleb128 0x1
 1331 0303 0000 046A 		.long	0x46a
 1332 0307 0000 0000 		.long	.LLST34
 1333 030b 0000 0000 		.long	.LVUS34
 1334 030f 00        		.byte	0
 1335 0310 00        		.byte	0
 1336 0311 00        		.byte	0
 1337 0312 19        		.uleb128 0x19
 1338 0313 0000 0000 		.long	.LASF37
 1339 0317 B2        		.byte	0xb2
 1340 0318 0000 006C 		.long	0x6c
 1341 031c 0000 0000 		.long	.LFB12
 1342 0320 0000 00BA 		.long	.LFE12-.LFB12
 1343 0324 01        		.uleb128 0x1
 1344 0325 9C        		.byte	0x9c
 1345 0326 0000 03C6 		.long	0x3c6
 1346 032a 08        		.uleb128 0x8
 1347 032b 6100      		.string	"a"
 1348 032d B2        		.byte	0xb2
 1349 032e 0F        		.byte	0xf
 1350 032f 0000 006C 		.long	0x6c
 1351 0333 02        		.uleb128 0x2
 1352 0334 91        		.byte	0x91
 1353 0335 00        		.sleb128 0
 1354 0336 1A        		.uleb128 0x1a
 1355 0337 0000 044A 		.long	0x44a
 1356 033b 0000 0000 		.long	.LBI39
 1357 033f 00        		.byte	.LVU190
 1358 0340 0000 0000 		.long	.LLRL20
 1359 0344 B3        		.byte	0xb3
 1360 0345 0000 0377 		.long	0x377
 1361 0349 03        		.uleb128 0x3
 1362 034a 0000 0460 		.long	0x460


 1363 034e 0000 0000 		.long	.LLST21
 1364 0352 0000 0000 		.long	.LVUS21
 1365 0356 03        		.uleb128 0x3
 1366 0357 0000 0457 		.long	0x457
 1367 035b 0000 0000 		.long	.LLST22
 1368 035f 0000 0000 		.long	.LVUS22
 1369 0363 0D        		.uleb128 0xd
 1370 0364 0000 0000 		.long	.LLRL20
 1371 0368 01        		.uleb128 0x1
 1372 0369 0000 046A 		.long	0x46a
 1373 036d 0000 0000 		.long	.LLST23
 1374 0371 0000 0000 		.long	.LVUS23
 1375 0375 00        		.byte	0
 1376 0376 00        		.byte	0
 1377 0377 1A        		.uleb128 0x1a
 1378 0378 0000 041A 		.long	0x41a
 1379 037c 0000 0000 		.long	.LBI42
 1380 0380 02        		.byte	.LVU203
 1381 0381 0000 0000 		.long	.LLRL24
 1382 0385 B4        		.byte	0xb4
 1383 0386 0000 03BC 		.long	0x3bc
 1384 038a 12        		.uleb128 0x12
 1385 038b 0000 0423 		.long	0x423
 1386 038f 0000 0000 		.long	.LBI44
 1387 0393 04        		.byte	.LVU205
 1388 0394 0000 0000 		.long	.LLRL25
 1389 0398 96        		.byte	0x96
 1390 0399 0F        		.byte	0xf
 1391 039a 03        		.uleb128 0x3
 1392 039b 0000 0432 		.long	0x432
 1393 039f 0000 0000 		.long	.LLST26
 1394 03a3 0000 0000 		.long	.LVUS26
 1395 03a7 0D        		.uleb128 0xd
 1396 03a8 0000 0000 		.long	.LLRL25
 1397 03ac 01        		.uleb128 0x1
 1398 03ad 0000 043B 		.long	0x43b
 1399 03b1 0000 0000 		.long	.LLST27
 1400 03b5 0000 0000 		.long	.LVUS27
 1401 03b9 00        		.byte	0
 1402 03ba 00        		.byte	0
 1403 03bb 00        		.byte	0
 1404 03bc 1B        		.uleb128 0x1b
 1405 03bd 0000 0000 		.long	.LVL56
 1406 03c1 0000 0238 		.long	0x238
 1407 03c5 00        		.byte	0
 1408 03c6 13        		.uleb128 0x13
 1409 03c7 0000 0000 		.long	.LASF38
 1410 03cb AA        		.byte	0xaa
 1411 03cc 0000 0000 		.long	.LFB11
 1412 03d0 0000 002A 		.long	.LFE11-.LFB11
 1413 03d4 01        		.uleb128 0x1
 1414 03d5 9C        		.byte	0x9c
 1415 03d6 0000 03F0 		.long	0x3f0
 1416 03da 08        		.uleb128 0x8
 1417 03db 6100      		.string	"a"
 1418 03dd AA        		.byte	0xaa
 1419 03de 11        		.byte	0x11


 1420 03df 0000 006C 		.long	0x6c
 1421 03e3 02        		.uleb128 0x2
 1422 03e4 91        		.byte	0x91
 1423 03e5 00        		.sleb128 0
 1424 03e6 14        		.uleb128 0x14
 1425 03e7 0000 0000 		.long	.LVL79
 1426 03eb 0000 0268 		.long	0x268
 1427 03ef 00        		.byte	0
 1428 03f0 13        		.uleb128 0x13
 1429 03f1 0000 0000 		.long	.LASF39
 1430 03f5 A3        		.byte	0xa3
 1431 03f6 0000 0000 		.long	.LFB10
 1432 03fa 0000 002A 		.long	.LFE10-.LFB10
 1433 03fe 01        		.uleb128 0x1
 1434 03ff 9C        		.byte	0x9c
 1435 0400 0000 041A 		.long	0x41a
 1436 0404 08        		.uleb128 0x8
 1437 0405 6100      		.string	"a"
 1438 0407 A3        		.byte	0xa3
 1439 0408 11        		.byte	0x11
 1440 0409 0000 006C 		.long	0x6c
 1441 040d 02        		.uleb128 0x2
 1442 040e 91        		.byte	0x91
 1443 040f 00        		.sleb128 0
 1444 0410 14        		.uleb128 0x14
 1445 0411 0000 0000 		.long	.LVL64
 1446 0415 0000 0312 		.long	0x312
 1447 0419 00        		.byte	0
 1448 041a 28        		.uleb128 0x28
 1449 041b 0000 0000 		.long	.LASF50
 1450 041f 01        		.byte	0x1
 1451 0420 95        		.byte	0x95
 1452 0421 06        		.byte	0x6
 1453 0422 01        		.byte	0x1
 1454 0423 1C        		.uleb128 0x1c
 1455 0424 0000 0000 		.long	.LASF40
 1456 0428 86        		.byte	0x86
 1457 0429 05        		.byte	0x5
 1458 042a 0000 006C 		.long	0x6c
 1459 042e 0000 0445 		.long	0x445
 1460 0432 0E        		.uleb128 0xe
 1461 0433 7100      		.string	"q"
 1462 0435 86        		.byte	0x86
 1463 0436 12        		.byte	0x12
 1464 0437 0000 0445 		.long	0x445
 1465 043b 15        		.uleb128 0x15
 1466 043c 6100      		.string	"a"
 1467 043e 87        		.byte	0x87
 1468 043f 07        		.byte	0x7
 1469 0440 0000 006C 		.long	0x6c
 1470 0444 00        		.byte	0
 1471 0445 09        		.uleb128 0x9
 1472 0446 0000 006C 		.long	0x6c
 1473 044a 29        		.uleb128 0x29
 1474 044b 0000 0000 		.long	.LASF51
 1475 044f 01        		.byte	0x1
 1476 0450 72        		.byte	0x72


 1477 0451 06        		.byte	0x6
 1478 0452 01        		.byte	0x1
 1479 0453 0000 0474 		.long	0x474
 1480 0457 0E        		.uleb128 0xe
 1481 0458 7100      		.string	"q"
 1482 045a 72        		.byte	0x72
 1483 045b 10        		.byte	0x10
 1484 045c 0000 0445 		.long	0x445
 1485 0460 0E        		.uleb128 0xe
 1486 0461 6964 00   		.string	"id"
 1487 0464 72        		.byte	0x72
 1488 0465 17        		.byte	0x17
 1489 0466 0000 006C 		.long	0x6c
 1490 046a 15        		.uleb128 0x15
 1491 046b 6100      		.string	"a"
 1492 046d 73        		.byte	0x73
 1493 046e 07        		.byte	0x7
 1494 046f 0000 006C 		.long	0x6c
 1495 0473 00        		.byte	0
 1496 0474 1D        		.uleb128 0x1d
 1497 0475 0000 0000 		.long	.LASF45
 1498 0479 64        		.byte	0x64
 1499 047a 0000 0000 		.long	.LFB6
 1500 047e 0000 0032 		.long	.LFE6-.LFB6
 1501 0482 01        		.uleb128 0x1
 1502 0483 9C        		.byte	0x9c
 1503 0484 0000 04CE 		.long	0x4ce
 1504 0488 11        		.uleb128 0x11
 1505 0489 0000 0423 		.long	0x423
 1506 048d 0000 0000 		.long	.LBI27
 1507 0491 02        		.byte	.LVU125
 1508 0492 0000 0000 		.long	.LBB27
 1509 0496 0000 0020 		.long	.LBE27-.LBB27
 1510 049a 65        		.byte	0x65
 1511 049b 0F        		.byte	0xf
 1512 049c 0000 04BB 		.long	0x4bb
 1513 04a0 03        		.uleb128 0x3
 1514 04a1 0000 0432 		.long	0x432
 1515 04a5 0000 0000 		.long	.LLST14
 1516 04a9 0000 0000 		.long	.LVUS14
 1517 04ad 01        		.uleb128 0x1
 1518 04ae 0000 043B 		.long	0x43b
 1519 04b2 0000 0000 		.long	.LLST15
 1520 04b6 0000 0000 		.long	.LVUS15
 1521 04ba 00        		.byte	0
 1522 04bb 1B        		.uleb128 0x1b
 1523 04bc 0000 0000 		.long	.LVL35
 1524 04c0 0000 0250 		.long	0x250
 1525 04c4 14        		.uleb128 0x14
 1526 04c5 0000 0000 		.long	.LVL36
 1527 04c9 0000 0244 		.long	0x244
 1528 04cd 00        		.byte	0
 1529 04ce 1C        		.uleb128 0x1c
 1530 04cf 0000 0000 		.long	.LASF41
 1531 04d3 4F        		.byte	0x4f
 1532 04d4 07        		.byte	0x7
 1533 04d5 0000 0073 		.long	0x73


 1534 04d9 0000 0509 		.long	0x509
 1535 04dd 0E        		.uleb128 0xe
 1536 04de 6964 00   		.string	"id"
 1537 04e1 4F        		.byte	0x4f
 1538 04e2 1F        		.byte	0x1f
 1539 04e3 0000 0081 		.long	0x81
 1540 04e7 15        		.uleb128 0x15
 1541 04e8 7373 7000 		.string	"ssp"
 1542 04ec 50        		.byte	0x50
 1543 04ed 08        		.byte	0x8
 1544 04ee 0000 0445 		.long	0x445
 1545 04f2 1E        		.uleb128 0x1e
 1546 04f3 0000 0000 		.long	.LASF42
 1547 04f7 53        		.byte	0x53
 1548 04f8 17        		.byte	0x17
 1549 04f9 0000 0509 		.long	0x509
 1550 04fd 1E        		.uleb128 0x1e
 1551 04fe 0000 0000 		.long	.LASF43
 1552 0502 56        		.byte	0x56
 1553 0503 08        		.byte	0x8
 1554 0504 0000 0445 		.long	0x445
 1555 0508 00        		.byte	0
 1556 0509 09        		.uleb128 0x9
 1557 050a 0000 003B 		.long	0x3b
 1558 050e 13        		.uleb128 0x13
 1559 050f 0000 0000 		.long	.LASF44
 1560 0513 39        		.byte	0x39
 1561 0514 0000 0000 		.long	.LFB4
 1562 0518 0000 00D4 		.long	.LFE4-.LFB4
 1563 051c 01        		.uleb128 0x1
 1564 051d 9C        		.byte	0x9c
 1565 051e 0000 05CD 		.long	0x5cd
 1566 0522 08        		.uleb128 0x8
 1567 0523 7000      		.string	"p"
 1568 0525 39        		.byte	0x39
 1569 0526 15        		.byte	0x15
 1570 0527 0000 0075 		.long	0x75
 1571 052b 02        		.uleb128 0x2
 1572 052c 91        		.byte	0x91
 1573 052d 00        		.sleb128 0
 1574 052e 2A        		.uleb128 0x2a
 1575 052f 0000 0000 		.long	.LLRL2
 1576 0533 0000 0549 		.long	0x549
 1577 0537 16        		.uleb128 0x16
 1578 0538 6900      		.string	"i"
 1579 053a 3B        		.byte	0x3b
 1580 053b 0B        		.byte	0xb
 1581 053c 0000 006C 		.long	0x6c
 1582 0540 0000 0000 		.long	.LLST3
 1583 0544 0000 0000 		.long	.LVUS3
 1584 0548 00        		.byte	0
 1585 0549 11        		.uleb128 0x11
 1586 054a 0000 04CE 		.long	0x4ce
 1587 054e 0000 0000 		.long	.LBI20
 1588 0552 01        		.byte	.LVU70
 1589 0553 0000 0000 		.long	.LBB20
 1590 0557 0000 0036 		.long	.LBE20-.LBB20


 1591 055b 43        		.byte	0x43
 1592 055c 22        		.byte	0x22
 1593 055d 0000 058E 		.long	0x58e
 1594 0561 03        		.uleb128 0x3
 1595 0562 0000 04DD 		.long	0x4dd
 1596 0566 0000 0000 		.long	.LLST4
 1597 056a 0000 0000 		.long	.LVUS4
 1598 056e 2B        		.uleb128 0x2b
 1599 056f 0000 04E7 		.long	0x4e7
 1600 0573 01        		.uleb128 0x1
 1601 0574 0000 04F2 		.long	0x4f2
 1602 0578 0000 0000 		.long	.LLST5
 1603 057c 0000 0000 		.long	.LVUS5
 1604 0580 01        		.uleb128 0x1
 1605 0581 0000 04FD 		.long	0x4fd
 1606 0585 0000 0000 		.long	.LLST6
 1607 0589 0000 0000 		.long	.LVUS6
 1608 058d 00        		.byte	0
 1609 058e 12        		.uleb128 0x12
 1610 058f 0000 044A 		.long	0x44a
 1611 0593 0000 0000 		.long	.LBI22
 1612 0597 01        		.byte	.LVU83
 1613 0598 0000 0000 		.long	.LLRL7
 1614 059c 44        		.byte	0x44
 1615 059d 03        		.byte	0x3
 1616 059e 03        		.uleb128 0x3
 1617 059f 0000 0460 		.long	0x460
 1618 05a3 0000 0000 		.long	.LLST8
 1619 05a7 0000 0000 		.long	.LVUS8
 1620 05ab 03        		.uleb128 0x3
 1621 05ac 0000 0457 		.long	0x457
 1622 05b0 0000 0000 		.long	.LLST9
 1623 05b4 0000 0000 		.long	.LVUS9
 1624 05b8 0D        		.uleb128 0xd
 1625 05b9 0000 0000 		.long	.LLRL7
 1626 05bd 01        		.uleb128 0x1
 1627 05be 0000 046A 		.long	0x46a
 1628 05c2 0000 0000 		.long	.LLST10
 1629 05c6 0000 0000 		.long	.LVUS10
 1630 05ca 00        		.byte	0
 1631 05cb 00        		.byte	0
 1632 05cc 00        		.byte	0
 1633 05cd 1D        		.uleb128 0x1d
 1634 05ce 0000 0000 		.long	.LASF46
 1635 05d2 19        		.byte	0x19
 1636 05d3 0000 0000 		.long	.LFB3
 1637 05d7 0000 0072 		.long	.LFE3-.LFB3
 1638 05db 01        		.uleb128 0x1
 1639 05dc 9C        		.byte	0x9c
 1640 05dd 0000 061C 		.long	0x61c
 1641 05e1 2C        		.uleb128 0x2c
 1642 05e2 0000 0000 		.long	.LBB17
 1643 05e6 0000 0024 		.long	.LBE17-.LBB17
 1644 05ea 0000 0600 		.long	0x600
 1645 05ee 16        		.uleb128 0x16
 1646 05ef 6900      		.string	"i"
 1647 05f1 1B        		.byte	0x1b


 1648 05f2 0D        		.byte	0xd
 1649 05f3 0000 006C 		.long	0x6c
 1650 05f7 0000 0000 		.long	.LLST0
 1651 05fb 0000 0000 		.long	.LVUS0
 1652 05ff 00        		.byte	0
 1653 0600 2D        		.uleb128 0x2d
 1654 0601 0000 0000 		.long	.LBB18
 1655 0605 0000 003E 		.long	.LBE18-.LBB18
 1656 0609 16        		.uleb128 0x16
 1657 060a 6900      		.string	"i"
 1658 060c 2A        		.byte	0x2a
 1659 060d 0D        		.byte	0xd
 1660 060e 0000 006C 		.long	0x6c
 1661 0612 0000 0000 		.long	.LLST1
 1662 0616 0000 0000 		.long	.LVUS1
 1663 061a 00        		.byte	0
 1664 061b 00        		.byte	0
 1665 061c 17        		.uleb128 0x17
 1666 061d 0000 04CE 		.long	0x4ce
 1667 0621 0000 0000 		.long	.LFB5
 1668 0625 0000 0050 		.long	.LFE5-.LFB5
 1669 0629 01        		.uleb128 0x1
 1670 062a 9C        		.byte	0x9c
 1671 062b 0000 065F 		.long	0x65f
 1672 062f 0F        		.uleb128 0xf
 1673 0630 0000 04DD 		.long	0x4dd
 1674 0634 02        		.uleb128 0x2
 1675 0635 91        		.byte	0x91
 1676 0636 00        		.sleb128 0
 1677 0637 01        		.uleb128 0x1
 1678 0638 0000 04E7 		.long	0x4e7
 1679 063c 0000 0000 		.long	.LLST11
 1680 0640 0000 0000 		.long	.LVUS11
 1681 0644 01        		.uleb128 0x1
 1682 0645 0000 04F2 		.long	0x4f2
 1683 0649 0000 0000 		.long	.LLST12
 1684 064d 0000 0000 		.long	.LVUS12
 1685 0651 01        		.uleb128 0x1
 1686 0652 0000 04FD 		.long	0x4fd
 1687 0656 0000 0000 		.long	.LLST13
 1688 065a 0000 0000 		.long	.LVUS13
 1689 065e 00        		.byte	0
 1690 065f 17        		.uleb128 0x17
 1691 0660 0000 044A 		.long	0x44a
 1692 0664 0000 0000 		.long	.LFB7
 1693 0668 0000 0052 		.long	.LFE7-.LFB7
 1694 066c 01        		.uleb128 0x1
 1695 066d 9C        		.byte	0x9c
 1696 066e 0000 0690 		.long	0x690
 1697 0672 0F        		.uleb128 0xf
 1698 0673 0000 0457 		.long	0x457
 1699 0677 02        		.uleb128 0x2
 1700 0678 91        		.byte	0x91
 1701 0679 00        		.sleb128 0
 1702 067a 0F        		.uleb128 0xf
 1703 067b 0000 0460 		.long	0x460
 1704 067f 02        		.uleb128 0x2


 1705 0680 91        		.byte	0x91
 1706 0681 04        		.sleb128 4
 1707 0682 01        		.uleb128 0x1
 1708 0683 0000 046A 		.long	0x46a
 1709 0687 0000 0000 		.long	.LLST16
 1710 068b 0000 0000 		.long	.LVUS16
 1711 068f 00        		.byte	0
 1712 0690 17        		.uleb128 0x17
 1713 0691 0000 0423 		.long	0x423
 1714 0695 0000 0000 		.long	.LFB8
 1715 0699 0000 001E 		.long	.LFE8-.LFB8
 1716 069d 01        		.uleb128 0x1
 1717 069e 9C        		.byte	0x9c
 1718 069f 0000 06B9 		.long	0x6b9
 1719 06a3 0F        		.uleb128 0xf
 1720 06a4 0000 0432 		.long	0x432
 1721 06a8 02        		.uleb128 0x2
 1722 06a9 91        		.byte	0x91
 1723 06aa 00        		.sleb128 0
 1724 06ab 01        		.uleb128 0x1
 1725 06ac 0000 043B 		.long	0x43b
 1726 06b0 0000 0000 		.long	.LLST17
 1727 06b4 0000 0000 		.long	.LVUS17
 1728 06b8 00        		.byte	0
 1729 06b9 2E        		.uleb128 0x2e
 1730 06ba 0000 041A 		.long	0x41a
 1731 06be 0000 0000 		.long	.LFB9
 1732 06c2 0000 002C 		.long	.LFE9-.LFB9
 1733 06c6 01        		.uleb128 0x1
 1734 06c7 9C        		.byte	0x9c
 1735 06c8 2F        		.uleb128 0x2f
 1736 06c9 0000 0423 		.long	0x423
 1737 06cd 0000 0000 		.long	.LBI31
 1738 06d1 02        		.byte	.LVU172
 1739 06d2 0000 0000 		.long	.LBB31
 1740 06d6 0000 0020 		.long	.LBE31-.LBB31
 1741 06da 01        		.byte	0x1
 1742 06db 96        		.byte	0x96
 1743 06dc 0F        		.byte	0xf
 1744 06dd 03        		.uleb128 0x3
 1745 06de 0000 0432 		.long	0x432
 1746 06e2 0000 0000 		.long	.LLST18
 1747 06e6 0000 0000 		.long	.LVUS18
 1748 06ea 01        		.uleb128 0x1
 1749 06eb 0000 043B 		.long	0x43b
 1750 06ef 0000 0000 		.long	.LLST19
 1751 06f3 0000 0000 		.long	.LVUS19
 1752 06f7 00        		.byte	0
 1753 06f8 00        		.byte	0
 1754 06f9 00        		.byte	0
 1755               		.section	.debug_abbrev,"",@progbits
 1756               	.Ldebug_abbrev0:
 1757 0000 01        		.uleb128 0x1
 1758 0001 34        		.uleb128 0x34
 1759 0002 00        		.byte	0
 1760 0003 31        		.uleb128 0x31
 1761 0004 13        		.uleb128 0x13


 1762 0005 02        		.uleb128 0x2
 1763 0006 17        		.uleb128 0x17
 1764 0007 B742      		.uleb128 0x2137
 1765 0009 17        		.uleb128 0x17
 1766 000a 00        		.byte	0
 1767 000b 00        		.byte	0
 1768 000c 02        		.uleb128 0x2
 1769 000d 24        		.uleb128 0x24
 1770 000e 00        		.byte	0
 1771 000f 0B        		.uleb128 0xb
 1772 0010 0B        		.uleb128 0xb
 1773 0011 3E        		.uleb128 0x3e
 1774 0012 0B        		.uleb128 0xb
 1775 0013 03        		.uleb128 0x3
 1776 0014 0E        		.uleb128 0xe
 1777 0015 00        		.byte	0
 1778 0016 00        		.byte	0
 1779 0017 03        		.uleb128 0x3
 1780 0018 05        		.uleb128 0x5
 1781 0019 00        		.byte	0
 1782 001a 31        		.uleb128 0x31
 1783 001b 13        		.uleb128 0x13
 1784 001c 02        		.uleb128 0x2
 1785 001d 17        		.uleb128 0x17
 1786 001e B742      		.uleb128 0x2137
 1787 0020 17        		.uleb128 0x17
 1788 0021 00        		.byte	0
 1789 0022 00        		.byte	0
 1790 0023 04        		.uleb128 0x4
 1791 0024 0D        		.uleb128 0xd
 1792 0025 00        		.byte	0
 1793 0026 03        		.uleb128 0x3
 1794 0027 0E        		.uleb128 0xe
 1795 0028 3A        		.uleb128 0x3a
 1796 0029 21        		.uleb128 0x21
 1797 002a 02        		.sleb128 2
 1798 002b 3B        		.uleb128 0x3b
 1799 002c 0B        		.uleb128 0xb
 1800 002d 39        		.uleb128 0x39
 1801 002e 0B        		.uleb128 0xb
 1802 002f 49        		.uleb128 0x49
 1803 0030 13        		.uleb128 0x13
 1804 0031 38        		.uleb128 0x38
 1805 0032 0B        		.uleb128 0xb
 1806 0033 00        		.byte	0
 1807 0034 00        		.byte	0
 1808 0035 05        		.uleb128 0x5
 1809 0036 34        		.uleb128 0x34
 1810 0037 00        		.byte	0
 1811 0038 03        		.uleb128 0x3
 1812 0039 0E        		.uleb128 0xe
 1813 003a 3A        		.uleb128 0x3a
 1814 003b 21        		.uleb128 0x21
 1815 003c 02        		.sleb128 2
 1816 003d 3B        		.uleb128 0x3b
 1817 003e 0B        		.uleb128 0xb
 1818 003f 39        		.uleb128 0x39


 1819 0040 0B        		.uleb128 0xb
 1820 0041 49        		.uleb128 0x49
 1821 0042 13        		.uleb128 0x13
 1822 0043 3F        		.uleb128 0x3f
 1823 0044 19        		.uleb128 0x19
 1824 0045 3C        		.uleb128 0x3c
 1825 0046 19        		.uleb128 0x19
 1826 0047 00        		.byte	0
 1827 0048 00        		.byte	0
 1828 0049 06        		.uleb128 0x6
 1829 004a 34        		.uleb128 0x34
 1830 004b 00        		.byte	0
 1831 004c 47        		.uleb128 0x47
 1832 004d 13        		.uleb128 0x13
 1833 004e 3A        		.uleb128 0x3a
 1834 004f 21        		.uleb128 0x21
 1835 0050 01        		.sleb128 1
 1836 0051 3B        		.uleb128 0x3b
 1837 0052 0B        		.uleb128 0xb
 1838 0053 39        		.uleb128 0x39
 1839 0054 0B        		.uleb128 0xb
 1840 0055 02        		.uleb128 0x2
 1841 0056 18        		.uleb128 0x18
 1842 0057 00        		.byte	0
 1843 0058 00        		.byte	0
 1844 0059 07        		.uleb128 0x7
 1845 005a 18        		.uleb128 0x18
 1846 005b 00        		.byte	0
 1847 005c 00        		.byte	0
 1848 005d 00        		.byte	0
 1849 005e 08        		.uleb128 0x8
 1850 005f 05        		.uleb128 0x5
 1851 0060 00        		.byte	0
 1852 0061 03        		.uleb128 0x3
 1853 0062 08        		.uleb128 0x8
 1854 0063 3A        		.uleb128 0x3a
 1855 0064 21        		.uleb128 0x21
 1856 0065 01        		.sleb128 1
 1857 0066 3B        		.uleb128 0x3b
 1858 0067 0B        		.uleb128 0xb
 1859 0068 39        		.uleb128 0x39
 1860 0069 0B        		.uleb128 0xb
 1861 006a 49        		.uleb128 0x49
 1862 006b 13        		.uleb128 0x13
 1863 006c 02        		.uleb128 0x2
 1864 006d 18        		.uleb128 0x18
 1865 006e 00        		.byte	0
 1866 006f 00        		.byte	0
 1867 0070 09        		.uleb128 0x9
 1868 0071 0F        		.uleb128 0xf
 1869 0072 00        		.byte	0
 1870 0073 0B        		.uleb128 0xb
 1871 0074 21        		.uleb128 0x21
 1872 0075 04        		.sleb128 4
 1873 0076 49        		.uleb128 0x49
 1874 0077 13        		.uleb128 0x13
 1875 0078 00        		.byte	0


 1876 0079 00        		.byte	0
 1877 007a 0A        		.uleb128 0xa
 1878 007b 16        		.uleb128 0x16
 1879 007c 00        		.byte	0
 1880 007d 03        		.uleb128 0x3
 1881 007e 0E        		.uleb128 0xe
 1882 007f 3A        		.uleb128 0x3a
 1883 0080 21        		.uleb128 0x21
 1884 0081 02        		.sleb128 2
 1885 0082 3B        		.uleb128 0x3b
 1886 0083 0B        		.uleb128 0xb
 1887 0084 39        		.uleb128 0x39
 1888 0085 0B        		.uleb128 0xb
 1889 0086 49        		.uleb128 0x49
 1890 0087 13        		.uleb128 0x13
 1891 0088 00        		.byte	0
 1892 0089 00        		.byte	0
 1893 008a 0B        		.uleb128 0xb
 1894 008b 01        		.uleb128 0x1
 1895 008c 01        		.byte	0x1
 1896 008d 49        		.uleb128 0x49
 1897 008e 13        		.uleb128 0x13
 1898 008f 01        		.uleb128 0x1
 1899 0090 13        		.uleb128 0x13
 1900 0091 00        		.byte	0
 1901 0092 00        		.byte	0
 1902 0093 0C        		.uleb128 0xc
 1903 0094 2E        		.uleb128 0x2e
 1904 0095 01        		.byte	0x1
 1905 0096 3F        		.uleb128 0x3f
 1906 0097 19        		.uleb128 0x19
 1907 0098 03        		.uleb128 0x3
 1908 0099 0E        		.uleb128 0xe
 1909 009a 3A        		.uleb128 0x3a
 1910 009b 21        		.uleb128 0x21
 1911 009c 02        		.sleb128 2
 1912 009d 3B        		.uleb128 0x3b
 1913 009e 0B        		.uleb128 0xb
 1914 009f 39        		.uleb128 0x39
 1915 00a0 21        		.uleb128 0x21
 1916 00a1 0D        		.sleb128 13
 1917 00a2 3C        		.uleb128 0x3c
 1918 00a3 19        		.uleb128 0x19
 1919 00a4 01        		.uleb128 0x1
 1920 00a5 13        		.uleb128 0x13
 1921 00a6 00        		.byte	0
 1922 00a7 00        		.byte	0
 1923 00a8 0D        		.uleb128 0xd
 1924 00a9 0B        		.uleb128 0xb
 1925 00aa 01        		.byte	0x1
 1926 00ab 55        		.uleb128 0x55
 1927 00ac 17        		.uleb128 0x17
 1928 00ad 00        		.byte	0
 1929 00ae 00        		.byte	0
 1930 00af 0E        		.uleb128 0xe
 1931 00b0 05        		.uleb128 0x5
 1932 00b1 00        		.byte	0


 1933 00b2 03        		.uleb128 0x3
 1934 00b3 08        		.uleb128 0x8
 1935 00b4 3A        		.uleb128 0x3a
 1936 00b5 21        		.uleb128 0x21
 1937 00b6 01        		.sleb128 1
 1938 00b7 3B        		.uleb128 0x3b
 1939 00b8 0B        		.uleb128 0xb
 1940 00b9 39        		.uleb128 0x39
 1941 00ba 0B        		.uleb128 0xb
 1942 00bb 49        		.uleb128 0x49
 1943 00bc 13        		.uleb128 0x13
 1944 00bd 00        		.byte	0
 1945 00be 00        		.byte	0
 1946 00bf 0F        		.uleb128 0xf
 1947 00c0 05        		.uleb128 0x5
 1948 00c1 00        		.byte	0
 1949 00c2 31        		.uleb128 0x31
 1950 00c3 13        		.uleb128 0x13
 1951 00c4 02        		.uleb128 0x2
 1952 00c5 18        		.uleb128 0x18
 1953 00c6 00        		.byte	0
 1954 00c7 00        		.byte	0
 1955 00c8 10        		.uleb128 0x10
 1956 00c9 21        		.uleb128 0x21
 1957 00ca 00        		.byte	0
 1958 00cb 49        		.uleb128 0x49
 1959 00cc 13        		.uleb128 0x13
 1960 00cd 2F        		.uleb128 0x2f
 1961 00ce 0B        		.uleb128 0xb
 1962 00cf 00        		.byte	0
 1963 00d0 00        		.byte	0
 1964 00d1 11        		.uleb128 0x11
 1965 00d2 1D        		.uleb128 0x1d
 1966 00d3 01        		.byte	0x1
 1967 00d4 31        		.uleb128 0x31
 1968 00d5 13        		.uleb128 0x13
 1969 00d6 52        		.uleb128 0x52
 1970 00d7 01        		.uleb128 0x1
 1971 00d8 B842      		.uleb128 0x2138
 1972 00da 0B        		.uleb128 0xb
 1973 00db 11        		.uleb128 0x11
 1974 00dc 01        		.uleb128 0x1
 1975 00dd 12        		.uleb128 0x12
 1976 00de 06        		.uleb128 0x6
 1977 00df 58        		.uleb128 0x58
 1978 00e0 21        		.uleb128 0x21
 1979 00e1 01        		.sleb128 1
 1980 00e2 59        		.uleb128 0x59
 1981 00e3 0B        		.uleb128 0xb
 1982 00e4 57        		.uleb128 0x57
 1983 00e5 0B        		.uleb128 0xb
 1984 00e6 01        		.uleb128 0x1
 1985 00e7 13        		.uleb128 0x13
 1986 00e8 00        		.byte	0
 1987 00e9 00        		.byte	0
 1988 00ea 12        		.uleb128 0x12
 1989 00eb 1D        		.uleb128 0x1d


 1990 00ec 01        		.byte	0x1
 1991 00ed 31        		.uleb128 0x31
 1992 00ee 13        		.uleb128 0x13
 1993 00ef 52        		.uleb128 0x52
 1994 00f0 01        		.uleb128 0x1
 1995 00f1 B842      		.uleb128 0x2138
 1996 00f3 0B        		.uleb128 0xb
 1997 00f4 55        		.uleb128 0x55
 1998 00f5 17        		.uleb128 0x17
 1999 00f6 58        		.uleb128 0x58
 2000 00f7 21        		.uleb128 0x21
 2001 00f8 01        		.sleb128 1
 2002 00f9 59        		.uleb128 0x59
 2003 00fa 0B        		.uleb128 0xb
 2004 00fb 57        		.uleb128 0x57
 2005 00fc 0B        		.uleb128 0xb
 2006 00fd 00        		.byte	0
 2007 00fe 00        		.byte	0
 2008 00ff 13        		.uleb128 0x13
 2009 0100 2E        		.uleb128 0x2e
 2010 0101 01        		.byte	0x1
 2011 0102 3F        		.uleb128 0x3f
 2012 0103 19        		.uleb128 0x19
 2013 0104 03        		.uleb128 0x3
 2014 0105 0E        		.uleb128 0xe
 2015 0106 3A        		.uleb128 0x3a
 2016 0107 21        		.uleb128 0x21
 2017 0108 01        		.sleb128 1
 2018 0109 3B        		.uleb128 0x3b
 2019 010a 0B        		.uleb128 0xb
 2020 010b 39        		.uleb128 0x39
 2021 010c 21        		.uleb128 0x21
 2022 010d 06        		.sleb128 6
 2023 010e 27        		.uleb128 0x27
 2024 010f 19        		.uleb128 0x19
 2025 0110 11        		.uleb128 0x11
 2026 0111 01        		.uleb128 0x1
 2027 0112 12        		.uleb128 0x12
 2028 0113 06        		.uleb128 0x6
 2029 0114 40        		.uleb128 0x40
 2030 0115 18        		.uleb128 0x18
 2031 0116 7A        		.uleb128 0x7a
 2032 0117 19        		.uleb128 0x19
 2033 0118 01        		.uleb128 0x1
 2034 0119 13        		.uleb128 0x13
 2035 011a 00        		.byte	0
 2036 011b 00        		.byte	0
 2037 011c 14        		.uleb128 0x14
 2038 011d 48        		.uleb128 0x48
 2039 011e 00        		.byte	0
 2040 011f 7D        		.uleb128 0x7d
 2041 0120 01        		.uleb128 0x1
 2042 0121 8201      		.uleb128 0x82
 2043 0123 19        		.uleb128 0x19
 2044 0124 7F        		.uleb128 0x7f
 2045 0125 13        		.uleb128 0x13
 2046 0126 00        		.byte	0


 2047 0127 00        		.byte	0
 2048 0128 15        		.uleb128 0x15
 2049 0129 34        		.uleb128 0x34
 2050 012a 00        		.byte	0
 2051 012b 03        		.uleb128 0x3
 2052 012c 08        		.uleb128 0x8
 2053 012d 3A        		.uleb128 0x3a
 2054 012e 21        		.uleb128 0x21
 2055 012f 01        		.sleb128 1
 2056 0130 3B        		.uleb128 0x3b
 2057 0131 0B        		.uleb128 0xb
 2058 0132 39        		.uleb128 0x39
 2059 0133 0B        		.uleb128 0xb
 2060 0134 49        		.uleb128 0x49
 2061 0135 13        		.uleb128 0x13
 2062 0136 00        		.byte	0
 2063 0137 00        		.byte	0
 2064 0138 16        		.uleb128 0x16
 2065 0139 34        		.uleb128 0x34
 2066 013a 00        		.byte	0
 2067 013b 03        		.uleb128 0x3
 2068 013c 08        		.uleb128 0x8
 2069 013d 3A        		.uleb128 0x3a
 2070 013e 21        		.uleb128 0x21
 2071 013f 01        		.sleb128 1
 2072 0140 3B        		.uleb128 0x3b
 2073 0141 0B        		.uleb128 0xb
 2074 0142 39        		.uleb128 0x39
 2075 0143 0B        		.uleb128 0xb
 2076 0144 49        		.uleb128 0x49
 2077 0145 13        		.uleb128 0x13
 2078 0146 02        		.uleb128 0x2
 2079 0147 17        		.uleb128 0x17
 2080 0148 B742      		.uleb128 0x2137
 2081 014a 17        		.uleb128 0x17
 2082 014b 00        		.byte	0
 2083 014c 00        		.byte	0
 2084 014d 17        		.uleb128 0x17
 2085 014e 2E        		.uleb128 0x2e
 2086 014f 01        		.byte	0x1
 2087 0150 31        		.uleb128 0x31
 2088 0151 13        		.uleb128 0x13
 2089 0152 11        		.uleb128 0x11
 2090 0153 01        		.uleb128 0x1
 2091 0154 12        		.uleb128 0x12
 2092 0155 06        		.uleb128 0x6
 2093 0156 40        		.uleb128 0x40
 2094 0157 18        		.uleb128 0x18
 2095 0158 7A        		.uleb128 0x7a
 2096 0159 19        		.uleb128 0x19
 2097 015a 01        		.uleb128 0x1
 2098 015b 13        		.uleb128 0x13
 2099 015c 00        		.byte	0
 2100 015d 00        		.byte	0
 2101 015e 18        		.uleb128 0x18
 2102 015f 13        		.uleb128 0x13
 2103 0160 01        		.byte	0x1


 2104 0161 0B        		.uleb128 0xb
 2105 0162 0B        		.uleb128 0xb
 2106 0163 3A        		.uleb128 0x3a
 2107 0164 21        		.uleb128 0x21
 2108 0165 02        		.sleb128 2
 2109 0166 3B        		.uleb128 0x3b
 2110 0167 0B        		.uleb128 0xb
 2111 0168 39        		.uleb128 0x39
 2112 0169 21        		.uleb128 0x21
 2113 016a 09        		.sleb128 9
 2114 016b 01        		.uleb128 0x1
 2115 016c 13        		.uleb128 0x13
 2116 016d 00        		.byte	0
 2117 016e 00        		.byte	0
 2118 016f 19        		.uleb128 0x19
 2119 0170 2E        		.uleb128 0x2e
 2120 0171 01        		.byte	0x1
 2121 0172 3F        		.uleb128 0x3f
 2122 0173 19        		.uleb128 0x19
 2123 0174 03        		.uleb128 0x3
 2124 0175 0E        		.uleb128 0xe
 2125 0176 3A        		.uleb128 0x3a
 2126 0177 21        		.uleb128 0x21
 2127 0178 01        		.sleb128 1
 2128 0179 3B        		.uleb128 0x3b
 2129 017a 0B        		.uleb128 0xb
 2130 017b 39        		.uleb128 0x39
 2131 017c 21        		.uleb128 0x21
 2132 017d 05        		.sleb128 5
 2133 017e 27        		.uleb128 0x27
 2134 017f 19        		.uleb128 0x19
 2135 0180 49        		.uleb128 0x49
 2136 0181 13        		.uleb128 0x13
 2137 0182 11        		.uleb128 0x11
 2138 0183 01        		.uleb128 0x1
 2139 0184 12        		.uleb128 0x12
 2140 0185 06        		.uleb128 0x6
 2141 0186 40        		.uleb128 0x40
 2142 0187 18        		.uleb128 0x18
 2143 0188 7A        		.uleb128 0x7a
 2144 0189 19        		.uleb128 0x19
 2145 018a 01        		.uleb128 0x1
 2146 018b 13        		.uleb128 0x13
 2147 018c 00        		.byte	0
 2148 018d 00        		.byte	0
 2149 018e 1A        		.uleb128 0x1a
 2150 018f 1D        		.uleb128 0x1d
 2151 0190 01        		.byte	0x1
 2152 0191 31        		.uleb128 0x31
 2153 0192 13        		.uleb128 0x13
 2154 0193 52        		.uleb128 0x52
 2155 0194 01        		.uleb128 0x1
 2156 0195 B842      		.uleb128 0x2138
 2157 0197 0B        		.uleb128 0xb
 2158 0198 55        		.uleb128 0x55
 2159 0199 17        		.uleb128 0x17
 2160 019a 58        		.uleb128 0x58


 2161 019b 21        		.uleb128 0x21
 2162 019c 01        		.sleb128 1
 2163 019d 59        		.uleb128 0x59
 2164 019e 0B        		.uleb128 0xb
 2165 019f 57        		.uleb128 0x57
 2166 01a0 21        		.uleb128 0x21
 2167 01a1 02        		.sleb128 2
 2168 01a2 01        		.uleb128 0x1
 2169 01a3 13        		.uleb128 0x13
 2170 01a4 00        		.byte	0
 2171 01a5 00        		.byte	0
 2172 01a6 1B        		.uleb128 0x1b
 2173 01a7 48        		.uleb128 0x48
 2174 01a8 00        		.byte	0
 2175 01a9 7D        		.uleb128 0x7d
 2176 01aa 01        		.uleb128 0x1
 2177 01ab 7F        		.uleb128 0x7f
 2178 01ac 13        		.uleb128 0x13
 2179 01ad 00        		.byte	0
 2180 01ae 00        		.byte	0
 2181 01af 1C        		.uleb128 0x1c
 2182 01b0 2E        		.uleb128 0x2e
 2183 01b1 01        		.byte	0x1
 2184 01b2 3F        		.uleb128 0x3f
 2185 01b3 19        		.uleb128 0x19
 2186 01b4 03        		.uleb128 0x3
 2187 01b5 0E        		.uleb128 0xe
 2188 01b6 3A        		.uleb128 0x3a
 2189 01b7 21        		.uleb128 0x21
 2190 01b8 01        		.sleb128 1
 2191 01b9 3B        		.uleb128 0x3b
 2192 01ba 0B        		.uleb128 0xb
 2193 01bb 39        		.uleb128 0x39
 2194 01bc 0B        		.uleb128 0xb
 2195 01bd 27        		.uleb128 0x27
 2196 01be 19        		.uleb128 0x19
 2197 01bf 49        		.uleb128 0x49
 2198 01c0 13        		.uleb128 0x13
 2199 01c1 20        		.uleb128 0x20
 2200 01c2 21        		.uleb128 0x21
 2201 01c3 01        		.sleb128 1
 2202 01c4 01        		.uleb128 0x1
 2203 01c5 13        		.uleb128 0x13
 2204 01c6 00        		.byte	0
 2205 01c7 00        		.byte	0
 2206 01c8 1D        		.uleb128 0x1d
 2207 01c9 2E        		.uleb128 0x2e
 2208 01ca 01        		.byte	0x1
 2209 01cb 3F        		.uleb128 0x3f
 2210 01cc 19        		.uleb128 0x19
 2211 01cd 03        		.uleb128 0x3
 2212 01ce 0E        		.uleb128 0xe
 2213 01cf 3A        		.uleb128 0x3a
 2214 01d0 21        		.uleb128 0x21
 2215 01d1 01        		.sleb128 1
 2216 01d2 3B        		.uleb128 0x3b
 2217 01d3 0B        		.uleb128 0xb


 2218 01d4 39        		.uleb128 0x39
 2219 01d5 21        		.uleb128 0x21
 2220 01d6 06        		.sleb128 6
 2221 01d7 11        		.uleb128 0x11
 2222 01d8 01        		.uleb128 0x1
 2223 01d9 12        		.uleb128 0x12
 2224 01da 06        		.uleb128 0x6
 2225 01db 40        		.uleb128 0x40
 2226 01dc 18        		.uleb128 0x18
 2227 01dd 7A        		.uleb128 0x7a
 2228 01de 19        		.uleb128 0x19
 2229 01df 01        		.uleb128 0x1
 2230 01e0 13        		.uleb128 0x13
 2231 01e1 00        		.byte	0
 2232 01e2 00        		.byte	0
 2233 01e3 1E        		.uleb128 0x1e
 2234 01e4 34        		.uleb128 0x34
 2235 01e5 00        		.byte	0
 2236 01e6 03        		.uleb128 0x3
 2237 01e7 0E        		.uleb128 0xe
 2238 01e8 3A        		.uleb128 0x3a
 2239 01e9 21        		.uleb128 0x21
 2240 01ea 01        		.sleb128 1
 2241 01eb 3B        		.uleb128 0x3b
 2242 01ec 0B        		.uleb128 0xb
 2243 01ed 39        		.uleb128 0x39
 2244 01ee 0B        		.uleb128 0xb
 2245 01ef 49        		.uleb128 0x49
 2246 01f0 13        		.uleb128 0x13
 2247 01f1 00        		.byte	0
 2248 01f2 00        		.byte	0
 2249 01f3 1F        		.uleb128 0x1f
 2250 01f4 11        		.uleb128 0x11
 2251 01f5 01        		.byte	0x1
 2252 01f6 25        		.uleb128 0x25
 2253 01f7 0E        		.uleb128 0xe
 2254 01f8 13        		.uleb128 0x13
 2255 01f9 0B        		.uleb128 0xb
 2256 01fa 03        		.uleb128 0x3
 2257 01fb 0E        		.uleb128 0xe
 2258 01fc 1B        		.uleb128 0x1b
 2259 01fd 0E        		.uleb128 0xe
 2260 01fe 11        		.uleb128 0x11
 2261 01ff 01        		.uleb128 0x1
 2262 0200 12        		.uleb128 0x12
 2263 0201 06        		.uleb128 0x6
 2264 0202 10        		.uleb128 0x10
 2265 0203 17        		.uleb128 0x17
 2266 0204 00        		.byte	0
 2267 0205 00        		.byte	0
 2268 0206 20        		.uleb128 0x20
 2269 0207 24        		.uleb128 0x24
 2270 0208 00        		.byte	0
 2271 0209 0B        		.uleb128 0xb
 2272 020a 0B        		.uleb128 0xb
 2273 020b 3E        		.uleb128 0x3e
 2274 020c 0B        		.uleb128 0xb


 2275 020d 03        		.uleb128 0x3
 2276 020e 08        		.uleb128 0x8
 2277 020f 00        		.byte	0
 2278 0210 00        		.byte	0
 2279 0211 21        		.uleb128 0x21
 2280 0212 0F        		.uleb128 0xf
 2281 0213 00        		.byte	0
 2282 0214 0B        		.uleb128 0xb
 2283 0215 0B        		.uleb128 0xb
 2284 0216 00        		.byte	0
 2285 0217 00        		.byte	0
 2286 0218 22        		.uleb128 0x22
 2287 0219 0D        		.uleb128 0xd
 2288 021a 00        		.byte	0
 2289 021b 03        		.uleb128 0x3
 2290 021c 08        		.uleb128 0x8
 2291 021d 3A        		.uleb128 0x3a
 2292 021e 0B        		.uleb128 0xb
 2293 021f 3B        		.uleb128 0x3b
 2294 0220 0B        		.uleb128 0xb
 2295 0221 39        		.uleb128 0x39
 2296 0222 0B        		.uleb128 0xb
 2297 0223 49        		.uleb128 0x49
 2298 0224 13        		.uleb128 0x13
 2299 0225 38        		.uleb128 0x38
 2300 0226 0B        		.uleb128 0xb
 2301 0227 00        		.byte	0
 2302 0228 00        		.byte	0
 2303 0229 23        		.uleb128 0x23
 2304 022a 15        		.uleb128 0x15
 2305 022b 01        		.byte	0x1
 2306 022c 01        		.uleb128 0x1
 2307 022d 13        		.uleb128 0x13
 2308 022e 00        		.byte	0
 2309 022f 00        		.byte	0
 2310 0230 24        		.uleb128 0x24
 2311 0231 13        		.uleb128 0x13
 2312 0232 01        		.byte	0x1
 2313 0233 0B        		.uleb128 0xb
 2314 0234 05        		.uleb128 0x5
 2315 0235 3A        		.uleb128 0x3a
 2316 0236 0B        		.uleb128 0xb
 2317 0237 3B        		.uleb128 0x3b
 2318 0238 0B        		.uleb128 0xb
 2319 0239 39        		.uleb128 0x39
 2320 023a 0B        		.uleb128 0xb
 2321 023b 01        		.uleb128 0x1
 2322 023c 13        		.uleb128 0x13
 2323 023d 00        		.byte	0
 2324 023e 00        		.byte	0
 2325 023f 25        		.uleb128 0x25
 2326 0240 0D        		.uleb128 0xd
 2327 0241 00        		.byte	0
 2328 0242 03        		.uleb128 0x3
 2329 0243 0E        		.uleb128 0xe
 2330 0244 3A        		.uleb128 0x3a
 2331 0245 0B        		.uleb128 0xb


 2332 0246 3B        		.uleb128 0x3b
 2333 0247 0B        		.uleb128 0xb
 2334 0248 39        		.uleb128 0x39
 2335 0249 0B        		.uleb128 0xb
 2336 024a 49        		.uleb128 0x49
 2337 024b 13        		.uleb128 0x13
 2338 024c 38        		.uleb128 0x38
 2339 024d 05        		.uleb128 0x5
 2340 024e 00        		.byte	0
 2341 024f 00        		.byte	0
 2342 0250 26        		.uleb128 0x26
 2343 0251 21        		.uleb128 0x21
 2344 0252 00        		.byte	0
 2345 0253 49        		.uleb128 0x49
 2346 0254 13        		.uleb128 0x13
 2347 0255 2F        		.uleb128 0x2f
 2348 0256 05        		.uleb128 0x5
 2349 0257 00        		.byte	0
 2350 0258 00        		.byte	0
 2351 0259 27        		.uleb128 0x27
 2352 025a 34        		.uleb128 0x34
 2353 025b 00        		.byte	0
 2354 025c 03        		.uleb128 0x3
 2355 025d 0E        		.uleb128 0xe
 2356 025e 3A        		.uleb128 0x3a
 2357 025f 0B        		.uleb128 0xb
 2358 0260 3B        		.uleb128 0x3b
 2359 0261 0B        		.uleb128 0xb
 2360 0262 39        		.uleb128 0x39
 2361 0263 0B        		.uleb128 0xb
 2362 0264 49        		.uleb128 0x49
 2363 0265 13        		.uleb128 0x13
 2364 0266 02        		.uleb128 0x2
 2365 0267 17        		.uleb128 0x17
 2366 0268 B742      		.uleb128 0x2137
 2367 026a 17        		.uleb128 0x17
 2368 026b 00        		.byte	0
 2369 026c 00        		.byte	0
 2370 026d 28        		.uleb128 0x28
 2371 026e 2E        		.uleb128 0x2e
 2372 026f 00        		.byte	0
 2373 0270 3F        		.uleb128 0x3f
 2374 0271 19        		.uleb128 0x19
 2375 0272 03        		.uleb128 0x3
 2376 0273 0E        		.uleb128 0xe
 2377 0274 3A        		.uleb128 0x3a
 2378 0275 0B        		.uleb128 0xb
 2379 0276 3B        		.uleb128 0x3b
 2380 0277 0B        		.uleb128 0xb
 2381 0278 39        		.uleb128 0x39
 2382 0279 0B        		.uleb128 0xb
 2383 027a 20        		.uleb128 0x20
 2384 027b 0B        		.uleb128 0xb
 2385 027c 00        		.byte	0
 2386 027d 00        		.byte	0
 2387 027e 29        		.uleb128 0x29
 2388 027f 2E        		.uleb128 0x2e


 2389 0280 01        		.byte	0x1
 2390 0281 3F        		.uleb128 0x3f
 2391 0282 19        		.uleb128 0x19
 2392 0283 03        		.uleb128 0x3
 2393 0284 0E        		.uleb128 0xe
 2394 0285 3A        		.uleb128 0x3a
 2395 0286 0B        		.uleb128 0xb
 2396 0287 3B        		.uleb128 0x3b
 2397 0288 0B        		.uleb128 0xb
 2398 0289 39        		.uleb128 0x39
 2399 028a 0B        		.uleb128 0xb
 2400 028b 27        		.uleb128 0x27
 2401 028c 19        		.uleb128 0x19
 2402 028d 20        		.uleb128 0x20
 2403 028e 0B        		.uleb128 0xb
 2404 028f 01        		.uleb128 0x1
 2405 0290 13        		.uleb128 0x13
 2406 0291 00        		.byte	0
 2407 0292 00        		.byte	0
 2408 0293 2A        		.uleb128 0x2a
 2409 0294 0B        		.uleb128 0xb
 2410 0295 01        		.byte	0x1
 2411 0296 55        		.uleb128 0x55
 2412 0297 17        		.uleb128 0x17
 2413 0298 01        		.uleb128 0x1
 2414 0299 13        		.uleb128 0x13
 2415 029a 00        		.byte	0
 2416 029b 00        		.byte	0
 2417 029c 2B        		.uleb128 0x2b
 2418 029d 34        		.uleb128 0x34
 2419 029e 00        		.byte	0
 2420 029f 31        		.uleb128 0x31
 2421 02a0 13        		.uleb128 0x13
 2422 02a1 00        		.byte	0
 2423 02a2 00        		.byte	0
 2424 02a3 2C        		.uleb128 0x2c
 2425 02a4 0B        		.uleb128 0xb
 2426 02a5 01        		.byte	0x1
 2427 02a6 11        		.uleb128 0x11
 2428 02a7 01        		.uleb128 0x1
 2429 02a8 12        		.uleb128 0x12
 2430 02a9 06        		.uleb128 0x6
 2431 02aa 01        		.uleb128 0x1
 2432 02ab 13        		.uleb128 0x13
 2433 02ac 00        		.byte	0
 2434 02ad 00        		.byte	0
 2435 02ae 2D        		.uleb128 0x2d
 2436 02af 0B        		.uleb128 0xb
 2437 02b0 01        		.byte	0x1
 2438 02b1 11        		.uleb128 0x11
 2439 02b2 01        		.uleb128 0x1
 2440 02b3 12        		.uleb128 0x12
 2441 02b4 06        		.uleb128 0x6
 2442 02b5 00        		.byte	0
 2443 02b6 00        		.byte	0
 2444 02b7 2E        		.uleb128 0x2e
 2445 02b8 2E        		.uleb128 0x2e


 2446 02b9 01        		.byte	0x1
 2447 02ba 31        		.uleb128 0x31
 2448 02bb 13        		.uleb128 0x13
 2449 02bc 11        		.uleb128 0x11
 2450 02bd 01        		.uleb128 0x1
 2451 02be 12        		.uleb128 0x12
 2452 02bf 06        		.uleb128 0x6
 2453 02c0 40        		.uleb128 0x40
 2454 02c1 18        		.uleb128 0x18
 2455 02c2 7A        		.uleb128 0x7a
 2456 02c3 19        		.uleb128 0x19
 2457 02c4 00        		.byte	0
 2458 02c5 00        		.byte	0
 2459 02c6 2F        		.uleb128 0x2f
 2460 02c7 1D        		.uleb128 0x1d
 2461 02c8 01        		.byte	0x1
 2462 02c9 31        		.uleb128 0x31
 2463 02ca 13        		.uleb128 0x13
 2464 02cb 52        		.uleb128 0x52
 2465 02cc 01        		.uleb128 0x1
 2466 02cd B842      		.uleb128 0x2138
 2467 02cf 0B        		.uleb128 0xb
 2468 02d0 11        		.uleb128 0x11
 2469 02d1 01        		.uleb128 0x1
 2470 02d2 12        		.uleb128 0x12
 2471 02d3 06        		.uleb128 0x6
 2472 02d4 58        		.uleb128 0x58
 2473 02d5 0B        		.uleb128 0xb
 2474 02d6 59        		.uleb128 0x59
 2475 02d7 0B        		.uleb128 0xb
 2476 02d8 57        		.uleb128 0x57
 2477 02d9 0B        		.uleb128 0xb
 2478 02da 00        		.byte	0
 2479 02db 00        		.byte	0
 2480 02dc 00        		.byte	0
 2481               		.section	.debug_loclists,"",@progbits
 2482 0000 0000 03BE 		.long	.Ldebug_loc3-.Ldebug_loc2
 2483               	.Ldebug_loc2:
 2484 0004 0005      		.word	0x5
 2485 0006 04        		.byte	0x4
 2486 0007 00        		.byte	0
 2487 0008 0000 0000 		.long	0
 2488               	.Ldebug_loc0:
 2489               	.LVUS28:
 2490 000c 01        		.uleb128 .LVU268
 2491 000d 00        		.uleb128 .LVU282
 2492 000e 00        		.uleb128 .LVU282
 2493 000f 00        		.uleb128 .LVU283
 2494 0010 00        		.uleb128 .LVU283
 2495 0011 00        		.uleb128 0
 2496               	.LLST28:
 2497 0012 04        		.byte	0x4
 2498 0013 FC06      		.uleb128 .LVL69-.Ltext0
 2499 0015 9E07      		.uleb128 .LVL73-.Ltext0
 2500 0017 01        		.uleb128 0x1
 2501 0018 52        		.byte	0x52
 2502 0019 04        		.byte	0x4


 2503 001a 9E07      		.uleb128 .LVL73-.Ltext0
 2504 001c A207      		.uleb128 .LVL74-.Ltext0
 2505 001e 11        		.uleb128 0x11
 2506 001f 71        		.byte	0x71
 2507 0020 00        		.sleb128 0
 2508 0021 71        		.byte	0x71
 2509 0022 00        		.sleb128 0
 2510 0023 22        		.byte	0x22
 2511 0024 31        		.byte	0x31
 2512 0025 24        		.byte	0x24
 2513 0026 71        		.byte	0x71
 2514 0027 00        		.sleb128 0
 2515 0028 22        		.byte	0x22
 2516 0029 32        		.byte	0x32
 2517 002a 24        		.byte	0x24
 2518 002b 79        		.byte	0x79
 2519 002c 00        		.sleb128 0
 2520 002d 22        		.byte	0x22
 2521 002e 23        		.byte	0x23
 2522 002f 10        		.uleb128 0x10
 2523 0030 04        		.byte	0x4
 2524 0031 A207      		.uleb128 .LVL74-.Ltext0
 2525 0033 C807      		.uleb128 .LFE13-.Ltext0
 2526 0035 01        		.uleb128 0x1
 2527 0036 52        		.byte	0x52
 2528 0037 00        		.byte	0
 2529               	.LVUS29:
 2530 0038 01        		.uleb128 .LVU258
 2531 0039 00        		.uleb128 .LVU263
 2532 003a 00        		.uleb128 .LVU263
 2533 003b 01        		.uleb128 .LVU268
 2534               	.LLST29:
 2535 003c 04        		.byte	0x4
 2536 003d D006      		.uleb128 .LVL66-.Ltext0
 2537 003f EA06      		.uleb128 .LVL68-.Ltext0
 2538 0041 0B        		.uleb128 0xb
 2539 0042 70        		.byte	0x70
 2540 0043 00        		.sleb128 0
 2541 0044 3C        		.byte	0x3c
 2542 0045 1E        		.byte	0x1e
 2543 0046 03        		.byte	0x3
 2544 0047 0000 0000 		.long	semaphore+8
 2545 004b 22        		.byte	0x22
 2546 004c 9F        		.byte	0x9f
 2547 004d 04        		.byte	0x4
 2548 004e EA06      		.uleb128 .LVL68-.Ltext0
 2549 0050 FC06      		.uleb128 .LVL69-.Ltext0
 2550 0052 0C        		.uleb128 0xc
 2551 0053 91        		.byte	0x91
 2552 0054 70        		.sleb128 -16
 2553 0055 06        		.byte	0x6
 2554 0056 3C        		.byte	0x3c
 2555 0057 1E        		.byte	0x1e
 2556 0058 03        		.byte	0x3
 2557 0059 0000 0000 		.long	semaphore+8
 2558 005d 22        		.byte	0x22
 2559 005e 9F        		.byte	0x9f


 2560 005f 00        		.byte	0
 2561               	.LVUS30:
 2562 0060 00        		.uleb128 .LVU261
 2563 0061 01        		.uleb128 .LVU268
 2564               	.LLST30:
 2565 0062 04        		.byte	0x4
 2566 0063 E206      		.uleb128 .LVL67-.Ltext0
 2567 0065 FC06      		.uleb128 .LVL69-.Ltext0
 2568 0067 01        		.uleb128 0x1
 2569 0068 52        		.byte	0x52
 2570 0069 00        		.byte	0
 2571               	.LVUS32:
 2572 006a 03        		.uleb128 .LVU270
 2573 006b 00        		.uleb128 .LVU280
 2574 006c 00        		.uleb128 .LVU283
 2575 006d 00        		.uleb128 0
 2576               	.LLST32:
 2577 006e 04        		.byte	0x4
 2578 006f FC06      		.uleb128 .LVL69-.Ltext0
 2579 0071 9C07      		.uleb128 .LVL72-.Ltext0
 2580 0073 01        		.uleb128 0x1
 2581 0074 52        		.byte	0x52
 2582 0075 04        		.byte	0x4
 2583 0076 A207      		.uleb128 .LVL74-.Ltext0
 2584 0078 C807      		.uleb128 .LFE13-.Ltext0
 2585 007a 01        		.uleb128 0x1
 2586 007b 52        		.byte	0x52
 2587 007c 00        		.byte	0
 2588               	.LVUS33:
 2589 007d 03        		.uleb128 .LVU270
 2590 007e 00        		.uleb128 .LVU280
 2591 007f 00        		.uleb128 .LVU283
 2592 0080 00        		.uleb128 0
 2593               	.LLST33:
 2594 0081 04        		.byte	0x4
 2595 0082 FC06      		.uleb128 .LVL69-.Ltext0
 2596 0084 9C07      		.uleb128 .LVL72-.Ltext0
 2597 0086 06        		.uleb128 0x6
 2598 0087 03        		.byte	0x3
 2599 0088 0000 0000 		.long	ready
 2600 008c 9F        		.byte	0x9f
 2601 008d 04        		.byte	0x4
 2602 008e A207      		.uleb128 .LVL74-.Ltext0
 2603 0090 C807      		.uleb128 .LFE13-.Ltext0
 2604 0092 06        		.uleb128 0x6
 2605 0093 03        		.byte	0x3
 2606 0094 0000 0000 		.long	ready
 2607 0098 9F        		.byte	0x9f
 2608 0099 00        		.byte	0
 2609               	.LVUS34:
 2610 009a 00        		.uleb128 .LVU273
 2611 009b 00        		.uleb128 .LVU278
 2612 009c 00        		.uleb128 .LVU278
 2613 009d 00        		.uleb128 .LVU280
 2614 009e 00        		.uleb128 .LVU283
 2615 009f 00        		.uleb128 .LVU285
 2616 00a0 00        		.uleb128 .LVU285


 2617 00a1 00        		.uleb128 .LVU287
 2618 00a2 00        		.uleb128 .LVU287
 2619 00a3 00        		.uleb128 .LVU289
 2620 00a4 00        		.uleb128 .LVU289
 2621 00a5 00        		.uleb128 0
 2622               	.LLST34:
 2623 00a6 04        		.byte	0x4
 2624 00a7 8207      		.uleb128 .LVL70-.Ltext0
 2625 00a9 8C07      		.uleb128 .LVL71-.Ltext0
 2626 00ab 01        		.uleb128 0x1
 2627 00ac 50        		.byte	0x50
 2628 00ad 04        		.byte	0x4
 2629 00ae 8C07      		.uleb128 .LVL71-.Ltext0
 2630 00b0 9C07      		.uleb128 .LVL72-.Ltext0
 2631 00b2 01        		.uleb128 0x1
 2632 00b3 51        		.byte	0x51
 2633 00b4 04        		.byte	0x4
 2634 00b5 A207      		.uleb128 .LVL74-.Ltext0
 2635 00b7 A607      		.uleb128 .LVL75-.Ltext0
 2636 00b9 01        		.uleb128 0x1
 2637 00ba 50        		.byte	0x50
 2638 00bb 04        		.byte	0x4
 2639 00bc A607      		.uleb128 .LVL75-.Ltext0
 2640 00be B407      		.uleb128 .LVL76-.Ltext0
 2641 00c0 01        		.uleb128 0x1
 2642 00c1 51        		.byte	0x51
 2643 00c2 04        		.byte	0x4
 2644 00c3 B407      		.uleb128 .LVL76-.Ltext0
 2645 00c5 B807      		.uleb128 .LVL77-.Ltext0
 2646 00c7 01        		.uleb128 0x1
 2647 00c8 50        		.byte	0x50
 2648 00c9 04        		.byte	0x4
 2649 00ca B807      		.uleb128 .LVL77-.Ltext0
 2650 00cc C807      		.uleb128 .LFE13-.Ltext0
 2651 00ce 01        		.uleb128 0x1
 2652 00cf 51        		.byte	0x51
 2653 00d0 00        		.byte	0
 2654               	.LVUS21:
 2655 00d1 00        		.uleb128 .LVU190
 2656 00d2 00        		.uleb128 .LVU201
 2657 00d3 00        		.uleb128 .LVU221
 2658 00d4 00        		.uleb128 .LVU227
 2659               	.LLST21:
 2660 00d5 04        		.byte	0x4
 2661 00d6 EE04      		.uleb128 .LVL49-.Ltext0
 2662 00d8 AC05      		.uleb128 .LVL53-.Ltext0
 2663 00da 01        		.uleb128 0x1
 2664 00db 59        		.byte	0x59
 2665 00dc 04        		.byte	0x4
 2666 00dd DC05      		.uleb128 .LVL57-.Ltext0
 2667 00df F605      		.uleb128 .LVL60-.Ltext0
 2668 00e1 01        		.uleb128 0x1
 2669 00e2 59        		.byte	0x59
 2670 00e3 00        		.byte	0
 2671               	.LVUS22:
 2672 00e4 00        		.uleb128 .LVU190
 2673 00e5 00        		.uleb128 .LVU195


 2674 00e6 00        		.uleb128 .LVU195
 2675 00e7 00        		.uleb128 .LVU201
 2676 00e8 00        		.uleb128 .LVU221
 2677 00e9 00        		.uleb128 .LVU224
 2678 00ea 00        		.uleb128 .LVU224
 2679 00eb 00        		.uleb128 .LVU227
 2680               	.LLST22:
 2681 00ec 04        		.byte	0x4
 2682 00ed EE04      		.uleb128 .LVL49-.Ltext0
 2683 00ef 8A05      		.uleb128 .LVL51-.Ltext0
 2684 00f1 0B        		.uleb128 0xb
 2685 00f2 71        		.byte	0x71
 2686 00f3 00        		.sleb128 0
 2687 00f4 3C        		.byte	0x3c
 2688 00f5 1E        		.byte	0x1e
 2689 00f6 03        		.byte	0x3
 2690 00f7 0000 0000 		.long	semaphore+8
 2691 00fb 22        		.byte	0x22
 2692 00fc 9F        		.byte	0x9f
 2693 00fd 04        		.byte	0x4
 2694 00fe 8A05      		.uleb128 .LVL51-.Ltext0
 2695 0100 AC05      		.uleb128 .LVL53-.Ltext0
 2696 0102 0C        		.uleb128 0xc
 2697 0103 91        		.byte	0x91
 2698 0104 70        		.sleb128 -16
 2699 0105 06        		.byte	0x6
 2700 0106 3C        		.byte	0x3c
 2701 0107 1E        		.byte	0x1e
 2702 0108 03        		.byte	0x3
 2703 0109 0000 0000 		.long	semaphore+8
 2704 010d 22        		.byte	0x22
 2705 010e 9F        		.byte	0x9f
 2706 010f 04        		.byte	0x4
 2707 0110 DC05      		.uleb128 .LVL57-.Ltext0
 2708 0112 E005      		.uleb128 .LVL58-.Ltext0
 2709 0114 0B        		.uleb128 0xb
 2710 0115 71        		.byte	0x71
 2711 0116 00        		.sleb128 0
 2712 0117 3C        		.byte	0x3c
 2713 0118 1E        		.byte	0x1e
 2714 0119 03        		.byte	0x3
 2715 011a 0000 0000 		.long	semaphore+8
 2716 011e 22        		.byte	0x22
 2717 011f 9F        		.byte	0x9f
 2718 0120 04        		.byte	0x4
 2719 0121 E005      		.uleb128 .LVL58-.Ltext0
 2720 0123 F605      		.uleb128 .LVL60-.Ltext0
 2721 0125 0C        		.uleb128 0xc
 2722 0126 91        		.byte	0x91
 2723 0127 70        		.sleb128 -16
 2724 0128 06        		.byte	0x6
 2725 0129 3C        		.byte	0x3c
 2726 012a 1E        		.byte	0x1e
 2727 012b 03        		.byte	0x3
 2728 012c 0000 0000 		.long	semaphore+8
 2729 0130 22        		.byte	0x22
 2730 0131 9F        		.byte	0x9f


 2731 0132 00        		.byte	0
 2732               	.LVUS23:
 2733 0133 00        		.uleb128 .LVU193
 2734 0134 00        		.uleb128 .LVU197
 2735 0135 00        		.uleb128 .LVU197
 2736 0136 00        		.uleb128 .LVU201
 2737 0137 00        		.uleb128 .LVU221
 2738 0138 00        		.uleb128 .LVU225
 2739 0139 00        		.uleb128 .LVU225
 2740 013a 00        		.uleb128 .LVU227
 2741               	.LLST23:
 2742 013b 04        		.byte	0x4
 2743 013c 8205      		.uleb128 .LVL50-.Ltext0
 2744 013e 8E05      		.uleb128 .LVL52-.Ltext0
 2745 0140 01        		.uleb128 0x1
 2746 0141 50        		.byte	0x50
 2747 0142 04        		.byte	0x4
 2748 0143 8E05      		.uleb128 .LVL52-.Ltext0
 2749 0145 AC05      		.uleb128 .LVL53-.Ltext0
 2750 0147 01        		.uleb128 0x1
 2751 0148 51        		.byte	0x51
 2752 0149 04        		.byte	0x4
 2753 014a DC05      		.uleb128 .LVL57-.Ltext0
 2754 014c E605      		.uleb128 .LVL59-.Ltext0
 2755 014e 01        		.uleb128 0x1
 2756 014f 50        		.byte	0x50
 2757 0150 04        		.byte	0x4
 2758 0151 E605      		.uleb128 .LVL59-.Ltext0
 2759 0153 F605      		.uleb128 .LVL60-.Ltext0
 2760 0155 01        		.uleb128 0x1
 2761 0156 51        		.byte	0x51
 2762 0157 00        		.byte	0
 2763               	.LVUS26:
 2764 0158 04        		.uleb128 .LVU205
 2765 0159 01        		.uleb128 .LVU214
 2766 015a 04        		.uleb128 .LVU231
 2767 015b 01        		.uleb128 .LVU240
 2768               	.LLST26:
 2769 015c 04        		.byte	0x4
 2770 015d AC05      		.uleb128 .LVL53-.Ltext0
 2771 015f CA05      		.uleb128 .LVL55-.Ltext0
 2772 0161 06        		.uleb128 0x6
 2773 0162 03        		.byte	0x3
 2774 0163 0000 0000 		.long	ready
 2775 0167 9F        		.byte	0x9f
 2776 0168 04        		.byte	0x4
 2777 0169 F605      		.uleb128 .LVL60-.Ltext0
 2778 016b 9406      		.uleb128 .LVL62-.Ltext0
 2779 016d 06        		.uleb128 0x6
 2780 016e 03        		.byte	0x3
 2781 016f 0000 0000 		.long	ready
 2782 0173 9F        		.byte	0x9f
 2783 0174 00        		.byte	0
 2784               	.LVUS27:
 2785 0175 00        		.uleb128 .LVU208
 2786 0176 01        		.uleb128 .LVU214
 2787 0177 00        		.uleb128 .LVU234


 2788 0178 01        		.uleb128 .LVU240
 2789               	.LLST27:
 2790 0179 04        		.byte	0x4
 2791 017a B205      		.uleb128 .LVL54-.Ltext0
 2792 017c CA05      		.uleb128 .LVL55-.Ltext0
 2793 017e 01        		.uleb128 0x1
 2794 017f 51        		.byte	0x51
 2795 0180 04        		.byte	0x4
 2796 0181 FC05      		.uleb128 .LVL61-.Ltext0
 2797 0183 9406      		.uleb128 .LVL62-.Ltext0
 2798 0185 01        		.uleb128 0x1
 2799 0186 51        		.byte	0x51
 2800 0187 00        		.byte	0
 2801               	.LVUS14:
 2802 0188 02        		.uleb128 .LVU125
 2803 0189 01        		.uleb128 .LVU134
 2804               	.LLST14:
 2805 018a 04        		.byte	0x4
 2806 018b 9603      		.uleb128 .LVL32-.Ltext0
 2807 018d B603      		.uleb128 .LVL34-.Ltext0
 2808 018f 06        		.uleb128 0x6
 2809 0190 03        		.byte	0x3
 2810 0191 0000 0000 		.long	ready
 2811 0195 9F        		.byte	0x9f
 2812 0196 00        		.byte	0
 2813               	.LVUS15:
 2814 0197 00        		.uleb128 .LVU128
 2815 0198 01        		.uleb128 .LVU134
 2816               	.LLST15:
 2817 0199 04        		.byte	0x4
 2818 019a 9C03      		.uleb128 .LVL33-.Ltext0
 2819 019c B603      		.uleb128 .LVL34-.Ltext0
 2820 019e 01        		.uleb128 0x1
 2821 019f 50        		.byte	0x50
 2822 01a0 00        		.byte	0
 2823               	.LVUS3:
 2824 01a1 02        		.uleb128 .LVU58
 2825 01a2 00        		.uleb128 .LVU60
 2826 01a3 00        		.uleb128 .LVU60
 2827 01a4 00        		.uleb128 .LVU65
 2828 01a5 00        		.uleb128 .LVU103
 2829 01a6 00        		.uleb128 0
 2830               	.LLST3:
 2831 01a7 04        		.byte	0x4
 2832 01a8 7A        		.uleb128 .LVL9-.Ltext0
 2833 01a9 8201      		.uleb128 .LVL10-.Ltext0
 2834 01ab 02        		.uleb128 0x2
 2835 01ac 31        		.byte	0x31
 2836 01ad 9F        		.byte	0x9f
 2837 01ae 04        		.byte	0x4
 2838 01af 8201      		.uleb128 .LVL10-.Ltext0
 2839 01b1 9A01      		.uleb128 .LVL12-.Ltext0
 2840 01b3 01        		.uleb128 0x1
 2841 01b4 52        		.byte	0x52
 2842 01b5 04        		.byte	0x4
 2843 01b6 BC02      		.uleb128 .LVL25-.Ltext0
 2844 01b8 C602      		.uleb128 .LFE4-.Ltext0


 2845 01ba 01        		.uleb128 0x1
 2846 01bb 52        		.byte	0x52
 2847 01bc 00        		.byte	0
 2848               	.LVUS4:
 2849 01bd 01        		.uleb128 .LVU70
 2850 01be 01        		.uleb128 .LVU81
 2851               	.LLST4:
 2852 01bf 04        		.byte	0x4
 2853 01c0 BA01      		.uleb128 .LVL13-.Ltext0
 2854 01c2 E601      		.uleb128 .LVL16-.Ltext0
 2855 01c4 05        		.uleb128 0x5
 2856 01c5 03        		.byte	0x3
 2857 01c6 0000 0000 		.long	new_task
 2858 01ca 00        		.byte	0
 2859               	.LVUS5:
 2860 01cb 01        		.uleb128 .LVU75
 2861 01cc 02        		.uleb128 .LVU76
 2862 01cd 02        		.uleb128 .LVU76
 2863 01ce 01        		.uleb128 .LVU81
 2864               	.LLST5:
 2865 01cf 04        		.byte	0x4
 2866 01d0 CA01      		.uleb128 .LVL14-.Ltext0
 2867 01d2 CA01      		.uleb128 .LVL14-.Ltext0
 2868 01d4 09        		.uleb128 0x9
 2869 01d5 70        		.byte	0x70
 2870 01d6 00        		.sleb128 0
 2871 01d7 03        		.byte	0x3
 2872 01d8 0000 0000 		.long	stacks-4
 2873 01dc 22        		.byte	0x22
 2874 01dd 9F        		.byte	0x9f
 2875 01de 04        		.byte	0x4
 2876 01df CA01      		.uleb128 .LVL14-.Ltext0
 2877 01e1 E601      		.uleb128 .LVL16-.Ltext0
 2878 01e3 09        		.uleb128 0x9
 2879 01e4 70        		.byte	0x70
 2880 01e5 00        		.sleb128 0
 2881 01e6 03        		.byte	0x3
 2882 01e7 0000 0000 		.long	stacks-6
 2883 01eb 22        		.byte	0x22
 2884 01ec 9F        		.byte	0x9f
 2885 01ed 00        		.byte	0
 2886               	.LVUS6:
 2887 01ee 01        		.uleb128 .LVU78
 2888 01ef 02        		.uleb128 .LVU79
 2889 01f0 02        		.uleb128 .LVU79
 2890 01f1 01        		.uleb128 .LVU81
 2891               	.LLST6:
 2892 01f2 04        		.byte	0x4
 2893 01f3 D401      		.uleb128 .LVL15-.Ltext0
 2894 01f5 D401      		.uleb128 .LVL15-.Ltext0
 2895 01f7 09        		.uleb128 0x9
 2896 01f8 70        		.byte	0x70
 2897 01f9 00        		.sleb128 0
 2898 01fa 03        		.byte	0x3
 2899 01fb 0000 0000 		.long	stacks-66
 2900 01ff 22        		.byte	0x22
 2901 0200 9F        		.byte	0x9f


 2902 0201 04        		.byte	0x4
 2903 0202 D401      		.uleb128 .LVL15-.Ltext0
 2904 0204 E601      		.uleb128 .LVL16-.Ltext0
 2905 0206 09        		.uleb128 0x9
 2906 0207 70        		.byte	0x70
 2907 0208 00        		.sleb128 0
 2908 0209 03        		.byte	0x3
 2909 020a 0000 0000 		.long	stacks-70
 2910 020e 22        		.byte	0x22
 2911 020f 9F        		.byte	0x9f
 2912 0210 00        		.byte	0
 2913               	.LVUS8:
 2914 0211 01        		.uleb128 .LVU83
 2915 0212 00        		.uleb128 .LVU93
 2916 0213 00        		.uleb128 .LVU95
 2917 0214 00        		.uleb128 .LVU103
 2918               	.LLST8:
 2919 0215 04        		.byte	0x4
 2920 0216 F001      		.uleb128 .LVL17-.Ltext0
 2921 0218 9002      		.uleb128 .LVL20-.Ltext0
 2922 021a 05        		.uleb128 0x5
 2923 021b 03        		.byte	0x3
 2924 021c 0000 0000 		.long	new_task
 2925 0220 04        		.byte	0x4
 2926 0221 9602      		.uleb128 .LVL21-.Ltext0
 2927 0223 BC02      		.uleb128 .LVL25-.Ltext0
 2928 0225 05        		.uleb128 0x5
 2929 0226 03        		.byte	0x3
 2930 0227 0000 0000 		.long	new_task
 2931 022b 00        		.byte	0
 2932               	.LVUS9:
 2933 022c 01        		.uleb128 .LVU83
 2934 022d 00        		.uleb128 .LVU93
 2935 022e 00        		.uleb128 .LVU95
 2936 022f 00        		.uleb128 .LVU103
 2937               	.LLST9:
 2938 0230 04        		.byte	0x4
 2939 0231 F001      		.uleb128 .LVL17-.Ltext0
 2940 0233 9002      		.uleb128 .LVL20-.Ltext0
 2941 0235 06        		.uleb128 0x6
 2942 0236 03        		.byte	0x3
 2943 0237 0000 0000 		.long	ready
 2944 023b 9F        		.byte	0x9f
 2945 023c 04        		.byte	0x4
 2946 023d 9602      		.uleb128 .LVL21-.Ltext0
 2947 023f BC02      		.uleb128 .LVL25-.Ltext0
 2948 0241 06        		.uleb128 0x6
 2949 0242 03        		.byte	0x3
 2950 0243 0000 0000 		.long	ready
 2951 0247 9F        		.byte	0x9f
 2952 0248 00        		.byte	0
 2953               	.LVUS10:
 2954 0249 00        		.uleb128 .LVU86
 2955 024a 00        		.uleb128 .LVU91
 2956 024b 00        		.uleb128 .LVU91
 2957 024c 00        		.uleb128 .LVU93
 2958 024d 00        		.uleb128 .LVU95


 2959 024e 00        		.uleb128 .LVU97
 2960 024f 00        		.uleb128 .LVU97
 2961 0250 00        		.uleb128 .LVU99
 2962 0251 00        		.uleb128 .LVU99
 2963 0252 00        		.uleb128 .LVU101
 2964 0253 00        		.uleb128 .LVU101
 2965 0254 00        		.uleb128 .LVU103
 2966               	.LLST10:
 2967 0255 04        		.byte	0x4
 2968 0256 F601      		.uleb128 .LVL18-.Ltext0
 2969 0258 8002      		.uleb128 .LVL19-.Ltext0
 2970 025a 01        		.uleb128 0x1
 2971 025b 50        		.byte	0x50
 2972 025c 04        		.byte	0x4
 2973 025d 8002      		.uleb128 .LVL19-.Ltext0
 2974 025f 9002      		.uleb128 .LVL20-.Ltext0
 2975 0261 01        		.uleb128 0x1
 2976 0262 51        		.byte	0x51
 2977 0263 04        		.byte	0x4
 2978 0264 9602      		.uleb128 .LVL21-.Ltext0
 2979 0266 9A02      		.uleb128 .LVL22-.Ltext0
 2980 0268 01        		.uleb128 0x1
 2981 0269 50        		.byte	0x50
 2982 026a 04        		.byte	0x4
 2983 026b 9A02      		.uleb128 .LVL22-.Ltext0
 2984 026d A802      		.uleb128 .LVL23-.Ltext0
 2985 026f 01        		.uleb128 0x1
 2986 0270 51        		.byte	0x51
 2987 0271 04        		.byte	0x4
 2988 0272 A802      		.uleb128 .LVL23-.Ltext0
 2989 0274 AC02      		.uleb128 .LVL24-.Ltext0
 2990 0276 01        		.uleb128 0x1
 2991 0277 50        		.byte	0x50
 2992 0278 04        		.byte	0x4
 2993 0279 AC02      		.uleb128 .LVL24-.Ltext0
 2994 027b BC02      		.uleb128 .LVL25-.Ltext0
 2995 027d 01        		.uleb128 0x1
 2996 027e 51        		.byte	0x51
 2997 027f 00        		.byte	0
 2998               	.LVUS0:
 2999 0280 03        		.uleb128 .LVU3
 3000 0281 00        		.uleb128 .LVU4
 3001               	.LLST0:
 3002 0282 04        		.byte	0x4
 3003 0283 00        		.uleb128 .LVL0-.Ltext0
 3004 0284 06        		.uleb128 .LVL1-.Ltext0
 3005 0285 02        		.uleb128 0x2
 3006 0286 30        		.byte	0x30
 3007 0287 9F        		.byte	0x9f
 3008 0288 00        		.byte	0
 3009               	.LVUS1:
 3010 0289 02        		.uleb128 .LVU22
 3011 028a 01        		.uleb128 .LVU28
 3012 028b 01        		.uleb128 .LVU28
 3013 028c 01        		.uleb128 .LVU34
 3014 028d 01        		.uleb128 .LVU34
 3015 028e 01        		.uleb128 .LVU40


 3016 028f 01        		.uleb128 .LVU40
 3017 0290 01        		.uleb128 .LVU46
 3018 0291 01        		.uleb128 .LVU46
 3019 0292 01        		.uleb128 .LVU52
 3020 0293 01        		.uleb128 .LVU52
 3021 0294 00        		.uleb128 0
 3022               	.LLST1:
 3023 0295 04        		.byte	0x4
 3024 0296 32        		.uleb128 .LVL2-.Ltext0
 3025 0297 40        		.uleb128 .LVL3-.Ltext0
 3026 0298 02        		.uleb128 0x2
 3027 0299 30        		.byte	0x30
 3028 029a 9F        		.byte	0x9f
 3029 029b 04        		.byte	0x4
 3030 029c 40        		.uleb128 .LVL3-.Ltext0
 3031 029d 4C        		.uleb128 .LVL4-.Ltext0
 3032 029e 02        		.uleb128 0x2
 3033 029f 31        		.byte	0x31
 3034 02a0 9F        		.byte	0x9f
 3035 02a1 04        		.byte	0x4
 3036 02a2 4C        		.uleb128 .LVL4-.Ltext0
 3037 02a3 58        		.uleb128 .LVL5-.Ltext0
 3038 02a4 02        		.uleb128 0x2
 3039 02a5 32        		.byte	0x32
 3040 02a6 9F        		.byte	0x9f
 3041 02a7 04        		.byte	0x4
 3042 02a8 58        		.uleb128 .LVL5-.Ltext0
 3043 02a9 64        		.uleb128 .LVL6-.Ltext0
 3044 02aa 02        		.uleb128 0x2
 3045 02ab 33        		.byte	0x33
 3046 02ac 9F        		.byte	0x9f
 3047 02ad 04        		.byte	0x4
 3048 02ae 64        		.uleb128 .LVL6-.Ltext0
 3049 02af 70        		.uleb128 .LVL7-.Ltext0
 3050 02b0 02        		.uleb128 0x2
 3051 02b1 34        		.byte	0x34
 3052 02b2 9F        		.byte	0x9f
 3053 02b3 04        		.byte	0x4
 3054 02b4 70        		.uleb128 .LVL7-.Ltext0
 3055 02b5 72        		.uleb128 .LFE3-.Ltext0
 3056 02b6 02        		.uleb128 0x2
 3057 02b7 35        		.byte	0x35
 3058 02b8 9F        		.byte	0x9f
 3059 02b9 00        		.byte	0
 3060               	.LVUS11:
 3061 02ba 00        		.uleb128 .LVU110
 3062 02bb 01        		.uleb128 .LVU111
 3063 02bc 01        		.uleb128 .LVU111
 3064 02bd 00        		.uleb128 .LVU121
 3065 02be 00        		.uleb128 .LVU121
 3066 02bf 00        		.uleb128 .LVU122
 3067 02c0 00        		.uleb128 .LVU122
 3068 02c1 00        		.uleb128 0
 3069               	.LLST11:
 3070 02c2 04        		.byte	0x4
 3071 02c3 D202      		.uleb128 .LVL27-.Ltext0
 3072 02c5 D202      		.uleb128 .LVL27-.Ltext0


 3073 02c7 09        		.uleb128 0x9
 3074 02c8 70        		.byte	0x70
 3075 02c9 00        		.sleb128 0
 3076 02ca 03        		.byte	0x3
 3077 02cb 0000 0000 		.long	stacks
 3078 02cf 22        		.byte	0x22
 3079 02d0 9F        		.byte	0x9f
 3080 02d1 04        		.byte	0x4
 3081 02d2 D202      		.uleb128 .LVL27-.Ltext0
 3082 02d4 9203      		.uleb128 .LVL30-.Ltext0
 3083 02d6 09        		.uleb128 0x9
 3084 02d7 70        		.byte	0x70
 3085 02d8 00        		.sleb128 0
 3086 02d9 03        		.byte	0x3
 3087 02da 0000 0000 		.long	stacks-4
 3088 02de 22        		.byte	0x22
 3089 02df 9F        		.byte	0x9f
 3090 02e0 04        		.byte	0x4
 3091 02e1 9203      		.uleb128 .LVL30-.Ltext0
 3092 02e3 9403      		.uleb128 .LVL31-.Ltext0
 3093 02e5 0B        		.uleb128 0xb
 3094 02e6 72        		.byte	0x72
 3095 02e7 00        		.sleb128 0
 3096 02e8 3B        		.byte	0x3b
 3097 02e9 24        		.byte	0x24
 3098 02ea 03        		.byte	0x3
 3099 02eb 0000 0000 		.long	stacks-4
 3100 02ef 22        		.byte	0x22
 3101 02f0 9F        		.byte	0x9f
 3102 02f1 04        		.byte	0x4
 3103 02f2 9403      		.uleb128 .LVL31-.Ltext0
 3104 02f4 9603      		.uleb128 .LFE5-.Ltext0
 3105 02f6 0C        		.uleb128 0xc
 3106 02f7 91        		.byte	0x91
 3107 02f8 70        		.sleb128 -16
 3108 02f9 06        		.byte	0x6
 3109 02fa 3B        		.byte	0x3b
 3110 02fb 24        		.byte	0x24
 3111 02fc 03        		.byte	0x3
 3112 02fd 0000 0000 		.long	stacks-4
 3113 0301 22        		.byte	0x22
 3114 0302 9F        		.byte	0x9f
 3115 0303 00        		.byte	0
 3116               	.LVUS12:
 3117 0304 01        		.uleb128 .LVU114
 3118 0305 02        		.uleb128 .LVU115
 3119 0306 02        		.uleb128 .LVU115
 3120 0307 00        		.uleb128 .LVU121
 3121 0308 00        		.uleb128 .LVU121
 3122 0309 00        		.uleb128 .LVU122
 3123 030a 00        		.uleb128 .LVU122
 3124 030b 00        		.uleb128 0
 3125               	.LLST12:
 3126 030c 04        		.byte	0x4
 3127 030d F002      		.uleb128 .LVL28-.Ltext0
 3128 030f F002      		.uleb128 .LVL28-.Ltext0
 3129 0311 09        		.uleb128 0x9


 3130 0312 70        		.byte	0x70
 3131 0313 00        		.sleb128 0
 3132 0314 03        		.byte	0x3
 3133 0315 0000 0000 		.long	stacks-4
 3134 0319 22        		.byte	0x22
 3135 031a 9F        		.byte	0x9f
 3136 031b 04        		.byte	0x4
 3137 031c F002      		.uleb128 .LVL28-.Ltext0
 3138 031e 9203      		.uleb128 .LVL30-.Ltext0
 3139 0320 09        		.uleb128 0x9
 3140 0321 70        		.byte	0x70
 3141 0322 00        		.sleb128 0
 3142 0323 03        		.byte	0x3
 3143 0324 0000 0000 		.long	stacks-6
 3144 0328 22        		.byte	0x22
 3145 0329 9F        		.byte	0x9f
 3146 032a 04        		.byte	0x4
 3147 032b 9203      		.uleb128 .LVL30-.Ltext0
 3148 032d 9403      		.uleb128 .LVL31-.Ltext0
 3149 032f 0B        		.uleb128 0xb
 3150 0330 72        		.byte	0x72
 3151 0331 00        		.sleb128 0
 3152 0332 3B        		.byte	0x3b
 3153 0333 24        		.byte	0x24
 3154 0334 03        		.byte	0x3
 3155 0335 0000 0000 		.long	stacks-6
 3156 0339 22        		.byte	0x22
 3157 033a 9F        		.byte	0x9f
 3158 033b 04        		.byte	0x4
 3159 033c 9403      		.uleb128 .LVL31-.Ltext0
 3160 033e 9603      		.uleb128 .LFE5-.Ltext0
 3161 0340 0C        		.uleb128 0xc
 3162 0341 91        		.byte	0x91
 3163 0342 70        		.sleb128 -16
 3164 0343 06        		.byte	0x6
 3165 0344 3B        		.byte	0x3b
 3166 0345 24        		.byte	0x24
 3167 0346 03        		.byte	0x3
 3168 0347 0000 0000 		.long	stacks-6
 3169 034b 22        		.byte	0x22
 3170 034c 9F        		.byte	0x9f
 3171 034d 00        		.byte	0
 3172               	.LVUS13:
 3173 034e 01        		.uleb128 .LVU117
 3174 034f 02        		.uleb128 .LVU118
 3175 0350 02        		.uleb128 .LVU118
 3176 0351 00        		.uleb128 .LVU121
 3177 0352 00        		.uleb128 .LVU121
 3178 0353 00        		.uleb128 0
 3179               	.LLST13:
 3180 0354 04        		.byte	0x4
 3181 0355 FA02      		.uleb128 .LVL29-.Ltext0
 3182 0357 FA02      		.uleb128 .LVL29-.Ltext0
 3183 0359 09        		.uleb128 0x9
 3184 035a 70        		.byte	0x70
 3185 035b 00        		.sleb128 0
 3186 035c 03        		.byte	0x3


 3187 035d 0000 0000 		.long	stacks-66
 3188 0361 22        		.byte	0x22
 3189 0362 9F        		.byte	0x9f
 3190 0363 04        		.byte	0x4
 3191 0364 FA02      		.uleb128 .LVL29-.Ltext0
 3192 0366 9203      		.uleb128 .LVL30-.Ltext0
 3193 0368 09        		.uleb128 0x9
 3194 0369 70        		.byte	0x70
 3195 036a 00        		.sleb128 0
 3196 036b 03        		.byte	0x3
 3197 036c 0000 0000 		.long	stacks-70
 3198 0370 22        		.byte	0x22
 3199 0371 9F        		.byte	0x9f
 3200 0372 04        		.byte	0x4
 3201 0373 9203      		.uleb128 .LVL30-.Ltext0
 3202 0375 9603      		.uleb128 .LFE5-.Ltext0
 3203 0377 01        		.uleb128 0x1
 3204 0378 50        		.byte	0x50
 3205 0379 00        		.byte	0
 3206               	.LVUS16:
 3207 037a 00        		.uleb128 .LVU144
 3208 037b 00        		.uleb128 .LVU148
 3209 037c 00        		.uleb128 .LVU148
 3210 037d 00        		.uleb128 .LVU153
 3211 037e 00        		.uleb128 .LVU153
 3212 037f 00        		.uleb128 .LVU156
 3213 0380 00        		.uleb128 .LVU156
 3214 0381 00        		.uleb128 0
 3215               	.LLST16:
 3216 0382 04        		.byte	0x4
 3217 0383 D203      		.uleb128 .LVL38-.Ltext0
 3218 0385 DE03      		.uleb128 .LVL40-.Ltext0
 3219 0387 01        		.uleb128 0x1
 3220 0388 50        		.byte	0x50
 3221 0389 04        		.byte	0x4
 3222 038a DE03      		.uleb128 .LVL40-.Ltext0
 3223 038c FE03      		.uleb128 .LVL41-.Ltext0
 3224 038e 01        		.uleb128 0x1
 3225 038f 51        		.byte	0x51
 3226 0390 04        		.byte	0x4
 3227 0391 FE03      		.uleb128 .LVL41-.Ltext0
 3228 0393 8804      		.uleb128 .LVL42-.Ltext0
 3229 0395 01        		.uleb128 0x1
 3230 0396 50        		.byte	0x50
 3231 0397 04        		.byte	0x4
 3232 0398 8804      		.uleb128 .LVL42-.Ltext0
 3233 039a 9A04      		.uleb128 .LFE7-.Ltext0
 3234 039c 01        		.uleb128 0x1
 3235 039d 51        		.byte	0x51
 3236 039e 00        		.byte	0
 3237               	.LVUS17:
 3238 039f 00        		.uleb128 .LVU163
 3239 03a0 00        		.uleb128 0
 3240               	.LLST17:
 3241 03a1 04        		.byte	0x4
 3242 03a2 A004      		.uleb128 .LVL44-.Ltext0
 3243 03a4 B804      		.uleb128 .LFE8-.Ltext0


 3244 03a6 01        		.uleb128 0x1
 3245 03a7 50        		.byte	0x50
 3246 03a8 00        		.byte	0
 3247               	.LVUS18:
 3248 03a9 02        		.uleb128 .LVU172
 3249 03aa 01        		.uleb128 .LVU181
 3250               	.LLST18:
 3251 03ab 04        		.byte	0x4
 3252 03ac B804      		.uleb128 .LVL45-.Ltext0
 3253 03ae D804      		.uleb128 .LVL47-.Ltext0
 3254 03b0 06        		.uleb128 0x6
 3255 03b1 03        		.byte	0x3
 3256 03b2 0000 0000 		.long	ready
 3257 03b6 9F        		.byte	0x9f
 3258 03b7 00        		.byte	0
 3259               	.LVUS19:
 3260 03b8 00        		.uleb128 .LVU175
 3261 03b9 01        		.uleb128 .LVU181
 3262               	.LLST19:
 3263 03ba 04        		.byte	0x4
 3264 03bb BE04      		.uleb128 .LVL46-.Ltext0
 3265 03bd D804      		.uleb128 .LVL47-.Ltext0
 3266 03bf 01        		.uleb128 0x1
 3267 03c0 50        		.byte	0x50
 3268 03c1 00        		.byte	0
 3269               	.Ldebug_loc3:
 3270               		.section	.debug_aranges,"",@progbits
 3271 0000 0000 001C 		.long	0x1c
 3272 0004 0002      		.word	0x2
 3273 0006 0000 0000 		.long	.Ldebug_info0
 3274 000a 04        		.byte	0x4
 3275 000b 00        		.byte	0
 3276 000c 0000      		.word	0
 3277 000e 0000      		.word	0
 3278 0010 0000 0000 		.long	.Ltext0
 3279 0014 0000 03F2 		.long	.Letext0-.Ltext0
 3280 0018 0000 0000 		.long	0
 3281 001c 0000 0000 		.long	0
 3282               		.section	.debug_rnglists,"",@progbits
 3283               	.Ldebug_ranges0:
 3284 0000 0000 0049 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 3285               	.Ldebug_ranges2:
 3286 0004 0005      		.word	0x5
 3287 0006 04        		.byte	0x4
 3288 0007 00        		.byte	0
 3289 0008 0000 0000 		.long	0
 3290               	.LLRL2:
 3291 000c 04        		.byte	0x4
 3292 000d 7A        		.uleb128 .LBB19-.Ltext0
 3293 000e 9401      		.uleb128 .LBE19-.Ltext0
 3294 0010 04        		.byte	0x4
 3295 0011 BC02      		.uleb128 .LBB26-.Ltext0
 3296 0013 C602      		.uleb128 .LBE26-.Ltext0
 3297 0015 00        		.byte	0
 3298               	.LLRL7:
 3299 0016 04        		.byte	0x4
 3300 0017 F001      		.uleb128 .LBB22-.Ltext0


 3301 0019 9002      		.uleb128 .LBE22-.Ltext0
 3302 001b 04        		.byte	0x4
 3303 001c 9602      		.uleb128 .LBB25-.Ltext0
 3304 001e BC02      		.uleb128 .LBE25-.Ltext0
 3305 0020 00        		.byte	0
 3306               	.LLRL20:
 3307 0021 04        		.byte	0x4
 3308 0022 EE04      		.uleb128 .LBB39-.Ltext0
 3309 0024 AC05      		.uleb128 .LBE39-.Ltext0
 3310 0026 04        		.byte	0x4
 3311 0027 DC05      		.uleb128 .LBB49-.Ltext0
 3312 0029 F605      		.uleb128 .LBE49-.Ltext0
 3313 002b 00        		.byte	0
 3314               	.LLRL24:
 3315 002c 04        		.byte	0x4
 3316 002d AC05      		.uleb128 .LBB42-.Ltext0
 3317 002f D405      		.uleb128 .LBE42-.Ltext0
 3318 0031 04        		.byte	0x4
 3319 0032 F605      		.uleb128 .LBB50-.Ltext0
 3320 0034 9E06      		.uleb128 .LBE50-.Ltext0
 3321 0036 00        		.byte	0
 3322               	.LLRL25:
 3323 0037 04        		.byte	0x4
 3324 0038 AC05      		.uleb128 .LBB44-.Ltext0
 3325 003a CA05      		.uleb128 .LBE44-.Ltext0
 3326 003c 04        		.byte	0x4
 3327 003d F605      		.uleb128 .LBB47-.Ltext0
 3328 003f 9406      		.uleb128 .LBE47-.Ltext0
 3329 0041 00        		.byte	0
 3330               	.LLRL31:
 3331 0042 04        		.byte	0x4
 3332 0043 FC06      		.uleb128 .LBB53-.Ltext0
 3333 0045 9C07      		.uleb128 .LBE53-.Ltext0
 3334 0047 04        		.byte	0x4
 3335 0048 A207      		.uleb128 .LBB56-.Ltext0
 3336 004a C807      		.uleb128 .LBE56-.Ltext0
 3337 004c 00        		.byte	0
 3338               	.Ldebug_ranges3:
 3339               		.section	.debug_line,"",@progbits
 3340               	.Ldebug_line0:
 3341 0000 0000 0506 		.section	.debug_str,"MS",@progbits,1
 3341      0003 0000 
 3341      0029 0201 
 3341      FB0E 0D00 
 3341      0101 0101 
 3342               	.LASF26:
 3343 0000 7374 6163 		.string	"stacks"
 3343      6B73 00
 3344               	.LASF19:
 3345 0007 6E65 7874 		.string	"next"
 3345      00
 3346               	.LASF42:
 3347 000c 7373 7031 		.string	"ssp1"
 3347      00
 3348               	.LASF43:
 3349 0011 7373 7032 		.string	"ssp2"
 3349      00


 3350               	.LASF11:
 3351 0016 636F 756E 		.string	"count"
 3351      7400 
 3352               	.LASF16:
 3353 001c 7374 6163 		.string	"stack_ptr"
 3353      6B5F 7074 
 3353      7200 
 3354               	.LASF34:
 3355 0026 7076 5F68 		.string	"pv_handler"
 3355      616E 646C 
 3355      6572 00
 3356               	.LASF20:
 3357 0031 5443 425F 		.string	"TCB_TYPE"
 3357      5459 5045 
 3357      00
 3358               	.LASF2:
 3359 003a 7368 6F72 		.string	"short int"
 3359      7420 696E 
 3359      7400 
 3360               	.LASF18:
 3361 0044 7374 6174 		.string	"status"
 3361      7573 00
 3362               	.LASF28:
 3363 004b 6E65 775F 		.string	"new_task"
 3363      7461 736B 
 3363      00
 3364               	.LASF41:
 3365 0054 696E 6974 		.string	"init_stack"
 3365      5F73 7461 
 3365      636B 00
 3366               	.LASF27:
 3367 005f 6375 7272 		.string	"curr_task"
 3367      5F74 6173 
 3367      6B00 
 3368               	.LASF24:
 3369 0069 7365 6D61 		.string	"semaphore"
 3369      7068 6F72 
 3369      6500 
 3370               	.LASF44:
 3371 0073 7365 745F 		.string	"set_task"
 3371      7461 736B 
 3371      00
 3372               	.LASF1:
 3373 007c 756E 7369 		.string	"unsigned char"
 3373      676E 6564 
 3373      2063 6861 
 3373      7200 
 3374               	.LASF40:
 3375 008a 7265 6D6F 		.string	"removeq"
 3375      7665 7100 
 3376               	.LASF5:
 3377 0092 6C6F 6E67 		.string	"long unsigned int"
 3377      2075 6E73 
 3377      6967 6E65 
 3377      6420 696E 
 3377      7400 
 3378               	.LASF51:


 3379 00a4 6164 6471 		.string	"addq"
 3379      00
 3380               	.LASF3:
 3381 00a9 7368 6F72 		.string	"short unsigned int"
 3381      7420 756E 
 3381      7369 676E 
 3381      6564 2069 
 3381      6E74 00
 3382               	.LASF15:
 3383 00bc 7461 736B 		.string	"task_addr"
 3383      5F61 6464 
 3383      7200 
 3384               	.LASF17:
 3385 00c6 7072 696F 		.string	"priority"
 3385      7269 7479 
 3385      00
 3386               	.LASF21:
 3387 00cf 7573 7461 		.string	"ustack"
 3387      636B 00
 3388               	.LASF8:
 3389 00d6 6C6F 6E67 		.string	"long double"
 3389      2064 6F75 
 3389      626C 6500 
 3390               	.LASF29:
 3391 00e2 6E65 7874 		.string	"next_task"
 3391      5F74 6173 
 3391      6B00 
 3392               	.LASF45:
 3393 00ec 6265 6769 		.string	"begin_sch"
 3393      6E5F 7363 
 3393      6800 
 3394               	.LASF47:
 3395 00f6 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 3395      4331 3720 
 3395      3131 2E34 
 3395      2E30 202D 
 3395      6D63 7075 
 3396               	.LASF33:
 3397 013a 696E 6974 		.string	"init_timer"
 3397      5F74 696D 
 3397      6572 00
 3398               	.LASF9:
 3399 0145 756E 7369 		.string	"unsigned int"
 3399      676E 6564 
 3399      2069 6E74 
 3399      00
 3400               	.LASF38:
 3401 0152 765F 626F 		.string	"v_body"
 3401      6479 00
 3402               	.LASF30:
 3403 0159 7265 6164 		.string	"ready"
 3403      7900 
 3404               	.LASF7:
 3405 015f 6C6F 6E67 		.string	"long long unsigned int"
 3405      206C 6F6E 
 3405      6720 756E 
 3405      7369 676E 


 3405      6564 2069 
 3406               	.LASF13:
 3407 0176 5441 534B 		.string	"TASK_ID_TYPE"
 3407      5F49 445F 
 3407      5459 5045 
 3407      00
 3408               	.LASF12:
 3409 0183 7461 736B 		.string	"task_list"
 3409      5F6C 6973 
 3409      7400 
 3410               	.LASF46:
 3411 018d 696E 6974 		.string	"init_kernel"
 3411      5F6B 6572 
 3411      6E65 6C00 
 3412               	.LASF32:
 3413 0199 6669 7273 		.string	"first_task"
 3413      745F 7461 
 3413      736B 00
 3414               	.LASF48:
 3415 01a4 6D74 6B5F 		.string	"mtk_c.c"
 3415      632E 6300 
 3416               	.LASF39:
 3417 01ac 705F 626F 		.string	"p_body"
 3417      6479 00
 3418               	.LASF6:
 3419 01b3 6C6F 6E67 		.string	"long long int"
 3419      206C 6F6E 
 3419      6720 696E 
 3419      7400 
 3420               	.LASF10:
 3421 01c1 6368 6172 		.string	"char"
 3421      00
 3422               	.LASF36:
 3423 01c6 7761 6B65 		.string	"wakeup"
 3423      7570 00
 3424               	.LASF31:
 3425 01cd 7377 7463 		.string	"swtch"
 3425      6800 
 3426               	.LASF49:
 3427 01d3 2F68 6F6D 		.string	"/home/students/1108981965/\343\203\211\343\202\255\343\203\245\343\203\241\343\203\263\34
 3427      652F 7374 
 3427      7564 656E 
 3427      7473 2F31 
 3427      3130 3839 
 3428               	.LASF22:
 3429 0211 7373 7461 		.string	"sstack"
 3429      636B 00
 3430               	.LASF14:
 3431 0218 5345 4D41 		.string	"SEMAPHORE_TYPE"
 3431      5048 4F52 
 3431      455F 5459 
 3431      5045 00
 3432               	.LASF4:
 3433 0227 6C6F 6E67 		.string	"long int"
 3433      2069 6E74 
 3433      00
 3434               	.LASF35:


 3435 0230 7461 736B 		.string	"task_id"
 3435      5F69 6400 
 3436               	.LASF0:
 3437 0238 7369 676E 		.string	"signed char"
 3437      6564 2063 
 3437      6861 7200 
 3438               	.LASF23:
 3439 0244 5354 4143 		.string	"STACK_TYPE"
 3439      4B5F 5459 
 3439      5045 00
 3440               	.LASF37:
 3441 024f 736C 6565 		.string	"sleep"
 3441      7000 
 3442               	.LASF50:
 3443 0255 7363 6865 		.string	"sched"
 3443      6400 
 3444               	.LASF25:
 3445 025b 7461 736B 		.string	"task_tab"
 3445      5F74 6162 
 3445      00
 3446               		.ident	"GCC: (GNU) 11.4.0"




   1               	.global outbyte
   2               	.include "equdefs.inc"
   1               	***********************************************
   2               	** 変数の定義
   3               	***********************************************
   4               	
   5               	***************************************************************
   6               	** 各種レジスタ定義
   7               	***************************************************************
   8               	***************
   9               	** レジスタ群の先頭
  10               	***************
  11               	.equ REGBASE, 	0xFFF000 	| DMAP を使用．
  12               	.equ IOBASE, 	0x00d00000
  13               		
  14               	***************
  15               	** 割り込み関係のレジスタ
  16               	***************
  17               	.equ IVR, REGBASE+0x300 	| 割り込みベクタレジスタ
  18               	.equ IMR, REGBASE+0x304 	| 割り込みマスクレジスタ
  19               	.equ ISR, REGBASE+0x30c 	| 割り込みステータスレジスタ
  20               	.equ IPR, REGBASE+0x310 	| 割り込みペンディングレジスタ
  21               		
  22               	***************
  23               	** タイマ関係のレジスタ
  24               	***************
  25               	.equ TCTL1, 	REGBASE+0x600 	| タイマ１コントロールレジスタ
  26               	.equ TPRER1, 	REGBASE+0x602 	| タイマ１プリスケーラレジスタ
  27               	.equ TCMP1, 	REGBASE+0x604 	| タイマ１コンペアレジスタ
  28               	.equ TCN1, 	REGBASE+0x608 	| タイマ１カウンタレジスタ
  29               	.equ TSTAT1, 	REGBASE+0x60a 	| タイマ１ステータスレジスタ
  30               		
  31               	***************
  32               	** UART1（送受信）関係のレジスタ
  33               	***************
  34               	.equ USTCNT1, 	REGBASE+0x900 	| UART1 ステータス/コントロールレジスタ
  35               	.equ UBAUD1, 	REGBASE+0x902 	| UART1 ボーコントロールレジスタ
  36               	.equ URX1, 	REGBASE+0x904 	| UART1 受信レジスタ
  37               	.equ UTX1, 	REGBASE+0x906 	| UART1 送信レジスタ
  38               		
  39               	***************
  40               	** LED
  41               	***************
  42               	.equ LED7, IOBASE+0x000002f
  43               	.equ LED6, IOBASE+0x000002d
  44               	.equ LED5, IOBASE+0x000002b
  45               	.equ LED4, IOBASE+0x0000029
  46               	.equ LED3, IOBASE+0x000003f
  47               	.equ LED2, IOBASE+0x000003d
  48               	.equ LED1, IOBASE+0x000003b
  49               	.equ LED0, IOBASE+0x0000039
  50               	
  51               	***************
  52               	** システムコール番号
  53               	***************
  54               	.equ SYSCALL_NUM_GETSTRING, 	1
  55               	.equ SYSCALL_NUM_PUTSTRING, 	2


  56               	.equ SYSCALL_NUM_RESET_TIMER, 	3
  57               	.equ SYSCALL_NUM_SET_TIMER, 	4
  58               	
  59               	****************************************************************
  60               	*** 初期値のあるデータ領域
  61               	****************************************************************
  62               	.section .data
  63               	
  64               	.even 				| \n: 次の行へ (ラインフィード)
  65 0000 0000      	TTC:	.dc.w 0
  66               	.even
  67               		
  68               	****************************************************************
  69               	*** 初期値の無いデータ領域
  70               	****************************************************************
  71               	.section .bss
  72 0000 0000 0000 	BUF: .ds.b 256 			| BUF[256]
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73               	
  74               	.even
  75 0100 0000 0000 	USR_STK: .ds.b 0x4000 		| ユーザスタック領域
  75      0000 0000 
  75      0000 0000 
  75      0000 0000 
  75      0000 0000 
  76               	.even
  77               	USR_STK_TOP: 			| ユーザスタック領域の最後尾
  78               		
  79               	*******************************
  80               	.section .bss
  81 4100 0000 0000 	Queue0:		.ds.b	274	/* 受信用キュー */
  81      0000 0000 
  81      0000 0000 
  81      0000 0000 
  81      0000 0000 
  82 4212 0000 0000 	Queue1:		.ds.b	274	/* 送信用キュー */
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  83               	
  84               	.section .text
  85               	.equ	BF_START, 	0		/* キューのデータ領域の先頭 */
  86               	.equ	BF_END, 	255		/* キューのデータ領域の最後尾 */
  87               	.equ	top, 		256		/* キューの先頭アドレスを保持へのオフセット */
  88               	.equ	out, 		260		/* 次にpopするデータアドレスを保持へのオフセット */
  89               	.equ	in, 		264		/* 次にinするデータアドレスを保持へのオフセット */
  90               	.equ	bottom, 	268		/* キューの最終アドレスを保持へのオフセット */
  91               	.equ	s, 		272		/* キュー内の要素数を保持する変数へのオフセット */
  92               	
  93               	
  94               	
   3               	
   4               	.text


   5               	.even
   6               	
   7               	outbyte:
   8 0000 48E7 7000 		movem.l	%d1-%d3, -(%sp)
   9               		
  10               	outbyte_loop:
  11 0004 7002      		move.l  #SYSCALL_NUM_PUTSTRING, %d0
  12 0006 7200      	   	move.l  #0, %d1
  13 0008 240F      	   	move.l  %sp, %d2                 
  14 000a 0682 0000 	   	addi.l  #19, %d2
  14      0013 
  15 0010 7601      	    	move.l  #1, %d3                  
  16 0012 4E40      	    	trap    #0    
  17               	
  18 0014 0C80 0000 		cmpi.l   #0, %d0
  18      0000 
  19 001a 6700 FFE8 		beq	outbyte_loop
  20               	
  21 001e 4CDF 000E 		movem.l  (%sp)+, %d1-%d3
  22 0022 4E75      		rts
  23               	




   1               	#NO_APP
   2               		.file	"test2.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.section	.rodata.str1.1,"aMS",@progbits,1
   7               	.LC0:
   8 0000 2074 6173 		.string	" task1 start"
   8      6B31 2073 
   8      7461 7274 
   8      00
   9               		.globl	__modsi3
  10               		.globl	__mulsi3
  11               		.globl	__udivsi3
  12               		.globl	__divsi3
  13               	.LC1:
  14 000d 7461 736B 		.string	"task1 ,%d times\n"
  14      3120 2C25 
  14      6420 7469 
  14      6D65 730A 
  14      00
  15               	.LC2:
  16 001e 2074 6173 		.string	" task1 is runnnig"
  16      6B31 2069 
  16      7320 7275 
  16      6E6E 6E69 
  16      6700 
  17               	.LC3:
  18 0030 6E74 7461 		.string	"nttask is %d now\n"
  18      736B 2069 
  18      7320 2564 
  18      206E 6F77 
  18      0A00 
  19               	.LC4:
  20 0042 2020 2020 		.string	"              task1 is finished"
  20      2020 2020 
  20      2020 2020 
  20      2020 7461 
  20      736B 3120 
  21               		.text
  22               		.align	2
  23               		.globl	task1
  24               		.type	task1, @function
  25               	task1:
  26               	.LFB4:
  27               		.file 1 "test2.c"
   1:test2.c       **** #include <stdio.h>
   2:test2.c       **** #include "mtk_c.h" // マルチタスクカーネル用ヘッダー
   3:test2.c       **** int N=3;
   4:test2.c       **** int K=10000;
   5:test2.c       **** volatile int nttask;
   6:test2.c       **** 
   7:test2.c       **** int task_0(){
   8:test2.c       **** 	while(1){
   9:test2.c       **** 		printf(" task0 is runnnig\n");
  10:test2.c       **** 		P(0);
  11:test2.c       **** 		if(nttask == N){


  12:test2.c       **** 			nttask=0;
  13:test2.c       **** 			for (int i=0; i<N; i++){
  14:test2.c       **** 				printf("  do V(1) ,%d times\n",i+1);
  15:test2.c       **** 				V(1);
  16:test2.c       **** 			}
  17:test2.c       **** 			printf("tasks reset\n");	
  18:test2.c       **** 		}
  19:test2.c       **** 		V(0);
  20:test2.c       **** 		printf("jmp to skipmt\n");
  21:test2.c       **** 		skipmt();
  22:test2.c       **** 		printf("task0 is back\n");
  23:test2.c       **** 	}
  24:test2.c       **** }
  25:test2.c       **** 
  26:test2.c       **** 
  27:test2.c       **** int task1(){
  28               		.loc 1 27 12 view -0
  29               		.cfi_startproc
  30 0000 48E7 303E 		movem.l #12350,-(%sp)
  31               		.cfi_def_cfa_offset 32
  32               		.cfi_offset 2, -32
  33               		.cfi_offset 3, -28
  34               		.cfi_offset 10, -24
  35               		.cfi_offset 11, -20
  36               		.cfi_offset 12, -16
  37               		.cfi_offset 13, -12
  38               		.cfi_offset 14, -8
  39 0004 45F9 0000 		lea puts,%a2
  39      0000 
  40 000a 47F9 0000 		lea __modsi3,%a3
  40      0000 
  41 0010 263C 0000 		move.l #__divsi3,%d3
  41      0000 
  42 0016 4BF9 0000 		lea printf,%a5
  42      0000 
  43 001c 49F9 0000 		lea P,%a4
  43      0000 
  44 0022 4DF9 0000 		lea V,%a6
  44      0000 
  45               	.L5:
  28:test2.c       **** 	while(1){
  46               		.loc 1 28 2 view .LVU1
  29:test2.c       **** 		printf(" task1 start\n");
  47               		.loc 1 29 3 view .LVU2
  48 0028 4879 0000 		pea .LC0
  48      0000 
  49               		.cfi_def_cfa_offset 36
  50 002e 4E92      		jsr (%a2)
  51               	.LVL0:
  30:test2.c       **** 		for(int k=0; k<K; k++){
  52               		.loc 1 30 3 view .LVU3
  53               	.LBB2:
  54               		.loc 1 30 7 view .LVU4
  55               		.loc 1 30 17 view .LVU5
  56 0030 588F      		addq.l #4,%sp
  57               		.cfi_def_cfa_offset 32
  58 0032 4AB9 0000 		tst.l K


  58      0000 
  59 0038 6F1A      		jle .L2
  60               		.loc 1 30 11 is_stmt 0 view .LVU6
  61 003a 7400      		moveq #0,%d2
  62               	.LVL1:
  63               	.L4:
  31:test2.c       **** 			if(k%1000==0){
  64               		.loc 1 31 4 is_stmt 1 view .LVU7
  30:test2.c       **** 		for(int k=0; k<K; k++){
  65               		.loc 1 30 17 is_stmt 0 view .LVU8
  66 003c 4878 03E8 		pea 1000.w
  67               		.cfi_def_cfa_offset 36
  68 0040 2F02      		move.l %d2,-(%sp)
  69               		.cfi_def_cfa_offset 40
  70 0042 4E93      		jsr (%a3)
  71               	.LVL2:
  72 0044 508F      		addq.l #8,%sp
  73               		.cfi_def_cfa_offset 32
  74               		.loc 1 31 6 view .LVU9
  75 0046 4A80      		tst.l %d0
  76 0048 674C      		jeq .L9
  30:test2.c       **** 		for(int k=0; k<K; k++){
  77               		.loc 1 30 22 is_stmt 1 discriminator 2 view .LVU10
  78 004a 5282      		addq.l #1,%d2
  79               	.LVL3:
  30:test2.c       **** 		for(int k=0; k<K; k++){
  80               		.loc 1 30 17 discriminator 2 view .LVU11
  81 004c B4B9 0000 		cmp.l K.l,%d2
  81      0000 
  82 0052 6DE8      		jlt .L4
  83               	.LVL4:
  84               	.L2:
  30:test2.c       **** 		for(int k=0; k<K; k++){
  85               		.loc 1 30 17 is_stmt 0 discriminator 2 view .LVU12
  86               	.LBE2:
  32:test2.c       **** 				printf("task1 ,%d times\n",k/1000);
  33:test2.c       **** 			}
  34:test2.c       **** 		}
  35:test2.c       **** 		printf(" task1 is runnnig\n");
  87               		.loc 1 35 3 is_stmt 1 view .LVU13
  88 0054 4879 0000 		pea .LC2
  88      0000 
  89               		.cfi_def_cfa_offset 36
  90 005a 4E92      		jsr (%a2)
  91               	.LVL5:
  36:test2.c       **** 		P(0);
  92               		.loc 1 36 3 view .LVU14
  93 005c 42A7      		clr.l -(%sp)
  94               		.cfi_def_cfa_offset 40
  95 005e 4E94      		jsr (%a4)
  96               	.LVL6:
  37:test2.c       **** 		nttask++;
  97               		.loc 1 37 3 view .LVU15
  98               		.loc 1 37 9 is_stmt 0 view .LVU16
  99 0060 2039 0000 		move.l nttask,%d0
  99      0000 
 100 0066 5280      		addq.l #1,%d0


 101 0068 23C0 0000 		move.l %d0,nttask
 101      0000 
  38:test2.c       **** 		printf("nttask is %d now\n",nttask);
 102               		.loc 1 38 3 is_stmt 1 view .LVU17
 103 006e 2039 0000 		move.l nttask,%d0
 103      0000 
 104 0074 2F00      		move.l %d0,-(%sp)
 105               		.cfi_def_cfa_offset 44
 106 0076 4879 0000 		pea .LC3
 106      0000 
 107               		.cfi_def_cfa_offset 48
 108 007c 4E95      		jsr (%a5)
 109               	.LVL7:
  39:test2.c       **** 		V(0);
 110               		.loc 1 39 3 view .LVU18
 111 007e 42A7      		clr.l -(%sp)
 112               		.cfi_def_cfa_offset 52
 113 0080 4E96      		jsr (%a6)
 114               	.LVL8:
  40:test2.c       **** 		printf("              task1 is finished\n");
 115               		.loc 1 40 3 view .LVU19
 116 0082 4879 0000 		pea .LC4
 116      0000 
 117               		.cfi_def_cfa_offset 56
 118 0088 4E92      		jsr (%a2)
 119               	.LVL9:
  41:test2.c       **** 		P(1);
 120               		.loc 1 41 3 view .LVU20
 121 008a 4878 0001 		pea 1.w
 122               		.cfi_def_cfa_offset 60
 123 008e 4E94      		jsr (%a4)
 124               	.LVL10:
  28:test2.c       **** 		printf(" task1 start\n");
 125               		.loc 1 28 7 view .LVU21
  29:test2.c       **** 		for(int k=0; k<K; k++){
 126               		.loc 1 29 3 is_stmt 0 view .LVU22
 127 0090 4FEF 001C 		lea (28,%sp),%sp
 128               		.cfi_def_cfa_offset 32
 129 0094 6092      		jra .L5
 130               	.LVL11:
 131               	.L9:
 132               	.LBB3:
  32:test2.c       **** 			}
 133               		.loc 1 32 5 is_stmt 1 view .LVU23
 134 0096 4878 03E8 		pea 1000.w
 135               		.cfi_def_cfa_offset 36
 136 009a 2F02      		move.l %d2,-(%sp)
 137               		.cfi_def_cfa_offset 40
 138 009c 2043      		move.l %d3,%a0
 139 009e 4E90      		jsr (%a0)
 140               	.LVL12:
 141 00a0 588F      		addq.l #4,%sp
 142               		.cfi_def_cfa_offset 36
 143 00a2 2E80      		move.l %d0,(%sp)
 144 00a4 4879 0000 		pea .LC1
 144      0000 
 145               		.cfi_def_cfa_offset 40


 146 00aa 4E95      		jsr (%a5)
 147               	.LVL13:
 148 00ac 508F      		addq.l #8,%sp
 149               		.cfi_def_cfa_offset 32
  30:test2.c       **** 			if(k%1000==0){
 150               		.loc 1 30 22 view .LVU24
 151 00ae 5282      		addq.l #1,%d2
 152               	.LVL14:
  30:test2.c       **** 			if(k%1000==0){
 153               		.loc 1 30 17 view .LVU25
 154 00b0 B4B9 0000 		cmp.l K.l,%d2
 154      0000 
 155 00b6 6D84      		jlt .L4
 156 00b8 609A      		jra .L2
 157               	.LBE3:
 158               		.cfi_endproc
 159               	.LFE4:
 160               		.size	task1, .-task1
 161               		.section	.rodata.str1.1
 162               	.LC5:
 163 0062 2074 6173 		.string	" task2 start"
 163      6B32 2073 
 163      7461 7274 
 163      00
 164               	.LC6:
 165 006f 7461 736B 		.string	"task2 ,%d times\n"
 165      3220 2C25 
 165      6420 7469 
 165      6D65 730A 
 165      00
 166               	.LC7:
 167 0080 2074 6173 		.string	" task2 is runnnig"
 167      6B32 2069 
 167      7320 7275 
 167      6E6E 6E69 
 167      6700 
 168               	.LC8:
 169 0092 2020 2020 		.string	"              task2 is finished"
 169      2020 2020 
 169      2020 2020 
 169      2020 7461 
 169      736B 3220 
 170               		.text
 171               		.align	2
 172               		.globl	task2
 173               		.type	task2, @function
 174               	task2:
 175               	.LFB5:
  42:test2.c       **** 	}
  43:test2.c       **** }
  44:test2.c       **** 
  45:test2.c       **** int task2(){
 176               		.loc 1 45 12 view -0
 177               		.cfi_startproc
 178 00ba 48E7 303E 		movem.l #12350,-(%sp)
 179               		.cfi_def_cfa_offset 32
 180               		.cfi_offset 2, -32


 181               		.cfi_offset 3, -28
 182               		.cfi_offset 10, -24
 183               		.cfi_offset 11, -20
 184               		.cfi_offset 12, -16
 185               		.cfi_offset 13, -12
 186               		.cfi_offset 14, -8
 187 00be 45F9 0000 		lea puts,%a2
 187      0000 
 188 00c4 47F9 0000 		lea __modsi3,%a3
 188      0000 
 189 00ca 263C 0000 		move.l #__divsi3,%d3
 189      0000 
 190 00d0 4BF9 0000 		lea printf,%a5
 190      0000 
 191 00d6 49F9 0000 		lea P,%a4
 191      0000 
 192 00dc 4DF9 0000 		lea V,%a6
 192      0000 
 193               	.L14:
  46:test2.c       **** 	while(1){
 194               		.loc 1 46 2 view .LVU27
  47:test2.c       **** 		printf(" task2 start\n");
 195               		.loc 1 47 3 view .LVU28
 196 00e2 4879 0000 		pea .LC5
 196      0000 
 197               		.cfi_def_cfa_offset 36
 198 00e8 4E92      		jsr (%a2)
 199               	.LVL15:
  48:test2.c       **** 		for(int k=0; k<2*K; k++){
 200               		.loc 1 48 3 view .LVU29
 201               	.LBB4:
 202               		.loc 1 48 7 view .LVU30
 203               		.loc 1 48 17 view .LVU31
 204 00ea 588F      		addq.l #4,%sp
 205               		.cfi_def_cfa_offset 32
 206 00ec 4AB9 0000 		tst.l K
 206      0000 
 207 00f2 6F1E      		jle .L11
 208               		.loc 1 48 11 is_stmt 0 view .LVU32
 209 00f4 7400      		moveq #0,%d2
 210               	.LVL16:
 211               	.L13:
  49:test2.c       **** 			if(k%1000==0){
 212               		.loc 1 49 4 is_stmt 1 view .LVU33
  48:test2.c       **** 		for(int k=0; k<2*K; k++){
 213               		.loc 1 48 17 is_stmt 0 view .LVU34
 214 00f6 4878 03E8 		pea 1000.w
 215               		.cfi_def_cfa_offset 36
 216 00fa 2F02      		move.l %d2,-(%sp)
 217               		.cfi_def_cfa_offset 40
 218 00fc 4E93      		jsr (%a3)
 219               	.LVL17:
 220 00fe 508F      		addq.l #8,%sp
 221               		.cfi_def_cfa_offset 32
 222               		.loc 1 49 6 view .LVU35
 223 0100 4A80      		tst.l %d0
 224 0102 6750      		jeq .L18


  48:test2.c       **** 		for(int k=0; k<2*K; k++){
 225               		.loc 1 48 24 is_stmt 1 discriminator 2 view .LVU36
 226 0104 5282      		addq.l #1,%d2
 227               	.LVL18:
  48:test2.c       **** 		for(int k=0; k<2*K; k++){
 228               		.loc 1 48 17 discriminator 2 view .LVU37
  48:test2.c       **** 		for(int k=0; k<2*K; k++){
 229               		.loc 1 48 19 is_stmt 0 discriminator 2 view .LVU38
 230 0106 2039 0000 		move.l K,%d0
 230      0000 
 231 010c D080      		add.l %d0,%d0
  48:test2.c       **** 		for(int k=0; k<2*K; k++){
 232               		.loc 1 48 17 discriminator 2 view .LVU39
 233 010e B480      		cmp.l %d0,%d2
 234 0110 6DE4      		jlt .L13
 235               	.LVL19:
 236               	.L11:
  48:test2.c       **** 		for(int k=0; k<2*K; k++){
 237               		.loc 1 48 17 discriminator 2 view .LVU40
 238               	.LBE4:
  50:test2.c       **** 				printf("task2 ,%d times\n",k/1000);
  51:test2.c       **** 			}
  52:test2.c       **** 		}
  53:test2.c       **** 		printf(" task2 is runnnig\n");
 239               		.loc 1 53 3 is_stmt 1 view .LVU41
 240 0112 4879 0000 		pea .LC7
 240      0000 
 241               		.cfi_def_cfa_offset 36
 242 0118 4E92      		jsr (%a2)
 243               	.LVL20:
  54:test2.c       **** 		P(0);
 244               		.loc 1 54 3 view .LVU42
 245 011a 42A7      		clr.l -(%sp)
 246               		.cfi_def_cfa_offset 40
 247 011c 4E94      		jsr (%a4)
 248               	.LVL21:
  55:test2.c       **** 		nttask++;
 249               		.loc 1 55 3 view .LVU43
 250               		.loc 1 55 9 is_stmt 0 view .LVU44
 251 011e 2039 0000 		move.l nttask,%d0
 251      0000 
 252 0124 5280      		addq.l #1,%d0
 253 0126 23C0 0000 		move.l %d0,nttask
 253      0000 
  56:test2.c       **** 		printf("nttask is %d now\n",nttask);
 254               		.loc 1 56 3 is_stmt 1 view .LVU45
 255 012c 2039 0000 		move.l nttask,%d0
 255      0000 
 256 0132 2F00      		move.l %d0,-(%sp)
 257               		.cfi_def_cfa_offset 44
 258 0134 4879 0000 		pea .LC3
 258      0000 
 259               		.cfi_def_cfa_offset 48
 260 013a 4E95      		jsr (%a5)
 261               	.LVL22:
  57:test2.c       **** 		V(0);
 262               		.loc 1 57 3 view .LVU46


 263 013c 42A7      		clr.l -(%sp)
 264               		.cfi_def_cfa_offset 52
 265 013e 4E96      		jsr (%a6)
 266               	.LVL23:
  58:test2.c       **** 		printf("              task2 is finished\n");
 267               		.loc 1 58 3 view .LVU47
 268 0140 4879 0000 		pea .LC8
 268      0000 
 269               		.cfi_def_cfa_offset 56
 270 0146 4E92      		jsr (%a2)
 271               	.LVL24:
  59:test2.c       **** 		P(1);
 272               		.loc 1 59 3 view .LVU48
 273 0148 4878 0001 		pea 1.w
 274               		.cfi_def_cfa_offset 60
 275 014c 4E94      		jsr (%a4)
 276               	.LVL25:
  46:test2.c       **** 		printf(" task2 start\n");
 277               		.loc 1 46 7 view .LVU49
  47:test2.c       **** 		for(int k=0; k<2*K; k++){
 278               		.loc 1 47 3 is_stmt 0 view .LVU50
 279 014e 4FEF 001C 		lea (28,%sp),%sp
 280               		.cfi_def_cfa_offset 32
 281 0152 608E      		jra .L14
 282               	.LVL26:
 283               	.L18:
 284               	.LBB5:
  50:test2.c       **** 			}
 285               		.loc 1 50 5 is_stmt 1 view .LVU51
 286 0154 4878 03E8 		pea 1000.w
 287               		.cfi_def_cfa_offset 36
 288 0158 2F02      		move.l %d2,-(%sp)
 289               		.cfi_def_cfa_offset 40
 290 015a 2043      		move.l %d3,%a0
 291 015c 4E90      		jsr (%a0)
 292               	.LVL27:
 293 015e 588F      		addq.l #4,%sp
 294               		.cfi_def_cfa_offset 36
 295 0160 2E80      		move.l %d0,(%sp)
 296 0162 4879 0000 		pea .LC6
 296      0000 
 297               		.cfi_def_cfa_offset 40
 298 0168 4E95      		jsr (%a5)
 299               	.LVL28:
 300 016a 508F      		addq.l #8,%sp
 301               		.cfi_def_cfa_offset 32
  48:test2.c       **** 			if(k%1000==0){
 302               		.loc 1 48 24 view .LVU52
 303 016c 5282      		addq.l #1,%d2
 304               	.LVL29:
  48:test2.c       **** 			if(k%1000==0){
 305               		.loc 1 48 17 view .LVU53
  48:test2.c       **** 			if(k%1000==0){
 306               		.loc 1 48 19 is_stmt 0 view .LVU54
 307 016e 2039 0000 		move.l K,%d0
 307      0000 
 308 0174 D080      		add.l %d0,%d0


  48:test2.c       **** 			if(k%1000==0){
 309               		.loc 1 48 17 view .LVU55
 310 0176 B480      		cmp.l %d0,%d2
 311 0178 6D00 FF7C 		jlt .L13
 312 017c 6094      		jra .L11
 313               	.LBE5:
 314               		.cfi_endproc
 315               	.LFE5:
 316               		.size	task2, .-task2
 317               		.section	.rodata.str1.1
 318               	.LC9:
 319 00b2 2074 6173 		.string	" task3 start"
 319      6B33 2073 
 319      7461 7274 
 319      00
 320               	.LC10:
 321 00bf 7461 736B 		.string	"task3 ,%d times\n"
 321      3320 2C25 
 321      6420 7469 
 321      6D65 730A 
 321      00
 322               	.LC11:
 323 00d0 2074 6173 		.string	" task3 is runnnig"
 323      6B33 2069 
 323      7320 7275 
 323      6E6E 6E69 
 323      6700 
 324               	.LC12:
 325 00e2 2020 2020 		.string	"             task3 is finished"
 325      2020 2020 
 325      2020 2020 
 325      2074 6173 
 325      6B33 2069 
 326               		.text
 327               		.align	2
 328               		.globl	task3
 329               		.type	task3, @function
 330               	task3:
 331               	.LFB6:
  60:test2.c       **** 	}
  61:test2.c       **** }
  62:test2.c       **** 
  63:test2.c       **** int task3(){
 332               		.loc 1 63 12 is_stmt 1 view -0
 333               		.cfi_startproc
 334 017e 48E7 303E 		movem.l #12350,-(%sp)
 335               		.cfi_def_cfa_offset 32
 336               		.cfi_offset 2, -32
 337               		.cfi_offset 3, -28
 338               		.cfi_offset 10, -24
 339               		.cfi_offset 11, -20
 340               		.cfi_offset 12, -16
 341               		.cfi_offset 13, -12
 342               		.cfi_offset 14, -8
 343 0182 45F9 0000 		lea puts,%a2
 343      0000 
 344 0188 47F9 0000 		lea __modsi3,%a3


 344      0000 
 345 018e 263C 0000 		move.l #__divsi3,%d3
 345      0000 
 346 0194 4BF9 0000 		lea printf,%a5
 346      0000 
 347 019a 49F9 0000 		lea P,%a4
 347      0000 
 348 01a0 4DF9 0000 		lea V,%a6
 348      0000 
 349               	.L23:
  64:test2.c       **** 	while(1){
 350               		.loc 1 64 2 view .LVU57
  65:test2.c       **** 		printf(" task3 start\n");
 351               		.loc 1 65 3 view .LVU58
 352 01a6 4879 0000 		pea .LC9
 352      0000 
 353               		.cfi_def_cfa_offset 36
 354 01ac 4E92      		jsr (%a2)
 355               	.LVL30:
  66:test2.c       **** 		for(int k=0; k<3*K; k++){
 356               		.loc 1 66 3 view .LVU59
 357               	.LBB6:
 358               		.loc 1 66 7 view .LVU60
 359               		.loc 1 66 17 view .LVU61
 360 01ae 588F      		addq.l #4,%sp
 361               		.cfi_def_cfa_offset 32
 362 01b0 4AB9 0000 		tst.l K
 362      0000 
 363 01b6 6F22      		jle .L20
 364               		.loc 1 66 11 is_stmt 0 view .LVU62
 365 01b8 7400      		moveq #0,%d2
 366               	.LVL31:
 367               	.L22:
  67:test2.c       **** 			if(k%1000==0){
 368               		.loc 1 67 4 is_stmt 1 view .LVU63
  66:test2.c       **** 		for(int k=0; k<3*K; k++){
 369               		.loc 1 66 17 is_stmt 0 view .LVU64
 370 01ba 4878 03E8 		pea 1000.w
 371               		.cfi_def_cfa_offset 36
 372 01be 2F02      		move.l %d2,-(%sp)
 373               		.cfi_def_cfa_offset 40
 374 01c0 4E93      		jsr (%a3)
 375               	.LVL32:
 376 01c2 508F      		addq.l #8,%sp
 377               		.cfi_def_cfa_offset 32
 378               		.loc 1 67 6 view .LVU65
 379 01c4 4A80      		tst.l %d0
 380 01c6 6754      		jeq .L27
  66:test2.c       **** 		for(int k=0; k<3*K; k++){
 381               		.loc 1 66 24 is_stmt 1 discriminator 2 view .LVU66
 382 01c8 5282      		addq.l #1,%d2
 383               	.LVL33:
  66:test2.c       **** 		for(int k=0; k<3*K; k++){
 384               		.loc 1 66 17 discriminator 2 view .LVU67
  66:test2.c       **** 		for(int k=0; k<3*K; k++){
 385               		.loc 1 66 19 is_stmt 0 discriminator 2 view .LVU68
 386 01ca 2239 0000 		move.l K,%d1


 386      0000 
 387 01d0 2001      		move.l %d1,%d0
 388 01d2 D081      		add.l %d1,%d0
 389 01d4 D081      		add.l %d1,%d0
  66:test2.c       **** 		for(int k=0; k<3*K; k++){
 390               		.loc 1 66 17 discriminator 2 view .LVU69
 391 01d6 B480      		cmp.l %d0,%d2
 392 01d8 6DE0      		jlt .L22
 393               	.LVL34:
 394               	.L20:
  66:test2.c       **** 		for(int k=0; k<3*K; k++){
 395               		.loc 1 66 17 discriminator 2 view .LVU70
 396               	.LBE6:
  68:test2.c       **** 				printf("task3 ,%d times\n",k/1000);
  69:test2.c       **** 			}
  70:test2.c       **** 		}
  71:test2.c       **** 		printf(" task3 is runnnig\n");
 397               		.loc 1 71 3 is_stmt 1 view .LVU71
 398 01da 4879 0000 		pea .LC11
 398      0000 
 399               		.cfi_def_cfa_offset 36
 400 01e0 4E92      		jsr (%a2)
 401               	.LVL35:
  72:test2.c       **** 		P(0);
 402               		.loc 1 72 3 view .LVU72
 403 01e2 42A7      		clr.l -(%sp)
 404               		.cfi_def_cfa_offset 40
 405 01e4 4E94      		jsr (%a4)
 406               	.LVL36:
  73:test2.c       **** 		nttask++;
 407               		.loc 1 73 3 view .LVU73
 408               		.loc 1 73 9 is_stmt 0 view .LVU74
 409 01e6 2039 0000 		move.l nttask,%d0
 409      0000 
 410 01ec 5280      		addq.l #1,%d0
 411 01ee 23C0 0000 		move.l %d0,nttask
 411      0000 
  74:test2.c       **** 		printf("nttask is %d now\n",nttask);
 412               		.loc 1 74 3 is_stmt 1 view .LVU75
 413 01f4 2039 0000 		move.l nttask,%d0
 413      0000 
 414 01fa 2F00      		move.l %d0,-(%sp)
 415               		.cfi_def_cfa_offset 44
 416 01fc 4879 0000 		pea .LC3
 416      0000 
 417               		.cfi_def_cfa_offset 48
 418 0202 4E95      		jsr (%a5)
 419               	.LVL37:
  75:test2.c       **** 		V(0);
 420               		.loc 1 75 3 view .LVU76
 421 0204 42A7      		clr.l -(%sp)
 422               		.cfi_def_cfa_offset 52
 423 0206 4E96      		jsr (%a6)
 424               	.LVL38:
  76:test2.c       **** 		printf("             task3 is finished\n");
 425               		.loc 1 76 3 view .LVU77
 426 0208 4879 0000 		pea .LC12


 426      0000 
 427               		.cfi_def_cfa_offset 56
 428 020e 4E92      		jsr (%a2)
 429               	.LVL39:
  77:test2.c       **** 		P(1);
 430               		.loc 1 77 3 view .LVU78
 431 0210 4878 0001 		pea 1.w
 432               		.cfi_def_cfa_offset 60
 433 0214 4E94      		jsr (%a4)
 434               	.LVL40:
  64:test2.c       **** 		printf(" task3 start\n");
 435               		.loc 1 64 7 view .LVU79
  65:test2.c       **** 		for(int k=0; k<3*K; k++){
 436               		.loc 1 65 3 is_stmt 0 view .LVU80
 437 0216 4FEF 001C 		lea (28,%sp),%sp
 438               		.cfi_def_cfa_offset 32
 439 021a 608A      		jra .L23
 440               	.LVL41:
 441               	.L27:
 442               	.LBB7:
  68:test2.c       **** 			}
 443               		.loc 1 68 5 is_stmt 1 view .LVU81
 444 021c 4878 03E8 		pea 1000.w
 445               		.cfi_def_cfa_offset 36
 446 0220 2F02      		move.l %d2,-(%sp)
 447               		.cfi_def_cfa_offset 40
 448 0222 2043      		move.l %d3,%a0
 449 0224 4E90      		jsr (%a0)
 450               	.LVL42:
 451 0226 588F      		addq.l #4,%sp
 452               		.cfi_def_cfa_offset 36
 453 0228 2E80      		move.l %d0,(%sp)
 454 022a 4879 0000 		pea .LC10
 454      0000 
 455               		.cfi_def_cfa_offset 40
 456 0230 4E95      		jsr (%a5)
 457               	.LVL43:
 458 0232 508F      		addq.l #8,%sp
 459               		.cfi_def_cfa_offset 32
  66:test2.c       **** 			if(k%1000==0){
 460               		.loc 1 66 24 view .LVU82
 461 0234 5282      		addq.l #1,%d2
 462               	.LVL44:
  66:test2.c       **** 			if(k%1000==0){
 463               		.loc 1 66 17 view .LVU83
  66:test2.c       **** 			if(k%1000==0){
 464               		.loc 1 66 19 is_stmt 0 view .LVU84
 465 0236 2239 0000 		move.l K,%d1
 465      0000 
 466 023c 2001      		move.l %d1,%d0
 467 023e D081      		add.l %d1,%d0
 468 0240 D081      		add.l %d1,%d0
  66:test2.c       **** 			if(k%1000==0){
 469               		.loc 1 66 17 view .LVU85
 470 0242 B480      		cmp.l %d0,%d2
 471 0244 6D00 FF74 		jlt .L22
 472 0248 6090      		jra .L20


 473               	.LBE7:
 474               		.cfi_endproc
 475               	.LFE6:
 476               		.size	task3, .-task3
 477               		.section	.rodata.str1.1
 478               	.LC13:
 479 0101 2074 6173 		.string	" task0 is runnnig"
 479      6B30 2069 
 479      7320 7275 
 479      6E6E 6E69 
 479      6700 
 480               	.LC14:
 481 0113 2020 646F 		.string	"  do V(1) ,%d times\n"
 481      2056 2831 
 481      2920 2C25 
 481      6420 7469 
 481      6D65 730A 
 482               	.LC15:
 483 0128 7461 736B 		.string	"tasks reset"
 483      7320 7265 
 483      7365 7400 
 484               	.LC16:
 485 0134 6A6D 7020 		.string	"jmp to skipmt"
 485      746F 2073 
 485      6B69 706D 
 485      7400 
 486               	.LC17:
 487 0142 7461 736B 		.string	"task0 is back"
 487      3020 6973 
 487      2062 6163 
 487      6B00 
 488               		.text
 489               		.align	2
 490               		.globl	task_0
 491               		.type	task_0, @function
 492               	task_0:
 493               	.LFB3:
   7:test2.c       **** 	while(1){
 494               		.loc 1 7 13 is_stmt 1 view -0
 495               		.cfi_startproc
 496 024a 48E7 203E 		movem.l #8254,-(%sp)
 497               		.cfi_def_cfa_offset 28
 498               		.cfi_offset 2, -28
 499               		.cfi_offset 10, -24
 500               		.cfi_offset 11, -20
 501               		.cfi_offset 12, -16
 502               		.cfi_offset 13, -12
 503               		.cfi_offset 14, -8
 504 024e 49F9 0000 		lea puts,%a4
 504      0000 
 505 0254 4DF9 0000 		lea P,%a6
 505      0000 
 506 025a 47F9 0000 		lea printf,%a3
 506      0000 
 507 0260 45F9 0000 		lea V,%a2
 507      0000 
 508 0266 4BF9 0000 		lea skipmt,%a5


 508      0000 
 509               	.L32:
   8:test2.c       **** 		printf(" task0 is runnnig\n");
 510               		.loc 1 8 2 view .LVU87
   9:test2.c       **** 		P(0);
 511               		.loc 1 9 3 view .LVU88
 512 026c 4879 0000 		pea .LC13
 512      0000 
 513               		.cfi_def_cfa_offset 32
 514 0272 4E94      		jsr (%a4)
 515               	.LVL45:
  10:test2.c       **** 		if(nttask == N){
 516               		.loc 1 10 3 view .LVU89
 517 0274 42A7      		clr.l -(%sp)
 518               		.cfi_def_cfa_offset 36
 519 0276 4E96      		jsr (%a6)
 520               	.LVL46:
  11:test2.c       **** 			nttask=0;
 521               		.loc 1 11 3 view .LVU90
  11:test2.c       **** 			nttask=0;
 522               		.loc 1 11 13 is_stmt 0 view .LVU91
 523 0278 2039 0000 		move.l nttask,%d0
 523      0000 
  11:test2.c       **** 			nttask=0;
 524               		.loc 1 11 5 view .LVU92
 525 027e 508F      		addq.l #8,%sp
 526               		.cfi_def_cfa_offset 28
 527 0280 B0B9 0000 		cmp.l N.l,%d0
 527      0000 
 528 0286 6636      		jne .L29
  12:test2.c       **** 			for (int i=0; i<N; i++){
 529               		.loc 1 12 4 is_stmt 1 view .LVU93
  12:test2.c       **** 			for (int i=0; i<N; i++){
 530               		.loc 1 12 10 is_stmt 0 view .LVU94
 531 0288 7200      		moveq #0,%d1
 532 028a 23C1 0000 		move.l %d1,nttask
 532      0000 
  13:test2.c       **** 				printf("  do V(1) ,%d times\n",i+1);
 533               		.loc 1 13 4 is_stmt 1 view .LVU95
 534               	.LBB8:
  13:test2.c       **** 				printf("  do V(1) ,%d times\n",i+1);
 535               		.loc 1 13 9 view .LVU96
 536               	.LVL47:
  13:test2.c       **** 				printf("  do V(1) ,%d times\n",i+1);
 537               		.loc 1 13 19 view .LVU97
 538 0290 4A80      		tst.l %d0
 539 0292 6F20      		jle .L30
  13:test2.c       **** 				printf("  do V(1) ,%d times\n",i+1);
 540               		.loc 1 13 13 is_stmt 0 view .LVU98
 541 0294 7400      		moveq #0,%d2
 542               	.LVL48:
 543               	.L31:
  14:test2.c       **** 				V(1);
 544               		.loc 1 14 5 is_stmt 1 discriminator 3 view .LVU99
 545 0296 5282      		addq.l #1,%d2
 546               	.LVL49:
  14:test2.c       **** 				V(1);


 547               		.loc 1 14 5 is_stmt 0 discriminator 3 view .LVU100
 548 0298 2F02      		move.l %d2,-(%sp)
 549               		.cfi_def_cfa_offset 32
 550 029a 4879 0000 		pea .LC14
 550      0000 
 551               		.cfi_def_cfa_offset 36
 552 02a0 4E93      		jsr (%a3)
 553               	.LVL50:
  15:test2.c       **** 			}
 554               		.loc 1 15 5 is_stmt 1 discriminator 3 view .LVU101
 555 02a2 4878 0001 		pea 1.w
 556               		.cfi_def_cfa_offset 40
 557 02a6 4E92      		jsr (%a2)
 558               	.LVL51:
  13:test2.c       **** 				printf("  do V(1) ,%d times\n",i+1);
 559               		.loc 1 13 24 discriminator 3 view .LVU102
  13:test2.c       **** 				printf("  do V(1) ,%d times\n",i+1);
 560               		.loc 1 13 19 discriminator 3 view .LVU103
 561 02a8 4FEF 000C 		lea (12,%sp),%sp
 562               		.cfi_def_cfa_offset 28
 563 02ac B4B9 0000 		cmp.l N.l,%d2
 563      0000 
 564 02b2 6DE2      		jlt .L31
 565               	.LVL52:
 566               	.L30:
  13:test2.c       **** 				printf("  do V(1) ,%d times\n",i+1);
 567               		.loc 1 13 19 is_stmt 0 discriminator 3 view .LVU104
 568               	.LBE8:
  17:test2.c       **** 		}
 569               		.loc 1 17 4 is_stmt 1 view .LVU105
 570 02b4 4879 0000 		pea .LC15
 570      0000 
 571               		.cfi_def_cfa_offset 32
 572 02ba 4E94      		jsr (%a4)
 573               	.LVL53:
 574 02bc 588F      		addq.l #4,%sp
 575               		.cfi_def_cfa_offset 28
 576               	.L29:
  19:test2.c       **** 		printf("jmp to skipmt\n");
 577               		.loc 1 19 3 view .LVU106
 578 02be 42A7      		clr.l -(%sp)
 579               		.cfi_def_cfa_offset 32
 580 02c0 4E92      		jsr (%a2)
 581               	.LVL54:
  20:test2.c       **** 		skipmt();
 582               		.loc 1 20 3 view .LVU107
 583 02c2 4879 0000 		pea .LC16
 583      0000 
 584               		.cfi_def_cfa_offset 36
 585 02c8 4E94      		jsr (%a4)
 586               	.LVL55:
  21:test2.c       **** 		printf("task0 is back\n");
 587               		.loc 1 21 3 view .LVU108
 588 02ca 4E95      		jsr (%a5)
 589               	.LVL56:
  22:test2.c       **** 	}
 590               		.loc 1 22 3 view .LVU109


 591 02cc 4879 0000 		pea .LC17
 591      0000 
 592               		.cfi_def_cfa_offset 40
 593 02d2 4E94      		jsr (%a4)
 594               	.LVL57:
   8:test2.c       **** 		printf(" task0 is runnnig\n");
 595               		.loc 1 8 7 view .LVU110
   9:test2.c       **** 		P(0);
 596               		.loc 1 9 3 is_stmt 0 view .LVU111
 597 02d4 4FEF 000C 		lea (12,%sp),%sp
 598               		.cfi_def_cfa_offset 28
 599 02d8 6092      		jra .L32
 600               		.cfi_endproc
 601               	.LFE3:
 602               		.size	task_0, .-task_0
 603               		.section	.rodata.str1.1
 604               	.LC18:
 605 0150 496E 6974 		.string	"Initializing kernel..."
 605      6961 6C69 
 605      7A69 6E67 
 605      206B 6572 
 605      6E65 6C2E 
 606               	.LC19:
 607 0167 4B65 726E 		.string	"Kernel initialized."
 607      656C 2069 
 607      6E69 7469 
 607      616C 697A 
 607      6564 2E00 
 608               	.LC20:
 609 017b 5365 7474 		.string	"Setting Task 0..."
 609      696E 6720 
 609      5461 736B 
 609      2030 2E2E 
 609      2E00 
 610               	.LC21:
 611 018d 5461 736B 		.string	"Task 0 set."
 611      2030 2073 
 611      6574 2E00 
 612               	.LC22:
 613 0199 5365 7474 		.string	"Setting Task 1..."
 613      696E 6720 
 613      5461 736B 
 613      2031 2E2E 
 613      2E00 
 614               	.LC23:
 615 01ab 5461 736B 		.string	"Task 1 set."
 615      2031 2073 
 615      6574 2E00 
 616               	.LC24:
 617 01b7 5365 7474 		.string	"Setting Task 2..."
 617      696E 6720 
 617      5461 736B 
 617      2032 2E2E 
 617      2E00 
 618               	.LC25:
 619 01c9 5461 736B 		.string	"Task 2 set."
 619      2032 2073 


 619      6574 2E00 
 620               	.LC26:
 621 01d5 5365 7474 		.string	"Setting Task 3..."
 621      696E 6720 
 621      5461 736B 
 621      2033 2E2E 
 621      2E00 
 622               	.LC27:
 623 01e7 5461 736B 		.string	"Task 3 set."
 623      2033 2073 
 623      6574 2E00 
 624               	.LC28:
 625 01f3 5374 6172 		.string	"Starting scheduler..."
 625      7469 6E67 
 625      2073 6368 
 625      6564 756C 
 625      6572 2E2E 
 626               	.LC29:
 627 0209 5363 6865 		.string	"Scheduler started (this line should not be printed)."
 627      6475 6C65 
 627      7220 7374 
 627      6172 7465 
 627      6420 2874 
 628               		.section	.text.startup,"ax",@progbits
 629               		.align	2
 630               		.globl	main
 631               		.type	main, @function
 632               	main:
 633               	.LFB7:
  78:test2.c       **** 	}
  79:test2.c       **** }
  80:test2.c       **** 
  81:test2.c       **** 
  82:test2.c       **** 
  83:test2.c       **** 
  84:test2.c       **** 
  85:test2.c       **** int main() {
 634               		.loc 1 85 12 is_stmt 1 view -0
 635               		.cfi_startproc
 636 0000 2F0B      		move.l %a3,-(%sp)
 637               		.cfi_def_cfa_offset 8
 638               		.cfi_offset 11, -8
 639 0002 2F0A      		move.l %a2,-(%sp)
 640               		.cfi_def_cfa_offset 12
 641               		.cfi_offset 10, -12
  86:test2.c       **** 	
  87:test2.c       ****     printf("Initializing kernel...\n");
 642               		.loc 1 87 5 view .LVU113
 643 0004 4879 0000 		pea .LC18
 643      0000 
 644               		.cfi_def_cfa_offset 16
 645 000a 45F9 0000 		lea puts,%a2
 645      0000 
 646 0010 4E92      		jsr (%a2)
 647               	.LVL58:
  88:test2.c       ****     init_kernel();
 648               		.loc 1 88 5 view .LVU114


 649 0012 4EB9 0000 		jsr init_kernel
 649      0000 
 650               	.LVL59:
  89:test2.c       ****     printf("Kernel initialized.\n");
 651               		.loc 1 89 5 view .LVU115
 652 0018 4879 0000 		pea .LC19
 652      0000 
 653               		.cfi_def_cfa_offset 20
 654 001e 4E92      		jsr (%a2)
 655               	.LVL60:
  90:test2.c       ****     
  91:test2.c       ****   	semaphore[0].count =1;
 656               		.loc 1 91 4 view .LVU116
 657               		.loc 1 91 23 is_stmt 0 view .LVU117
 658 0020 7001      		moveq #1,%d0
 659 0022 23C0 0000 		move.l %d0,semaphore
 659      0000 
  92:test2.c       **** 	semaphore[1].count =0;
 660               		.loc 1 92 2 is_stmt 1 view .LVU118
 661               		.loc 1 92 21 is_stmt 0 view .LVU119
 662 0028 42B9 0000 		clr.l semaphore+12
 662      0000 
  93:test2.c       **** 	nttask = 0;
 663               		.loc 1 93 2 is_stmt 1 view .LVU120
 664               		.loc 1 93 9 is_stmt 0 view .LVU121
 665 002e 7000      		moveq #0,%d0
 666 0030 23C0 0000 		move.l %d0,nttask
 666      0000 
  94:test2.c       ****     
  95:test2.c       ****     printf("Setting Task 0...\n");
 667               		.loc 1 95 5 is_stmt 1 view .LVU122
 668 0036 4879 0000 		pea .LC20
 668      0000 
 669               		.cfi_def_cfa_offset 24
 670 003c 4E92      		jsr (%a2)
 671               	.LVL61:
  96:test2.c       ****     set_task((char *)task_0); // タスクを登録
 672               		.loc 1 96 5 view .LVU123
 673 003e 4879 0000 		pea task_0
 673      0000 
 674               		.cfi_def_cfa_offset 28
 675 0044 47F9 0000 		lea set_task,%a3
 675      0000 
 676 004a 4E93      		jsr (%a3)
 677               	.LVL62:
  97:test2.c       ****     printf("Task 0 set.\n");
 678               		.loc 1 97 5 view .LVU124
 679 004c 4879 0000 		pea .LC21
 679      0000 
 680               		.cfi_def_cfa_offset 32
 681 0052 4E92      		jsr (%a2)
 682               	.LVL63:
  98:test2.c       **** 
  99:test2.c       ****     printf("Setting Task 1...\n");
 683               		.loc 1 99 5 view .LVU125
 684 0054 4879 0000 		pea .LC22
 684      0000 


 685               		.cfi_def_cfa_offset 36
 686 005a 4E92      		jsr (%a2)
 687               	.LVL64:
 100:test2.c       ****     set_task((char *)task1); // タスクを登録
 688               		.loc 1 100 5 view .LVU126
 689 005c 4879 0000 		pea task1
 689      0000 
 690               		.cfi_def_cfa_offset 40
 691 0062 4E93      		jsr (%a3)
 692               	.LVL65:
 101:test2.c       ****     printf("Task 1 set.\n");
 693               		.loc 1 101 5 view .LVU127
 694 0064 4879 0000 		pea .LC23
 694      0000 
 695               		.cfi_def_cfa_offset 44
 696 006a 4E92      		jsr (%a2)
 697               	.LVL66:
 102:test2.c       **** 
 103:test2.c       ****     printf("Setting Task 2...\n");
 698               		.loc 1 103 5 view .LVU128
 699 006c 4FEF 001C 		lea (28,%sp),%sp
 700               		.cfi_def_cfa_offset 16
 701 0070 2EBC 0000 		move.l #.LC24,(%sp)
 701      0000 
 702 0076 4E92      		jsr (%a2)
 703               	.LVL67:
 104:test2.c       ****     set_task((char *)task2); // タスクを登録
 704               		.loc 1 104 5 view .LVU129
 705 0078 4879 0000 		pea task2
 705      0000 
 706               		.cfi_def_cfa_offset 20
 707 007e 4E93      		jsr (%a3)
 708               	.LVL68:
 105:test2.c       ****     printf("Task 2 set.\n");
 709               		.loc 1 105 5 view .LVU130
 710 0080 4879 0000 		pea .LC25
 710      0000 
 711               		.cfi_def_cfa_offset 24
 712 0086 4E92      		jsr (%a2)
 713               	.LVL69:
 106:test2.c       ****     
 107:test2.c       ****     printf("Setting Task 3...\n");
 714               		.loc 1 107 5 view .LVU131
 715 0088 4879 0000 		pea .LC26
 715      0000 
 716               		.cfi_def_cfa_offset 28
 717 008e 4E92      		jsr (%a2)
 718               	.LVL70:
 108:test2.c       ****     set_task((char *)task3); // タスクを登録
 719               		.loc 1 108 5 view .LVU132
 720 0090 4879 0000 		pea task3
 720      0000 
 721               		.cfi_def_cfa_offset 32
 722 0096 4E93      		jsr (%a3)
 723               	.LVL71:
 109:test2.c       ****     printf("Task 3 set.\n");
 724               		.loc 1 109 5 view .LVU133


 725 0098 4879 0000 		pea .LC27
 725      0000 
 726               		.cfi_def_cfa_offset 36
 727 009e 4E92      		jsr (%a2)
 728               	.LVL72:
 110:test2.c       **** 
 111:test2.c       ****     printf("Starting scheduler...\n");
 729               		.loc 1 111 5 view .LVU134
 730 00a0 4879 0000 		pea .LC28
 730      0000 
 731               		.cfi_def_cfa_offset 40
 732 00a6 4E92      		jsr (%a2)
 733               	.LVL73:
 112:test2.c       ****     begin_sch();
 734               		.loc 1 112 5 view .LVU135
 735 00a8 4EB9 0000 		jsr begin_sch
 735      0000 
 736               	.LVL74:
 113:test2.c       **** 
 114:test2.c       ****     // begin_sch後のコードは実行されないはず
 115:test2.c       ****     printf("Scheduler started (this line should not be printed).\n");
 737               		.loc 1 115 5 view .LVU136
 738 00ae 4879 0000 		pea .LC29
 738      0000 
 739               		.cfi_def_cfa_offset 44
 740 00b4 4E92      		jsr (%a2)
 741               	.LVL75:
 116:test2.c       **** 
 117:test2.c       ****     return 0;
 742               		.loc 1 117 5 view .LVU137
 118:test2.c       **** }
 743               		.loc 1 118 1 is_stmt 0 view .LVU138
 744 00b6 4FEF 0020 		lea (32,%sp),%sp
 745               		.cfi_def_cfa_offset 12
 746 00ba 7000      		moveq #0,%d0
 747 00bc 245F      		move.l (%sp)+,%a2
 748 00be 265F      		move.l (%sp)+,%a3
 749 00c0 4E75      		rts
 750               		.cfi_endproc
 751               	.LFE7:
 752               		.size	main, .-main
 753               		.text
 754               		.align	2
 755               		.globl	exit
 756               		.type	exit, @function
 757               	exit:
 758               	.LVL76:
 759               	.LFB8:
 119:test2.c       **** 
 120:test2.c       **** 
 121:test2.c       **** /* exit() defined in test*.c */
 122:test2.c       **** void exit(int value) {
 760               		.loc 1 122 22 is_stmt 1 view -0
 761               		.cfi_startproc
 123:test2.c       **** 	*(char *)0x00d00039 = 'h';	/* led0 への表示 (halt) */
 762               		.loc 1 123 2 view .LVU140
 763               		.loc 1 123 22 is_stmt 0 view .LVU141


 764 02da 13FC 0068 		move.b #104,13631545
 764      00D0 0039 
 765               	.LVL77:
 766               	.L39:
 124:test2.c       **** 	for (;;)
 767               		.loc 1 124 2 is_stmt 1 discriminator 1 view .LVU142
 768               		.loc 1 124 2 discriminator 1 view .LVU143
 769               		.loc 1 124 2 discriminator 1 view .LVU144
 770               		.loc 1 124 2 discriminator 1 view .LVU145
 771 02e2 60FE      		jra .L39
 772               		.cfi_endproc
 773               	.LFE8:
 774               		.size	exit, .-exit
 775               		.globl	nttask
 776               		.section	.bss
 777               		.align	2
 778               		.type	nttask, @object
 779               		.size	nttask, 4
 780               	nttask:
 781 0000 0000 0000 		.zero	4
 782               		.globl	K
 783               		.data
 784               		.align	2
 785               		.type	K, @object
 786               		.size	K, 4
 787               	K:
 788 0000 0000 2710 		.long	10000
 789               		.globl	N
 790               		.align	2
 791               		.type	N, @object
 792               		.size	N, 4
 793               	N:
 794 0004 0000 0003 		.long	3
 795               		.text
 796               	.Letext0:
 797               		.file 2 "mtk_c.h"
 798               		.file 3 "<built-in>"
 799               		.file 4 "/usr/local/m68k-elf/include/stdio.h"
 800               		.section	.debug_info,"",@progbits
 801               	.Ldebug_info0:
 802 0000 0000 0490 		.long	0x490
 803 0004 0005      		.word	0x5
 804 0006 01        		.byte	0x1
 805 0007 04        		.byte	0x4
 806 0008 0000 0000 		.long	.Ldebug_abbrev0
 807 000c 11        		.uleb128 0x11
 808 000d 0000 0000 		.long	.LASF30
 809 0011 1D        		.byte	0x1d
 810 0012 0000 0000 		.long	.LASF31
 811 0016 0000 0000 		.long	.LASF32
 812 001a 0000 0000 		.long	.LLRL8
 813 001e 0000 0000 		.long	0
 814 0022 0000 0000 		.long	.Ldebug_line0
 815 0026 02        		.uleb128 0x2
 816 0027 01        		.byte	0x1
 817 0028 06        		.byte	0x6
 818 0029 0000 0000 		.long	.LASF0


 819 002d 02        		.uleb128 0x2
 820 002e 01        		.byte	0x1
 821 002f 08        		.byte	0x8
 822 0030 0000 0000 		.long	.LASF1
 823 0034 02        		.uleb128 0x2
 824 0035 02        		.byte	0x2
 825 0036 05        		.byte	0x5
 826 0037 0000 0000 		.long	.LASF2
 827 003b 02        		.uleb128 0x2
 828 003c 02        		.byte	0x2
 829 003d 07        		.byte	0x7
 830 003e 0000 0000 		.long	.LASF3
 831 0042 02        		.uleb128 0x2
 832 0043 04        		.byte	0x4
 833 0044 05        		.byte	0x5
 834 0045 0000 0000 		.long	.LASF4
 835 0049 02        		.uleb128 0x2
 836 004a 04        		.byte	0x4
 837 004b 07        		.byte	0x7
 838 004c 0000 0000 		.long	.LASF5
 839 0050 02        		.uleb128 0x2
 840 0051 08        		.byte	0x8
 841 0052 05        		.byte	0x5
 842 0053 0000 0000 		.long	.LASF6
 843 0057 02        		.uleb128 0x2
 844 0058 08        		.byte	0x8
 845 0059 07        		.byte	0x7
 846 005a 0000 0000 		.long	.LASF7
 847 005e 02        		.uleb128 0x2
 848 005f 0C        		.byte	0xc
 849 0060 04        		.byte	0x4
 850 0061 0000 0000 		.long	.LASF8
 851 0065 02        		.uleb128 0x2
 852 0066 04        		.byte	0x4
 853 0067 07        		.byte	0x7
 854 0068 0000 0000 		.long	.LASF9
 855 006c 12        		.uleb128 0x12
 856 006d 04        		.byte	0x4
 857 006e 05        		.byte	0x5
 858 006f 696E 7400 		.string	"int"
 859 0073 13        		.uleb128 0x13
 860 0074 0000 006C 		.long	0x6c
 861 0078 0A        		.uleb128 0xa
 862 0079 0000 007D 		.long	0x7d
 863 007d 02        		.uleb128 0x2
 864 007e 01        		.byte	0x1
 865 007f 06        		.byte	0x6
 866 0080 0000 0000 		.long	.LASF10
 867 0084 14        		.uleb128 0x14
 868 0085 0000 007D 		.long	0x7d
 869 0089 0A        		.uleb128 0xa
 870 008a 0000 0084 		.long	0x84
 871 008e 0B        		.uleb128 0xb
 872 008f 0000 0000 		.long	.LASF13
 873 0093 11        		.byte	0x11
 874 0094 0D        		.byte	0xd
 875 0095 0000 006C 		.long	0x6c


 876 0099 15        		.uleb128 0x15
 877 009a 0C        		.byte	0xc
 878 009b 02        		.byte	0x2
 879 009c 13        		.byte	0x13
 880 009d 09        		.byte	0x9
 881 009e 0000 00C8 		.long	0xc8
 882 00a2 0C        		.uleb128 0xc
 883 00a3 0000 0000 		.long	.LASF11
 884 00a7 15        		.byte	0x15
 885 00a8 05        		.byte	0x5
 886 00a9 0000 006C 		.long	0x6c
 887 00ad 00        		.byte	0
 888 00ae 16        		.uleb128 0x16
 889 00af 6E73 7400 		.string	"nst"
 890 00b3 02        		.byte	0x2
 891 00b4 16        		.byte	0x16
 892 00b5 05        		.byte	0x5
 893 00b6 0000 006C 		.long	0x6c
 894 00ba 04        		.byte	0x4
 895 00bb 0C        		.uleb128 0xc
 896 00bc 0000 0000 		.long	.LASF12
 897 00c0 17        		.byte	0x17
 898 00c1 0E        		.byte	0xe
 899 00c2 0000 008E 		.long	0x8e
 900 00c6 08        		.byte	0x8
 901 00c7 00        		.byte	0
 902 00c8 0B        		.uleb128 0xb
 903 00c9 0000 0000 		.long	.LASF14
 904 00cd 18        		.byte	0x18
 905 00ce 03        		.byte	0x3
 906 00cf 0000 0099 		.long	0x99
 907 00d3 17        		.uleb128 0x17
 908 00d4 0000 00C8 		.long	0xc8
 909 00d8 0000 00E3 		.long	0xe3
 910 00dc 18        		.uleb128 0x18
 911 00dd 0000 0049 		.long	0x49
 912 00e1 04        		.byte	0x4
 913 00e2 00        		.byte	0
 914 00e3 19        		.uleb128 0x19
 915 00e4 0000 0000 		.long	.LASF15
 916 00e8 02        		.byte	0x2
 917 00e9 40        		.byte	0x40
 918 00ea 17        		.byte	0x17
 919 00eb 0000 00D3 		.long	0xd3
 920 00ef 0D        		.uleb128 0xd
 921 00f0 4E00      		.string	"N"
 922 00f2 03        		.byte	0x3
 923 00f3 0000 006C 		.long	0x6c
 924 00f7 05        		.uleb128 0x5
 925 00f8 03        		.byte	0x3
 926 00f9 0000 0000 		.long	N
 927 00fd 0D        		.uleb128 0xd
 928 00fe 4B00      		.string	"K"
 929 0100 04        		.byte	0x4
 930 0101 0000 006C 		.long	0x6c
 931 0105 05        		.uleb128 0x5
 932 0106 03        		.byte	0x3


 933 0107 0000 0000 		.long	K
 934 010b 1A        		.uleb128 0x1a
 935 010c 0000 0000 		.long	.LASF16
 936 0110 01        		.byte	0x1
 937 0111 05        		.byte	0x5
 938 0112 0E        		.byte	0xe
 939 0113 0000 0073 		.long	0x73
 940 0117 05        		.uleb128 0x5
 941 0118 03        		.byte	0x3
 942 0119 0000 0000 		.long	nttask
 943 011d 06        		.uleb128 0x6
 944 011e 0000 0000 		.long	.LASF17
 945 0122 2C        		.byte	0x2c
 946 0123 0000 0129 		.long	0x129
 947 0127 03        		.uleb128 0x3
 948 0128 00        		.byte	0
 949 0129 1B        		.uleb128 0x1b
 950 012a 0000 0000 		.long	.LASF20
 951 012e 02        		.byte	0x2
 952 012f 2A        		.byte	0x2a
 953 0130 0D        		.byte	0xd
 954 0131 0000 013B 		.long	0x13b
 955 0135 04        		.uleb128 0x4
 956 0136 0000 0078 		.long	0x78
 957 013a 00        		.byte	0
 958 013b 06        		.uleb128 0x6
 959 013c 0000 0000 		.long	.LASF18
 960 0140 29        		.byte	0x29
 961 0141 0000 0147 		.long	0x147
 962 0145 03        		.uleb128 0x3
 963 0146 00        		.byte	0
 964 0147 06        		.uleb128 0x6
 965 0148 0000 0000 		.long	.LASF19
 966 014c 32        		.byte	0x32
 967 014d 0000 0153 		.long	0x153
 968 0151 03        		.uleb128 0x3
 969 0152 00        		.byte	0
 970 0153 0E        		.uleb128 0xe
 971 0154 5600      		.string	"V"
 972 0156 3E        		.byte	0x3e
 973 0157 0000 0161 		.long	0x161
 974 015b 04        		.uleb128 0x4
 975 015c 0000 006C 		.long	0x6c
 976 0160 00        		.byte	0
 977 0161 1C        		.uleb128 0x1c
 978 0162 0000 0000 		.long	.LASF27
 979 0166 04        		.byte	0x4
 980 0167 CE        		.byte	0xce
 981 0168 05        		.byte	0x5
 982 0169 0000 006C 		.long	0x6c
 983 016d 0000 0178 		.long	0x178
 984 0171 04        		.uleb128 0x4
 985 0172 0000 0089 		.long	0x89
 986 0176 03        		.uleb128 0x3
 987 0177 00        		.byte	0
 988 0178 0E        		.uleb128 0xe
 989 0179 5000      		.string	"P"


 990 017b 3D        		.byte	0x3d
 991 017c 0000 0186 		.long	0x186
 992 0180 04        		.uleb128 0x4
 993 0181 0000 006C 		.long	0x6c
 994 0185 00        		.byte	0
 995 0186 1D        		.uleb128 0x1d
 996 0187 0000 0000 		.long	.LASF33
 997 018b 01        		.byte	0x1
 998 018c 7A        		.byte	0x7a
 999 018d 06        		.byte	0x6
 1000 018e 0000 0000 		.long	.LFB8
 1001 0192 0000 000A 		.long	.LFE8-.LFB8
 1002 0196 01        		.uleb128 0x1
 1003 0197 9C        		.byte	0x9c
 1004 0198 0000 01B1 		.long	0x1b1
 1005 019c 1E        		.uleb128 0x1e
 1006 019d 0000 0000 		.long	.LASF34
 1007 01a1 01        		.byte	0x1
 1008 01a2 7A        		.byte	0x7a
 1009 01a3 0F        		.byte	0xf
 1010 01a4 0000 006C 		.long	0x6c
 1011 01a8 0000 0000 		.long	.LLST7
 1012 01ac 0000 0000 		.long	.LVUS7
 1013 01b0 00        		.byte	0
 1014 01b1 0F        		.uleb128 0xf
 1015 01b2 0000 0000 		.long	.LASF21
 1016 01b6 55        		.byte	0x55
 1017 01b7 0000 006C 		.long	0x6c
 1018 01bb 0000 0000 		.long	.LFB7
 1019 01bf 0000 00C2 		.long	.LFE7-.LFB7
 1020 01c3 01        		.uleb128 0x1
 1021 01c4 9C        		.byte	0x9c
 1022 01c5 0000 026C 		.long	0x26c
 1023 01c9 01        		.uleb128 0x1
 1024 01ca 0000 0000 		.long	.LVL58
 1025 01ce 0000 0481 		.long	0x481
 1026 01d2 01        		.uleb128 0x1
 1027 01d3 0000 0000 		.long	.LVL59
 1028 01d7 0000 013B 		.long	0x13b
 1029 01db 01        		.uleb128 0x1
 1030 01dc 0000 0000 		.long	.LVL60
 1031 01e0 0000 0481 		.long	0x481
 1032 01e4 01        		.uleb128 0x1
 1033 01e5 0000 0000 		.long	.LVL61
 1034 01e9 0000 0481 		.long	0x481
 1035 01ed 01        		.uleb128 0x1
 1036 01ee 0000 0000 		.long	.LVL62
 1037 01f2 0000 0129 		.long	0x129
 1038 01f6 01        		.uleb128 0x1
 1039 01f7 0000 0000 		.long	.LVL63
 1040 01fb 0000 0481 		.long	0x481
 1041 01ff 01        		.uleb128 0x1
 1042 0200 0000 0000 		.long	.LVL64
 1043 0204 0000 0481 		.long	0x481
 1044 0208 01        		.uleb128 0x1
 1045 0209 0000 0000 		.long	.LVL65
 1046 020d 0000 0129 		.long	0x129


 1047 0211 01        		.uleb128 0x1
 1048 0212 0000 0000 		.long	.LVL66
 1049 0216 0000 0481 		.long	0x481
 1050 021a 01        		.uleb128 0x1
 1051 021b 0000 0000 		.long	.LVL67
 1052 021f 0000 0481 		.long	0x481
 1053 0223 01        		.uleb128 0x1
 1054 0224 0000 0000 		.long	.LVL68
 1055 0228 0000 0129 		.long	0x129
 1056 022c 01        		.uleb128 0x1
 1057 022d 0000 0000 		.long	.LVL69
 1058 0231 0000 0481 		.long	0x481
 1059 0235 01        		.uleb128 0x1
 1060 0236 0000 0000 		.long	.LVL70
 1061 023a 0000 0481 		.long	0x481
 1062 023e 01        		.uleb128 0x1
 1063 023f 0000 0000 		.long	.LVL71
 1064 0243 0000 0129 		.long	0x129
 1065 0247 01        		.uleb128 0x1
 1066 0248 0000 0000 		.long	.LVL72
 1067 024c 0000 0481 		.long	0x481
 1068 0250 01        		.uleb128 0x1
 1069 0251 0000 0000 		.long	.LVL73
 1070 0255 0000 0481 		.long	0x481
 1071 0259 01        		.uleb128 0x1
 1072 025a 0000 0000 		.long	.LVL74
 1073 025e 0000 011D 		.long	0x11d
 1074 0262 01        		.uleb128 0x1
 1075 0263 0000 0000 		.long	.LVL75
 1076 0267 0000 0481 		.long	0x481
 1077 026b 00        		.byte	0
 1078 026c 07        		.uleb128 0x7
 1079 026d 0000 0000 		.long	.LASF22
 1080 0271 3F        		.byte	0x3f
 1081 0272 0000 006C 		.long	0x6c
 1082 0276 0000 0000 		.long	.LFB6
 1083 027a 0000 00CC 		.long	.LFE6-.LFB6
 1084 027e 01        		.uleb128 0x1
 1085 027f 9C        		.byte	0x9c
 1086 0280 0000 02F0 		.long	0x2f0
 1087 0284 08        		.uleb128 0x8
 1088 0285 0000 0000 		.long	.LLRL4
 1089 0289 0000 02B0 		.long	0x2b0
 1090 028d 05        		.uleb128 0x5
 1091 028e 6B00      		.string	"k"
 1092 0290 42        		.byte	0x42
 1093 0291 0B        		.byte	0xb
 1094 0292 0000 006C 		.long	0x6c
 1095 0296 0000 0000 		.long	.LLST5
 1096 029a 0000 0000 		.long	.LVUS5
 1097 029e 09        		.uleb128 0x9
 1098 029f 0000 0000 		.long	.LVL42
 1099 02a3 02        		.uleb128 0x2
 1100 02a4 73        		.byte	0x73
 1101 02a5 00        		.sleb128 0
 1102 02a6 01        		.uleb128 0x1
 1103 02a7 0000 0000 		.long	.LVL43


 1104 02ab 0000 048A 		.long	0x48a
 1105 02af 00        		.byte	0
 1106 02b0 01        		.uleb128 0x1
 1107 02b1 0000 0000 		.long	.LVL30
 1108 02b5 0000 0481 		.long	0x481
 1109 02b9 01        		.uleb128 0x1
 1110 02ba 0000 0000 		.long	.LVL35
 1111 02be 0000 0481 		.long	0x481
 1112 02c2 01        		.uleb128 0x1
 1113 02c3 0000 0000 		.long	.LVL36
 1114 02c7 0000 0178 		.long	0x178
 1115 02cb 01        		.uleb128 0x1
 1116 02cc 0000 0000 		.long	.LVL37
 1117 02d0 0000 048A 		.long	0x48a
 1118 02d4 01        		.uleb128 0x1
 1119 02d5 0000 0000 		.long	.LVL38
 1120 02d9 0000 0153 		.long	0x153
 1121 02dd 01        		.uleb128 0x1
 1122 02de 0000 0000 		.long	.LVL39
 1123 02e2 0000 0481 		.long	0x481
 1124 02e6 01        		.uleb128 0x1
 1125 02e7 0000 0000 		.long	.LVL40
 1126 02eb 0000 0178 		.long	0x178
 1127 02ef 00        		.byte	0
 1128 02f0 07        		.uleb128 0x7
 1129 02f1 0000 0000 		.long	.LASF23
 1130 02f5 2D        		.byte	0x2d
 1131 02f6 0000 006C 		.long	0x6c
 1132 02fa 0000 0000 		.long	.LFB5
 1133 02fe 0000 00C4 		.long	.LFE5-.LFB5
 1134 0302 01        		.uleb128 0x1
 1135 0303 9C        		.byte	0x9c
 1136 0304 0000 0374 		.long	0x374
 1137 0308 08        		.uleb128 0x8
 1138 0309 0000 0000 		.long	.LLRL2
 1139 030d 0000 0334 		.long	0x334
 1140 0311 05        		.uleb128 0x5
 1141 0312 6B00      		.string	"k"
 1142 0314 30        		.byte	0x30
 1143 0315 0B        		.byte	0xb
 1144 0316 0000 006C 		.long	0x6c
 1145 031a 0000 0000 		.long	.LLST3
 1146 031e 0000 0000 		.long	.LVUS3
 1147 0322 09        		.uleb128 0x9
 1148 0323 0000 0000 		.long	.LVL27
 1149 0327 02        		.uleb128 0x2
 1150 0328 73        		.byte	0x73
 1151 0329 00        		.sleb128 0
 1152 032a 01        		.uleb128 0x1
 1153 032b 0000 0000 		.long	.LVL28
 1154 032f 0000 048A 		.long	0x48a
 1155 0333 00        		.byte	0
 1156 0334 01        		.uleb128 0x1
 1157 0335 0000 0000 		.long	.LVL15
 1158 0339 0000 0481 		.long	0x481
 1159 033d 01        		.uleb128 0x1
 1160 033e 0000 0000 		.long	.LVL20


 1161 0342 0000 0481 		.long	0x481
 1162 0346 01        		.uleb128 0x1
 1163 0347 0000 0000 		.long	.LVL21
 1164 034b 0000 0178 		.long	0x178
 1165 034f 01        		.uleb128 0x1
 1166 0350 0000 0000 		.long	.LVL22
 1167 0354 0000 048A 		.long	0x48a
 1168 0358 01        		.uleb128 0x1
 1169 0359 0000 0000 		.long	.LVL23
 1170 035d 0000 0153 		.long	0x153
 1171 0361 01        		.uleb128 0x1
 1172 0362 0000 0000 		.long	.LVL24
 1173 0366 0000 0481 		.long	0x481
 1174 036a 01        		.uleb128 0x1
 1175 036b 0000 0000 		.long	.LVL25
 1176 036f 0000 0178 		.long	0x178
 1177 0373 00        		.byte	0
 1178 0374 07        		.uleb128 0x7
 1179 0375 0000 0000 		.long	.LASF24
 1180 0379 1B        		.byte	0x1b
 1181 037a 0000 006C 		.long	0x6c
 1182 037e 0000 0000 		.long	.LFB4
 1183 0382 0000 00BA 		.long	.LFE4-.LFB4
 1184 0386 01        		.uleb128 0x1
 1185 0387 9C        		.byte	0x9c
 1186 0388 0000 03F8 		.long	0x3f8
 1187 038c 08        		.uleb128 0x8
 1188 038d 0000 0000 		.long	.LLRL0
 1189 0391 0000 03B8 		.long	0x3b8
 1190 0395 05        		.uleb128 0x5
 1191 0396 6B00      		.string	"k"
 1192 0398 1E        		.byte	0x1e
 1193 0399 0B        		.byte	0xb
 1194 039a 0000 006C 		.long	0x6c
 1195 039e 0000 0000 		.long	.LLST1
 1196 03a2 0000 0000 		.long	.LVUS1
 1197 03a6 09        		.uleb128 0x9
 1198 03a7 0000 0000 		.long	.LVL12
 1199 03ab 02        		.uleb128 0x2
 1200 03ac 73        		.byte	0x73
 1201 03ad 00        		.sleb128 0
 1202 03ae 01        		.uleb128 0x1
 1203 03af 0000 0000 		.long	.LVL13
 1204 03b3 0000 048A 		.long	0x48a
 1205 03b7 00        		.byte	0
 1206 03b8 01        		.uleb128 0x1
 1207 03b9 0000 0000 		.long	.LVL0
 1208 03bd 0000 0481 		.long	0x481
 1209 03c1 01        		.uleb128 0x1
 1210 03c2 0000 0000 		.long	.LVL5
 1211 03c6 0000 0481 		.long	0x481
 1212 03ca 01        		.uleb128 0x1
 1213 03cb 0000 0000 		.long	.LVL6
 1214 03cf 0000 0178 		.long	0x178
 1215 03d3 01        		.uleb128 0x1
 1216 03d4 0000 0000 		.long	.LVL7
 1217 03d8 0000 048A 		.long	0x48a


 1218 03dc 01        		.uleb128 0x1
 1219 03dd 0000 0000 		.long	.LVL8
 1220 03e1 0000 0153 		.long	0x153
 1221 03e5 01        		.uleb128 0x1
 1222 03e6 0000 0000 		.long	.LVL9
 1223 03ea 0000 0481 		.long	0x481
 1224 03ee 01        		.uleb128 0x1
 1225 03ef 0000 0000 		.long	.LVL10
 1226 03f3 0000 0178 		.long	0x178
 1227 03f7 00        		.byte	0
 1228 03f8 0F        		.uleb128 0xf
 1229 03f9 0000 0000 		.long	.LASF25
 1230 03fd 07        		.byte	0x7
 1231 03fe 0000 006C 		.long	0x6c
 1232 0402 0000 0000 		.long	.LFB3
 1233 0406 0000 0090 		.long	.LFE3-.LFB3
 1234 040a 01        		.uleb128 0x1
 1235 040b 9C        		.byte	0x9c
 1236 040c 0000 0481 		.long	0x481
 1237 0410 1F        		.uleb128 0x1f
 1238 0411 0000 0000 		.long	.LBB8
 1239 0415 0000 0024 		.long	.LBE8-.LBB8
 1240 0419 0000 0441 		.long	0x441
 1241 041d 05        		.uleb128 0x5
 1242 041e 6900      		.string	"i"
 1243 0420 0D        		.byte	0xd
 1244 0421 0D        		.byte	0xd
 1245 0422 0000 006C 		.long	0x6c
 1246 0426 0000 0000 		.long	.LLST6
 1247 042a 0000 0000 		.long	.LVUS6
 1248 042e 01        		.uleb128 0x1
 1249 042f 0000 0000 		.long	.LVL50
 1250 0433 0000 048A 		.long	0x48a
 1251 0437 01        		.uleb128 0x1
 1252 0438 0000 0000 		.long	.LVL51
 1253 043c 0000 0153 		.long	0x153
 1254 0440 00        		.byte	0
 1255 0441 01        		.uleb128 0x1
 1256 0442 0000 0000 		.long	.LVL45
 1257 0446 0000 0481 		.long	0x481
 1258 044a 01        		.uleb128 0x1
 1259 044b 0000 0000 		.long	.LVL46
 1260 044f 0000 0178 		.long	0x178
 1261 0453 01        		.uleb128 0x1
 1262 0454 0000 0000 		.long	.LVL53
 1263 0458 0000 0481 		.long	0x481
 1264 045c 01        		.uleb128 0x1
 1265 045d 0000 0000 		.long	.LVL54
 1266 0461 0000 0153 		.long	0x153
 1267 0465 01        		.uleb128 0x1
 1268 0466 0000 0000 		.long	.LVL55
 1269 046a 0000 0481 		.long	0x481
 1270 046e 01        		.uleb128 0x1
 1271 046f 0000 0000 		.long	.LVL56
 1272 0473 0000 0147 		.long	0x147
 1273 0477 01        		.uleb128 0x1
 1274 0478 0000 0000 		.long	.LVL57


 1275 047c 0000 0481 		.long	0x481
 1276 0480 00        		.byte	0
 1277 0481 10        		.uleb128 0x10
 1278 0482 0000 0000 		.long	.LASF26
 1279 0486 0000 0000 		.long	.LASF28
 1280 048a 10        		.uleb128 0x10
 1281 048b 0000 0000 		.long	.LASF27
 1282 048f 0000 0000 		.long	.LASF29
 1283 0493 00        		.byte	0
 1284               		.section	.debug_abbrev,"",@progbits
 1285               	.Ldebug_abbrev0:
 1286 0000 01        		.uleb128 0x1
 1287 0001 48        		.uleb128 0x48
 1288 0002 00        		.byte	0
 1289 0003 7D        		.uleb128 0x7d
 1290 0004 01        		.uleb128 0x1
 1291 0005 7F        		.uleb128 0x7f
 1292 0006 13        		.uleb128 0x13
 1293 0007 00        		.byte	0
 1294 0008 00        		.byte	0
 1295 0009 02        		.uleb128 0x2
 1296 000a 24        		.uleb128 0x24
 1297 000b 00        		.byte	0
 1298 000c 0B        		.uleb128 0xb
 1299 000d 0B        		.uleb128 0xb
 1300 000e 3E        		.uleb128 0x3e
 1301 000f 0B        		.uleb128 0xb
 1302 0010 03        		.uleb128 0x3
 1303 0011 0E        		.uleb128 0xe
 1304 0012 00        		.byte	0
 1305 0013 00        		.byte	0
 1306 0014 03        		.uleb128 0x3
 1307 0015 18        		.uleb128 0x18
 1308 0016 00        		.byte	0
 1309 0017 00        		.byte	0
 1310 0018 00        		.byte	0
 1311 0019 04        		.uleb128 0x4
 1312 001a 05        		.uleb128 0x5
 1313 001b 00        		.byte	0
 1314 001c 49        		.uleb128 0x49
 1315 001d 13        		.uleb128 0x13
 1316 001e 00        		.byte	0
 1317 001f 00        		.byte	0
 1318 0020 05        		.uleb128 0x5
 1319 0021 34        		.uleb128 0x34
 1320 0022 00        		.byte	0
 1321 0023 03        		.uleb128 0x3
 1322 0024 08        		.uleb128 0x8
 1323 0025 3A        		.uleb128 0x3a
 1324 0026 21        		.uleb128 0x21
 1325 0027 01        		.sleb128 1
 1326 0028 3B        		.uleb128 0x3b
 1327 0029 0B        		.uleb128 0xb
 1328 002a 39        		.uleb128 0x39
 1329 002b 0B        		.uleb128 0xb
 1330 002c 49        		.uleb128 0x49
 1331 002d 13        		.uleb128 0x13


 1332 002e 02        		.uleb128 0x2
 1333 002f 17        		.uleb128 0x17
 1334 0030 B742      		.uleb128 0x2137
 1335 0032 17        		.uleb128 0x17
 1336 0033 00        		.byte	0
 1337 0034 00        		.byte	0
 1338 0035 06        		.uleb128 0x6
 1339 0036 2E        		.uleb128 0x2e
 1340 0037 01        		.byte	0x1
 1341 0038 3F        		.uleb128 0x3f
 1342 0039 19        		.uleb128 0x19
 1343 003a 03        		.uleb128 0x3
 1344 003b 0E        		.uleb128 0xe
 1345 003c 3A        		.uleb128 0x3a
 1346 003d 21        		.uleb128 0x21
 1347 003e 02        		.sleb128 2
 1348 003f 3B        		.uleb128 0x3b
 1349 0040 0B        		.uleb128 0xb
 1350 0041 39        		.uleb128 0x39
 1351 0042 21        		.uleb128 0x21
 1352 0043 0D        		.sleb128 13
 1353 0044 3C        		.uleb128 0x3c
 1354 0045 19        		.uleb128 0x19
 1355 0046 01        		.uleb128 0x1
 1356 0047 13        		.uleb128 0x13
 1357 0048 00        		.byte	0
 1358 0049 00        		.byte	0
 1359 004a 07        		.uleb128 0x7
 1360 004b 2E        		.uleb128 0x2e
 1361 004c 01        		.byte	0x1
 1362 004d 3F        		.uleb128 0x3f
 1363 004e 19        		.uleb128 0x19
 1364 004f 03        		.uleb128 0x3
 1365 0050 0E        		.uleb128 0xe
 1366 0051 3A        		.uleb128 0x3a
 1367 0052 21        		.uleb128 0x21
 1368 0053 01        		.sleb128 1
 1369 0054 3B        		.uleb128 0x3b
 1370 0055 0B        		.uleb128 0xb
 1371 0056 39        		.uleb128 0x39
 1372 0057 21        		.uleb128 0x21
 1373 0058 05        		.sleb128 5
 1374 0059 49        		.uleb128 0x49
 1375 005a 13        		.uleb128 0x13
 1376 005b 11        		.uleb128 0x11
 1377 005c 01        		.uleb128 0x1
 1378 005d 12        		.uleb128 0x12
 1379 005e 06        		.uleb128 0x6
 1380 005f 40        		.uleb128 0x40
 1381 0060 18        		.uleb128 0x18
 1382 0061 7C        		.uleb128 0x7c
 1383 0062 19        		.uleb128 0x19
 1384 0063 01        		.uleb128 0x1
 1385 0064 13        		.uleb128 0x13
 1386 0065 00        		.byte	0
 1387 0066 00        		.byte	0
 1388 0067 08        		.uleb128 0x8


 1389 0068 0B        		.uleb128 0xb
 1390 0069 01        		.byte	0x1
 1391 006a 55        		.uleb128 0x55
 1392 006b 17        		.uleb128 0x17
 1393 006c 01        		.uleb128 0x1
 1394 006d 13        		.uleb128 0x13
 1395 006e 00        		.byte	0
 1396 006f 00        		.byte	0
 1397 0070 09        		.uleb128 0x9
 1398 0071 48        		.uleb128 0x48
 1399 0072 00        		.byte	0
 1400 0073 7D        		.uleb128 0x7d
 1401 0074 01        		.uleb128 0x1
 1402 0075 8301      		.uleb128 0x83
 1403 0077 18        		.uleb128 0x18
 1404 0078 00        		.byte	0
 1405 0079 00        		.byte	0
 1406 007a 0A        		.uleb128 0xa
 1407 007b 0F        		.uleb128 0xf
 1408 007c 00        		.byte	0
 1409 007d 0B        		.uleb128 0xb
 1410 007e 21        		.uleb128 0x21
 1411 007f 04        		.sleb128 4
 1412 0080 49        		.uleb128 0x49
 1413 0081 13        		.uleb128 0x13
 1414 0082 00        		.byte	0
 1415 0083 00        		.byte	0
 1416 0084 0B        		.uleb128 0xb
 1417 0085 16        		.uleb128 0x16
 1418 0086 00        		.byte	0
 1419 0087 03        		.uleb128 0x3
 1420 0088 0E        		.uleb128 0xe
 1421 0089 3A        		.uleb128 0x3a
 1422 008a 21        		.uleb128 0x21
 1423 008b 02        		.sleb128 2
 1424 008c 3B        		.uleb128 0x3b
 1425 008d 0B        		.uleb128 0xb
 1426 008e 39        		.uleb128 0x39
 1427 008f 0B        		.uleb128 0xb
 1428 0090 49        		.uleb128 0x49
 1429 0091 13        		.uleb128 0x13
 1430 0092 00        		.byte	0
 1431 0093 00        		.byte	0
 1432 0094 0C        		.uleb128 0xc
 1433 0095 0D        		.uleb128 0xd
 1434 0096 00        		.byte	0
 1435 0097 03        		.uleb128 0x3
 1436 0098 0E        		.uleb128 0xe
 1437 0099 3A        		.uleb128 0x3a
 1438 009a 21        		.uleb128 0x21
 1439 009b 02        		.sleb128 2
 1440 009c 3B        		.uleb128 0x3b
 1441 009d 0B        		.uleb128 0xb
 1442 009e 39        		.uleb128 0x39
 1443 009f 0B        		.uleb128 0xb
 1444 00a0 49        		.uleb128 0x49
 1445 00a1 13        		.uleb128 0x13


 1446 00a2 38        		.uleb128 0x38
 1447 00a3 0B        		.uleb128 0xb
 1448 00a4 00        		.byte	0
 1449 00a5 00        		.byte	0
 1450 00a6 0D        		.uleb128 0xd
 1451 00a7 34        		.uleb128 0x34
 1452 00a8 00        		.byte	0
 1453 00a9 03        		.uleb128 0x3
 1454 00aa 08        		.uleb128 0x8
 1455 00ab 3A        		.uleb128 0x3a
 1456 00ac 21        		.uleb128 0x21
 1457 00ad 01        		.sleb128 1
 1458 00ae 3B        		.uleb128 0x3b
 1459 00af 0B        		.uleb128 0xb
 1460 00b0 39        		.uleb128 0x39
 1461 00b1 21        		.uleb128 0x21
 1462 00b2 05        		.sleb128 5
 1463 00b3 49        		.uleb128 0x49
 1464 00b4 13        		.uleb128 0x13
 1465 00b5 3F        		.uleb128 0x3f
 1466 00b6 19        		.uleb128 0x19
 1467 00b7 02        		.uleb128 0x2
 1468 00b8 18        		.uleb128 0x18
 1469 00b9 00        		.byte	0
 1470 00ba 00        		.byte	0
 1471 00bb 0E        		.uleb128 0xe
 1472 00bc 2E        		.uleb128 0x2e
 1473 00bd 01        		.byte	0x1
 1474 00be 3F        		.uleb128 0x3f
 1475 00bf 19        		.uleb128 0x19
 1476 00c0 03        		.uleb128 0x3
 1477 00c1 08        		.uleb128 0x8
 1478 00c2 3A        		.uleb128 0x3a
 1479 00c3 21        		.uleb128 0x21
 1480 00c4 02        		.sleb128 2
 1481 00c5 3B        		.uleb128 0x3b
 1482 00c6 0B        		.uleb128 0xb
 1483 00c7 39        		.uleb128 0x39
 1484 00c8 21        		.uleb128 0x21
 1485 00c9 0D        		.sleb128 13
 1486 00ca 27        		.uleb128 0x27
 1487 00cb 19        		.uleb128 0x19
 1488 00cc 3C        		.uleb128 0x3c
 1489 00cd 19        		.uleb128 0x19
 1490 00ce 01        		.uleb128 0x1
 1491 00cf 13        		.uleb128 0x13
 1492 00d0 00        		.byte	0
 1493 00d1 00        		.byte	0
 1494 00d2 0F        		.uleb128 0xf
 1495 00d3 2E        		.uleb128 0x2e
 1496 00d4 01        		.byte	0x1
 1497 00d5 3F        		.uleb128 0x3f
 1498 00d6 19        		.uleb128 0x19
 1499 00d7 03        		.uleb128 0x3
 1500 00d8 0E        		.uleb128 0xe
 1501 00d9 3A        		.uleb128 0x3a
 1502 00da 21        		.uleb128 0x21


 1503 00db 01        		.sleb128 1
 1504 00dc 3B        		.uleb128 0x3b
 1505 00dd 0B        		.uleb128 0xb
 1506 00de 39        		.uleb128 0x39
 1507 00df 21        		.uleb128 0x21
 1508 00e0 05        		.sleb128 5
 1509 00e1 49        		.uleb128 0x49
 1510 00e2 13        		.uleb128 0x13
 1511 00e3 11        		.uleb128 0x11
 1512 00e4 01        		.uleb128 0x1
 1513 00e5 12        		.uleb128 0x12
 1514 00e6 06        		.uleb128 0x6
 1515 00e7 40        		.uleb128 0x40
 1516 00e8 18        		.uleb128 0x18
 1517 00e9 7A        		.uleb128 0x7a
 1518 00ea 19        		.uleb128 0x19
 1519 00eb 01        		.uleb128 0x1
 1520 00ec 13        		.uleb128 0x13
 1521 00ed 00        		.byte	0
 1522 00ee 00        		.byte	0
 1523 00ef 10        		.uleb128 0x10
 1524 00f0 2E        		.uleb128 0x2e
 1525 00f1 00        		.byte	0
 1526 00f2 3F        		.uleb128 0x3f
 1527 00f3 19        		.uleb128 0x19
 1528 00f4 3C        		.uleb128 0x3c
 1529 00f5 19        		.uleb128 0x19
 1530 00f6 6E        		.uleb128 0x6e
 1531 00f7 0E        		.uleb128 0xe
 1532 00f8 03        		.uleb128 0x3
 1533 00f9 0E        		.uleb128 0xe
 1534 00fa 3A        		.uleb128 0x3a
 1535 00fb 21        		.uleb128 0x21
 1536 00fc 03        		.sleb128 3
 1537 00fd 3B        		.uleb128 0x3b
 1538 00fe 21        		.uleb128 0x21
 1539 00ff 00        		.sleb128 0
 1540 0100 00        		.byte	0
 1541 0101 00        		.byte	0
 1542 0102 11        		.uleb128 0x11
 1543 0103 11        		.uleb128 0x11
 1544 0104 01        		.byte	0x1
 1545 0105 25        		.uleb128 0x25
 1546 0106 0E        		.uleb128 0xe
 1547 0107 13        		.uleb128 0x13
 1548 0108 0B        		.uleb128 0xb
 1549 0109 03        		.uleb128 0x3
 1550 010a 0E        		.uleb128 0xe
 1551 010b 1B        		.uleb128 0x1b
 1552 010c 0E        		.uleb128 0xe
 1553 010d 55        		.uleb128 0x55
 1554 010e 17        		.uleb128 0x17
 1555 010f 11        		.uleb128 0x11
 1556 0110 01        		.uleb128 0x1
 1557 0111 10        		.uleb128 0x10
 1558 0112 17        		.uleb128 0x17
 1559 0113 00        		.byte	0


 1560 0114 00        		.byte	0
 1561 0115 12        		.uleb128 0x12
 1562 0116 24        		.uleb128 0x24
 1563 0117 00        		.byte	0
 1564 0118 0B        		.uleb128 0xb
 1565 0119 0B        		.uleb128 0xb
 1566 011a 3E        		.uleb128 0x3e
 1567 011b 0B        		.uleb128 0xb
 1568 011c 03        		.uleb128 0x3
 1569 011d 08        		.uleb128 0x8
 1570 011e 00        		.byte	0
 1571 011f 00        		.byte	0
 1572 0120 13        		.uleb128 0x13
 1573 0121 35        		.uleb128 0x35
 1574 0122 00        		.byte	0
 1575 0123 49        		.uleb128 0x49
 1576 0124 13        		.uleb128 0x13
 1577 0125 00        		.byte	0
 1578 0126 00        		.byte	0
 1579 0127 14        		.uleb128 0x14
 1580 0128 26        		.uleb128 0x26
 1581 0129 00        		.byte	0
 1582 012a 49        		.uleb128 0x49
 1583 012b 13        		.uleb128 0x13
 1584 012c 00        		.byte	0
 1585 012d 00        		.byte	0
 1586 012e 15        		.uleb128 0x15
 1587 012f 13        		.uleb128 0x13
 1588 0130 01        		.byte	0x1
 1589 0131 0B        		.uleb128 0xb
 1590 0132 0B        		.uleb128 0xb
 1591 0133 3A        		.uleb128 0x3a
 1592 0134 0B        		.uleb128 0xb
 1593 0135 3B        		.uleb128 0x3b
 1594 0136 0B        		.uleb128 0xb
 1595 0137 39        		.uleb128 0x39
 1596 0138 0B        		.uleb128 0xb
 1597 0139 01        		.uleb128 0x1
 1598 013a 13        		.uleb128 0x13
 1599 013b 00        		.byte	0
 1600 013c 00        		.byte	0
 1601 013d 16        		.uleb128 0x16
 1602 013e 0D        		.uleb128 0xd
 1603 013f 00        		.byte	0
 1604 0140 03        		.uleb128 0x3
 1605 0141 08        		.uleb128 0x8
 1606 0142 3A        		.uleb128 0x3a
 1607 0143 0B        		.uleb128 0xb
 1608 0144 3B        		.uleb128 0x3b
 1609 0145 0B        		.uleb128 0xb
 1610 0146 39        		.uleb128 0x39
 1611 0147 0B        		.uleb128 0xb
 1612 0148 49        		.uleb128 0x49
 1613 0149 13        		.uleb128 0x13
 1614 014a 38        		.uleb128 0x38
 1615 014b 0B        		.uleb128 0xb
 1616 014c 00        		.byte	0


 1617 014d 00        		.byte	0
 1618 014e 17        		.uleb128 0x17
 1619 014f 01        		.uleb128 0x1
 1620 0150 01        		.byte	0x1
 1621 0151 49        		.uleb128 0x49
 1622 0152 13        		.uleb128 0x13
 1623 0153 01        		.uleb128 0x1
 1624 0154 13        		.uleb128 0x13
 1625 0155 00        		.byte	0
 1626 0156 00        		.byte	0
 1627 0157 18        		.uleb128 0x18
 1628 0158 21        		.uleb128 0x21
 1629 0159 00        		.byte	0
 1630 015a 49        		.uleb128 0x49
 1631 015b 13        		.uleb128 0x13
 1632 015c 2F        		.uleb128 0x2f
 1633 015d 0B        		.uleb128 0xb
 1634 015e 00        		.byte	0
 1635 015f 00        		.byte	0
 1636 0160 19        		.uleb128 0x19
 1637 0161 34        		.uleb128 0x34
 1638 0162 00        		.byte	0
 1639 0163 03        		.uleb128 0x3
 1640 0164 0E        		.uleb128 0xe
 1641 0165 3A        		.uleb128 0x3a
 1642 0166 0B        		.uleb128 0xb
 1643 0167 3B        		.uleb128 0x3b
 1644 0168 0B        		.uleb128 0xb
 1645 0169 39        		.uleb128 0x39
 1646 016a 0B        		.uleb128 0xb
 1647 016b 49        		.uleb128 0x49
 1648 016c 13        		.uleb128 0x13
 1649 016d 3F        		.uleb128 0x3f
 1650 016e 19        		.uleb128 0x19
 1651 016f 3C        		.uleb128 0x3c
 1652 0170 19        		.uleb128 0x19
 1653 0171 00        		.byte	0
 1654 0172 00        		.byte	0
 1655 0173 1A        		.uleb128 0x1a
 1656 0174 34        		.uleb128 0x34
 1657 0175 00        		.byte	0
 1658 0176 03        		.uleb128 0x3
 1659 0177 0E        		.uleb128 0xe
 1660 0178 3A        		.uleb128 0x3a
 1661 0179 0B        		.uleb128 0xb
 1662 017a 3B        		.uleb128 0x3b
 1663 017b 0B        		.uleb128 0xb
 1664 017c 39        		.uleb128 0x39
 1665 017d 0B        		.uleb128 0xb
 1666 017e 49        		.uleb128 0x49
 1667 017f 13        		.uleb128 0x13
 1668 0180 3F        		.uleb128 0x3f
 1669 0181 19        		.uleb128 0x19
 1670 0182 02        		.uleb128 0x2
 1671 0183 18        		.uleb128 0x18
 1672 0184 00        		.byte	0
 1673 0185 00        		.byte	0


 1674 0186 1B        		.uleb128 0x1b
 1675 0187 2E        		.uleb128 0x2e
 1676 0188 01        		.byte	0x1
 1677 0189 3F        		.uleb128 0x3f
 1678 018a 19        		.uleb128 0x19
 1679 018b 03        		.uleb128 0x3
 1680 018c 0E        		.uleb128 0xe
 1681 018d 3A        		.uleb128 0x3a
 1682 018e 0B        		.uleb128 0xb
 1683 018f 3B        		.uleb128 0x3b
 1684 0190 0B        		.uleb128 0xb
 1685 0191 39        		.uleb128 0x39
 1686 0192 0B        		.uleb128 0xb
 1687 0193 27        		.uleb128 0x27
 1688 0194 19        		.uleb128 0x19
 1689 0195 3C        		.uleb128 0x3c
 1690 0196 19        		.uleb128 0x19
 1691 0197 01        		.uleb128 0x1
 1692 0198 13        		.uleb128 0x13
 1693 0199 00        		.byte	0
 1694 019a 00        		.byte	0
 1695 019b 1C        		.uleb128 0x1c
 1696 019c 2E        		.uleb128 0x2e
 1697 019d 01        		.byte	0x1
 1698 019e 3F        		.uleb128 0x3f
 1699 019f 19        		.uleb128 0x19
 1700 01a0 03        		.uleb128 0x3
 1701 01a1 0E        		.uleb128 0xe
 1702 01a2 3A        		.uleb128 0x3a
 1703 01a3 0B        		.uleb128 0xb
 1704 01a4 3B        		.uleb128 0x3b
 1705 01a5 0B        		.uleb128 0xb
 1706 01a6 39        		.uleb128 0x39
 1707 01a7 0B        		.uleb128 0xb
 1708 01a8 27        		.uleb128 0x27
 1709 01a9 19        		.uleb128 0x19
 1710 01aa 49        		.uleb128 0x49
 1711 01ab 13        		.uleb128 0x13
 1712 01ac 3C        		.uleb128 0x3c
 1713 01ad 19        		.uleb128 0x19
 1714 01ae 01        		.uleb128 0x1
 1715 01af 13        		.uleb128 0x13
 1716 01b0 00        		.byte	0
 1717 01b1 00        		.byte	0
 1718 01b2 1D        		.uleb128 0x1d
 1719 01b3 2E        		.uleb128 0x2e
 1720 01b4 01        		.byte	0x1
 1721 01b5 3F        		.uleb128 0x3f
 1722 01b6 19        		.uleb128 0x19
 1723 01b7 03        		.uleb128 0x3
 1724 01b8 0E        		.uleb128 0xe
 1725 01b9 3A        		.uleb128 0x3a
 1726 01ba 0B        		.uleb128 0xb
 1727 01bb 3B        		.uleb128 0x3b
 1728 01bc 0B        		.uleb128 0xb
 1729 01bd 39        		.uleb128 0x39
 1730 01be 0B        		.uleb128 0xb


 1731 01bf 27        		.uleb128 0x27
 1732 01c0 19        		.uleb128 0x19
 1733 01c1 8701      		.uleb128 0x87
 1734 01c3 19        		.uleb128 0x19
 1735 01c4 11        		.uleb128 0x11
 1736 01c5 01        		.uleb128 0x1
 1737 01c6 12        		.uleb128 0x12
 1738 01c7 06        		.uleb128 0x6
 1739 01c8 40        		.uleb128 0x40
 1740 01c9 18        		.uleb128 0x18
 1741 01ca 7A        		.uleb128 0x7a
 1742 01cb 19        		.uleb128 0x19
 1743 01cc 01        		.uleb128 0x1
 1744 01cd 13        		.uleb128 0x13
 1745 01ce 00        		.byte	0
 1746 01cf 00        		.byte	0
 1747 01d0 1E        		.uleb128 0x1e
 1748 01d1 05        		.uleb128 0x5
 1749 01d2 00        		.byte	0
 1750 01d3 03        		.uleb128 0x3
 1751 01d4 0E        		.uleb128 0xe
 1752 01d5 3A        		.uleb128 0x3a
 1753 01d6 0B        		.uleb128 0xb
 1754 01d7 3B        		.uleb128 0x3b
 1755 01d8 0B        		.uleb128 0xb
 1756 01d9 39        		.uleb128 0x39
 1757 01da 0B        		.uleb128 0xb
 1758 01db 49        		.uleb128 0x49
 1759 01dc 13        		.uleb128 0x13
 1760 01dd 02        		.uleb128 0x2
 1761 01de 17        		.uleb128 0x17
 1762 01df B742      		.uleb128 0x2137
 1763 01e1 17        		.uleb128 0x17
 1764 01e2 00        		.byte	0
 1765 01e3 00        		.byte	0
 1766 01e4 1F        		.uleb128 0x1f
 1767 01e5 0B        		.uleb128 0xb
 1768 01e6 01        		.byte	0x1
 1769 01e7 11        		.uleb128 0x11
 1770 01e8 01        		.uleb128 0x1
 1771 01e9 12        		.uleb128 0x12
 1772 01ea 06        		.uleb128 0x6
 1773 01eb 01        		.uleb128 0x1
 1774 01ec 13        		.uleb128 0x13
 1775 01ed 00        		.byte	0
 1776 01ee 00        		.byte	0
 1777 01ef 00        		.byte	0
 1778               		.section	.debug_loclists,"",@progbits
 1779 0000 0000 0090 		.long	.Ldebug_loc3-.Ldebug_loc2
 1780               	.Ldebug_loc2:
 1781 0004 0005      		.word	0x5
 1782 0006 04        		.byte	0x4
 1783 0007 00        		.byte	0
 1784 0008 0000 0000 		.long	0
 1785               	.Ldebug_loc0:
 1786               	.LVUS7:
 1787 000c 00        		.uleb128 0


 1788 000d 00        		.uleb128 .LVU142
 1789               	.LLST7:
 1790 000e 08        		.byte	0x8
 1791 000f 0000 0000 		.long	.LVL76
 1792 0013 08        		.uleb128 .LVL77-.LVL76
 1793 0014 02        		.uleb128 0x2
 1794 0015 91        		.byte	0x91
 1795 0016 00        		.sleb128 0
 1796 0017 00        		.byte	0
 1797               	.LVUS5:
 1798 0018 02        		.uleb128 .LVU61
 1799 0019 00        		.uleb128 .LVU63
 1800 001a 00        		.uleb128 .LVU63
 1801 001b 00        		.uleb128 .LVU70
 1802 001c 00        		.uleb128 .LVU81
 1803 001d 00        		.uleb128 0
 1804               	.LLST5:
 1805 001e 06        		.byte	0x6
 1806 001f 0000 0000 		.long	.LVL30
 1807 0023 04        		.byte	0x4
 1808 0024 00        		.uleb128 .LVL30-.LVL30
 1809 0025 0C        		.uleb128 .LVL31-.LVL30
 1810 0026 02        		.uleb128 0x2
 1811 0027 30        		.byte	0x30
 1812 0028 9F        		.byte	0x9f
 1813 0029 04        		.byte	0x4
 1814 002a 0C        		.uleb128 .LVL31-.LVL30
 1815 002b 2C        		.uleb128 .LVL34-.LVL30
 1816 002c 01        		.uleb128 0x1
 1817 002d 52        		.byte	0x52
 1818 002e 04        		.byte	0x4
 1819 002f 6E        		.uleb128 .LVL41-.LVL30
 1820 0030 9C01      		.uleb128 .LFE6-.LVL30
 1821 0032 01        		.uleb128 0x1
 1822 0033 52        		.byte	0x52
 1823 0034 00        		.byte	0
 1824               	.LVUS3:
 1825 0035 02        		.uleb128 .LVU31
 1826 0036 00        		.uleb128 .LVU33
 1827 0037 00        		.uleb128 .LVU33
 1828 0038 00        		.uleb128 .LVU40
 1829 0039 00        		.uleb128 .LVU51
 1830 003a 00        		.uleb128 0
 1831               	.LLST3:
 1832 003b 06        		.byte	0x6
 1833 003c 0000 0000 		.long	.LVL15
 1834 0040 04        		.byte	0x4
 1835 0041 00        		.uleb128 .LVL15-.LVL15
 1836 0042 0C        		.uleb128 .LVL16-.LVL15
 1837 0043 02        		.uleb128 0x2
 1838 0044 30        		.byte	0x30
 1839 0045 9F        		.byte	0x9f
 1840 0046 04        		.byte	0x4
 1841 0047 0C        		.uleb128 .LVL16-.LVL15
 1842 0048 28        		.uleb128 .LVL19-.LVL15
 1843 0049 01        		.uleb128 0x1
 1844 004a 52        		.byte	0x52


 1845 004b 04        		.byte	0x4
 1846 004c 6A        		.uleb128 .LVL26-.LVL15
 1847 004d 9401      		.uleb128 .LFE5-.LVL15
 1848 004f 01        		.uleb128 0x1
 1849 0050 52        		.byte	0x52
 1850 0051 00        		.byte	0
 1851               	.LVUS1:
 1852 0052 02        		.uleb128 .LVU5
 1853 0053 00        		.uleb128 .LVU7
 1854 0054 00        		.uleb128 .LVU7
 1855 0055 00        		.uleb128 .LVU12
 1856 0056 00        		.uleb128 .LVU23
 1857 0057 00        		.uleb128 0
 1858               	.LLST1:
 1859 0058 06        		.byte	0x6
 1860 0059 0000 0000 		.long	.LVL0
 1861 005d 04        		.byte	0x4
 1862 005e 00        		.uleb128 .LVL0-.LVL0
 1863 005f 0C        		.uleb128 .LVL1-.LVL0
 1864 0060 02        		.uleb128 0x2
 1865 0061 30        		.byte	0x30
 1866 0062 9F        		.byte	0x9f
 1867 0063 04        		.byte	0x4
 1868 0064 0C        		.uleb128 .LVL1-.LVL0
 1869 0065 24        		.uleb128 .LVL4-.LVL0
 1870 0066 01        		.uleb128 0x1
 1871 0067 52        		.byte	0x52
 1872 0068 04        		.byte	0x4
 1873 0069 66        		.uleb128 .LVL11-.LVL0
 1874 006a 8A01      		.uleb128 .LFE4-.LVL0
 1875 006c 01        		.uleb128 0x1
 1876 006d 52        		.byte	0x52
 1877 006e 00        		.byte	0
 1878               	.LVUS6:
 1879 006f 02        		.uleb128 .LVU97
 1880 0070 00        		.uleb128 .LVU99
 1881 0071 00        		.uleb128 .LVU99
 1882 0072 00        		.uleb128 .LVU100
 1883 0073 00        		.uleb128 .LVU100
 1884 0074 01        		.uleb128 .LVU103
 1885 0075 01        		.uleb128 .LVU103
 1886 0076 00        		.uleb128 .LVU104
 1887               	.LLST6:
 1888 0077 06        		.byte	0x6
 1889 0078 0000 0000 		.long	.LVL47
 1890 007c 04        		.byte	0x4
 1891 007d 00        		.uleb128 .LVL47-.LVL47
 1892 007e 06        		.uleb128 .LVL48-.LVL47
 1893 007f 02        		.uleb128 0x2
 1894 0080 30        		.byte	0x30
 1895 0081 9F        		.byte	0x9f
 1896 0082 04        		.byte	0x4
 1897 0083 06        		.uleb128 .LVL48-.LVL47
 1898 0084 08        		.uleb128 .LVL49-.LVL47
 1899 0085 01        		.uleb128 0x1
 1900 0086 52        		.byte	0x52
 1901 0087 04        		.byte	0x4


 1902 0088 08        		.uleb128 .LVL49-.LVL47
 1903 0089 18        		.uleb128 .LVL51-.LVL47
 1904 008a 03        		.uleb128 0x3
 1905 008b 72        		.byte	0x72
 1906 008c 7F        		.sleb128 -1
 1907 008d 9F        		.byte	0x9f
 1908 008e 04        		.byte	0x4
 1909 008f 18        		.uleb128 .LVL51-.LVL47
 1910 0090 24        		.uleb128 .LVL52-.LVL47
 1911 0091 01        		.uleb128 0x1
 1912 0092 52        		.byte	0x52
 1913 0093 00        		.byte	0
 1914               	.Ldebug_loc3:
 1915               		.section	.debug_aranges,"",@progbits
 1916 0000 0000 0024 		.long	0x24
 1917 0004 0002      		.word	0x2
 1918 0006 0000 0000 		.long	.Ldebug_info0
 1919 000a 04        		.byte	0x4
 1920 000b 00        		.byte	0
 1921 000c 0000      		.word	0
 1922 000e 0000      		.word	0
 1923 0010 0000 0000 		.long	.Ltext0
 1924 0014 0000 02E4 		.long	.Letext0-.Ltext0
 1925 0018 0000 0000 		.long	.LFB7
 1926 001c 0000 00C2 		.long	.LFE7-.LFB7
 1927 0020 0000 0000 		.long	0
 1928 0024 0000 0000 		.long	0
 1929               		.section	.debug_rnglists,"",@progbits
 1930               	.Ldebug_ranges0:
 1931 0000 0000 003E 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 1932               	.Ldebug_ranges2:
 1933 0004 0005      		.word	0x5
 1934 0006 04        		.byte	0x4
 1935 0007 00        		.byte	0
 1936 0008 0000 0000 		.long	0
 1937               	.LLRL0:
 1938 000c 05        		.byte	0x5
 1939 000d 0000 0000 		.long	.LBB2
 1940 0011 04        		.byte	0x4
 1941 0012 00        		.uleb128 .LBB2-.LBB2
 1942 0013 24        		.uleb128 .LBE2-.LBB2
 1943 0014 04        		.byte	0x4
 1944 0015 66        		.uleb128 .LBB3-.LBB2
 1945 0016 8A01      		.uleb128 .LBE3-.LBB2
 1946 0018 00        		.byte	0
 1947               	.LLRL2:
 1948 0019 05        		.byte	0x5
 1949 001a 0000 0000 		.long	.LBB4
 1950 001e 04        		.byte	0x4
 1951 001f 00        		.uleb128 .LBB4-.LBB4
 1952 0020 28        		.uleb128 .LBE4-.LBB4
 1953 0021 04        		.byte	0x4
 1954 0022 6A        		.uleb128 .LBB5-.LBB4
 1955 0023 9401      		.uleb128 .LBE5-.LBB4
 1956 0025 00        		.byte	0
 1957               	.LLRL4:
 1958 0026 05        		.byte	0x5


 1959 0027 0000 0000 		.long	.LBB6
 1960 002b 04        		.byte	0x4
 1961 002c 00        		.uleb128 .LBB6-.LBB6
 1962 002d 2C        		.uleb128 .LBE6-.LBB6
 1963 002e 04        		.byte	0x4
 1964 002f 6E        		.uleb128 .LBB7-.LBB6
 1965 0030 9C01      		.uleb128 .LBE7-.LBB6
 1966 0032 00        		.byte	0
 1967               	.LLRL8:
 1968 0033 07        		.byte	0x7
 1969 0034 0000 0000 		.long	.Ltext0
 1970 0038 E405      		.uleb128 .Letext0-.Ltext0
 1971 003a 07        		.byte	0x7
 1972 003b 0000 0000 		.long	.LFB7
 1973 003f C201      		.uleb128 .LFE7-.LFB7
 1974 0041 00        		.byte	0
 1975               	.Ldebug_ranges3:
 1976               		.section	.debug_line,"",@progbits
 1977               	.Ldebug_line0:
 1978 0000 0000 0299 		.section	.debug_str,"MS",@progbits,1
 1978      0003 0000 
 1978      005E 0201 
 1978      FB0E 0D00 
 1978      0101 0101 
 1979               	.LASF33:
 1980 0000 6578 6974 		.string	"exit"
 1980      00
 1981               	.LASF34:
 1982 0005 7661 6C75 		.string	"value"
 1982      6500 
 1983               	.LASF11:
 1984 000b 636F 756E 		.string	"count"
 1984      7400 
 1985               	.LASF3:
 1986 0011 7368 6F72 		.string	"short unsigned int"
 1986      7420 756E 
 1986      7369 676E 
 1986      6564 2069 
 1986      6E74 00
 1987               	.LASF19:
 1988 0024 736B 6970 		.string	"skipmt"
 1988      6D74 00
 1989               	.LASF15:
 1990 002b 7365 6D61 		.string	"semaphore"
 1990      7068 6F72 
 1990      6500 
 1991               	.LASF28:
 1992 0035 5F5F 6275 		.string	"__builtin_puts"
 1992      696C 7469 
 1992      6E5F 7075 
 1992      7473 00
 1993               	.LASF20:
 1994 0044 7365 745F 		.string	"set_task"
 1994      7461 736B 
 1994      00
 1995               	.LASF1:
 1996 004d 756E 7369 		.string	"unsigned char"


 1996      676E 6564 
 1996      2063 6861 
 1996      7200 
 1997               	.LASF14:
 1998 005b 5345 4D41 		.string	"SEMAPHORE_TYPE"
 1998      5048 4F52 
 1998      455F 5459 
 1998      5045 00
 1999               	.LASF12:
 2000 006a 7461 736B 		.string	"task_list"
 2000      5F6C 6973 
 2000      7400 
 2001               	.LASF5:
 2002 0074 6C6F 6E67 		.string	"long unsigned int"
 2002      2075 6E73 
 2002      6967 6E65 
 2002      6420 696E 
 2002      7400 
 2003               	.LASF23:
 2004 0086 7461 736B 		.string	"task2"
 2004      3200 
 2005               	.LASF22:
 2006 008c 7461 736B 		.string	"task3"
 2006      3300 
 2007               	.LASF31:
 2008 0092 7465 7374 		.string	"test2.c"
 2008      322E 6300 
 2009               	.LASF26:
 2010 009a 7075 7473 		.string	"puts"
 2010      00
 2011               	.LASF17:
 2012 009f 6265 6769 		.string	"begin_sch"
 2012      6E5F 7363 
 2012      6800 
 2013               	.LASF25:
 2014 00a9 7461 736B 		.string	"task_0"
 2014      5F30 00
 2015               	.LASF30:
 2016 00b0 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 2016      4331 3720 
 2016      3131 2E34 
 2016      2E30 202D 
 2016      6D63 7075 
 2017               	.LASF21:
 2018 00f4 6D61 696E 		.string	"main"
 2018      00
 2019               	.LASF9:
 2020 00f9 756E 7369 		.string	"unsigned int"
 2020      676E 6564 
 2020      2069 6E74 
 2020      00
 2021               	.LASF7:
 2022 0106 6C6F 6E67 		.string	"long long unsigned int"
 2022      206C 6F6E 
 2022      6720 756E 
 2022      7369 676E 
 2022      6564 2069 


 2023               	.LASF13:
 2024 011d 5441 534B 		.string	"TASK_ID_TYPE"
 2024      5F49 445F 
 2024      5459 5045 
 2024      00
 2025               	.LASF18:
 2026 012a 696E 6974 		.string	"init_kernel"
 2026      5F6B 6572 
 2026      6E65 6C00 
 2027               	.LASF29:
 2028 0136 5F5F 6275 		.string	"__builtin_printf"
 2028      696C 7469 
 2028      6E5F 7072 
 2028      696E 7466 
 2028      00
 2029               	.LASF8:
 2030 0147 6C6F 6E67 		.string	"long double"
 2030      2064 6F75 
 2030      626C 6500 
 2031               	.LASF24:
 2032 0153 7461 736B 		.string	"task1"
 2032      3100 
 2033               	.LASF6:
 2034 0159 6C6F 6E67 		.string	"long long int"
 2034      206C 6F6E 
 2034      6720 696E 
 2034      7400 
 2035               	.LASF10:
 2036 0167 6368 6172 		.string	"char"
 2036      00
 2037               	.LASF27:
 2038 016c 7072 696E 		.string	"printf"
 2038      7466 00
 2039               	.LASF2:
 2040 0173 7368 6F72 		.string	"short int"
 2040      7420 696E 
 2040      7400 
 2041               	.LASF32:
 2042 017d 2F68 6F6D 		.string	"/home/students/1108981965/\343\203\211\343\202\255\343\203\245\343\203\241\343\203\263\34
 2042      652F 7374 
 2042      7564 656E 
 2042      7473 2F31 
 2042      3130 3839 
 2043               	.LASF4:
 2044 01bb 6C6F 6E67 		.string	"long int"
 2044      2069 6E74 
 2044      00
 2045               	.LASF16:
 2046 01c4 6E74 7461 		.string	"nttask"
 2046      736B 00
 2047               	.LASF0:
 2048 01cb 7369 676E 		.string	"signed char"
 2048      6564 2063 
 2048      6861 7200 
 2049               		.ident	"GCC: (GNU) 11.4.0"


